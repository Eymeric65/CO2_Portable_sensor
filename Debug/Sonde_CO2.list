
Sonde_CO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  00007804  2**0
                  CONTENTS
  4 .ARM          00000008  08005bdc  08005bdc  00006bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be4  08005be4  00007804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000804  20000000  08005bec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000804  080063f0  00007804  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  080063f0  00007950  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007804  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc00  00000000  00000000  0000782c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291d  00000000  00000000  0001542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00017d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad7  00000000  00000000  00018b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129c1  00000000  00000000  0001966f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130c4  00000000  00000000  0002c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ee8a  00000000  00000000  0003f0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adf7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000adfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000b1330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000804 	.word	0x20000804
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005884 	.word	0x08005884

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000808 	.word	0x20000808
 8000104:	08005884 	.word	0x08005884

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 fd46 	bl	8000d6c <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 fd41 	bl	8000d6c <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__aeabi_fdiv>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	464f      	mov	r7, r9
 8000458:	4646      	mov	r6, r8
 800045a:	46d6      	mov	lr, sl
 800045c:	0244      	lsls	r4, r0, #9
 800045e:	b5c0      	push	{r6, r7, lr}
 8000460:	0047      	lsls	r7, r0, #1
 8000462:	1c0e      	adds	r6, r1, #0
 8000464:	0a64      	lsrs	r4, r4, #9
 8000466:	0e3f      	lsrs	r7, r7, #24
 8000468:	0fc5      	lsrs	r5, r0, #31
 800046a:	2f00      	cmp	r7, #0
 800046c:	d03c      	beq.n	80004e8 <__aeabi_fdiv+0x94>
 800046e:	2fff      	cmp	r7, #255	@ 0xff
 8000470:	d042      	beq.n	80004f8 <__aeabi_fdiv+0xa4>
 8000472:	2300      	movs	r3, #0
 8000474:	2280      	movs	r2, #128	@ 0x80
 8000476:	4699      	mov	r9, r3
 8000478:	469a      	mov	sl, r3
 800047a:	00e4      	lsls	r4, r4, #3
 800047c:	04d2      	lsls	r2, r2, #19
 800047e:	4314      	orrs	r4, r2
 8000480:	3f7f      	subs	r7, #127	@ 0x7f
 8000482:	0273      	lsls	r3, r6, #9
 8000484:	0a5b      	lsrs	r3, r3, #9
 8000486:	4698      	mov	r8, r3
 8000488:	0073      	lsls	r3, r6, #1
 800048a:	0e1b      	lsrs	r3, r3, #24
 800048c:	0ff6      	lsrs	r6, r6, #31
 800048e:	2b00      	cmp	r3, #0
 8000490:	d01b      	beq.n	80004ca <__aeabi_fdiv+0x76>
 8000492:	2bff      	cmp	r3, #255	@ 0xff
 8000494:	d013      	beq.n	80004be <__aeabi_fdiv+0x6a>
 8000496:	4642      	mov	r2, r8
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	00d2      	lsls	r2, r2, #3
 800049c:	04c9      	lsls	r1, r1, #19
 800049e:	4311      	orrs	r1, r2
 80004a0:	4688      	mov	r8, r1
 80004a2:	2000      	movs	r0, #0
 80004a4:	3b7f      	subs	r3, #127	@ 0x7f
 80004a6:	0029      	movs	r1, r5
 80004a8:	1aff      	subs	r7, r7, r3
 80004aa:	464b      	mov	r3, r9
 80004ac:	4071      	eors	r1, r6
 80004ae:	b2c9      	uxtb	r1, r1
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d900      	bls.n	80004b6 <__aeabi_fdiv+0x62>
 80004b4:	e0b5      	b.n	8000622 <__aeabi_fdiv+0x1ce>
 80004b6:	4a74      	ldr	r2, [pc, #464]	@ (8000688 <__aeabi_fdiv+0x234>)
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	58d3      	ldr	r3, [r2, r3]
 80004bc:	469f      	mov	pc, r3
 80004be:	4643      	mov	r3, r8
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d13f      	bne.n	8000544 <__aeabi_fdiv+0xf0>
 80004c4:	3fff      	subs	r7, #255	@ 0xff
 80004c6:	3302      	adds	r3, #2
 80004c8:	e003      	b.n	80004d2 <__aeabi_fdiv+0x7e>
 80004ca:	4643      	mov	r3, r8
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d12d      	bne.n	800052c <__aeabi_fdiv+0xd8>
 80004d0:	2301      	movs	r3, #1
 80004d2:	0029      	movs	r1, r5
 80004d4:	464a      	mov	r2, r9
 80004d6:	4071      	eors	r1, r6
 80004d8:	b2c9      	uxtb	r1, r1
 80004da:	431a      	orrs	r2, r3
 80004dc:	2a0e      	cmp	r2, #14
 80004de:	d838      	bhi.n	8000552 <__aeabi_fdiv+0xfe>
 80004e0:	486a      	ldr	r0, [pc, #424]	@ (800068c <__aeabi_fdiv+0x238>)
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	5882      	ldr	r2, [r0, r2]
 80004e6:	4697      	mov	pc, r2
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	d113      	bne.n	8000514 <__aeabi_fdiv+0xc0>
 80004ec:	2304      	movs	r3, #4
 80004ee:	4699      	mov	r9, r3
 80004f0:	3b03      	subs	r3, #3
 80004f2:	2700      	movs	r7, #0
 80004f4:	469a      	mov	sl, r3
 80004f6:	e7c4      	b.n	8000482 <__aeabi_fdiv+0x2e>
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d105      	bne.n	8000508 <__aeabi_fdiv+0xb4>
 80004fc:	2308      	movs	r3, #8
 80004fe:	4699      	mov	r9, r3
 8000500:	3b06      	subs	r3, #6
 8000502:	27ff      	movs	r7, #255	@ 0xff
 8000504:	469a      	mov	sl, r3
 8000506:	e7bc      	b.n	8000482 <__aeabi_fdiv+0x2e>
 8000508:	230c      	movs	r3, #12
 800050a:	4699      	mov	r9, r3
 800050c:	3b09      	subs	r3, #9
 800050e:	27ff      	movs	r7, #255	@ 0xff
 8000510:	469a      	mov	sl, r3
 8000512:	e7b6      	b.n	8000482 <__aeabi_fdiv+0x2e>
 8000514:	0020      	movs	r0, r4
 8000516:	f000 fc0b 	bl	8000d30 <__clzsi2>
 800051a:	2776      	movs	r7, #118	@ 0x76
 800051c:	1f43      	subs	r3, r0, #5
 800051e:	409c      	lsls	r4, r3
 8000520:	2300      	movs	r3, #0
 8000522:	427f      	negs	r7, r7
 8000524:	4699      	mov	r9, r3
 8000526:	469a      	mov	sl, r3
 8000528:	1a3f      	subs	r7, r7, r0
 800052a:	e7aa      	b.n	8000482 <__aeabi_fdiv+0x2e>
 800052c:	4640      	mov	r0, r8
 800052e:	f000 fbff 	bl	8000d30 <__clzsi2>
 8000532:	4642      	mov	r2, r8
 8000534:	1f43      	subs	r3, r0, #5
 8000536:	409a      	lsls	r2, r3
 8000538:	2376      	movs	r3, #118	@ 0x76
 800053a:	425b      	negs	r3, r3
 800053c:	1a1b      	subs	r3, r3, r0
 800053e:	4690      	mov	r8, r2
 8000540:	2000      	movs	r0, #0
 8000542:	e7b0      	b.n	80004a6 <__aeabi_fdiv+0x52>
 8000544:	2303      	movs	r3, #3
 8000546:	464a      	mov	r2, r9
 8000548:	431a      	orrs	r2, r3
 800054a:	4691      	mov	r9, r2
 800054c:	2003      	movs	r0, #3
 800054e:	33fc      	adds	r3, #252	@ 0xfc
 8000550:	e7a9      	b.n	80004a6 <__aeabi_fdiv+0x52>
 8000552:	000d      	movs	r5, r1
 8000554:	20ff      	movs	r0, #255	@ 0xff
 8000556:	2200      	movs	r2, #0
 8000558:	05c0      	lsls	r0, r0, #23
 800055a:	07ed      	lsls	r5, r5, #31
 800055c:	4310      	orrs	r0, r2
 800055e:	4328      	orrs	r0, r5
 8000560:	bce0      	pop	{r5, r6, r7}
 8000562:	46ba      	mov	sl, r7
 8000564:	46b1      	mov	r9, r6
 8000566:	46a8      	mov	r8, r5
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	000d      	movs	r5, r1
 800056c:	2000      	movs	r0, #0
 800056e:	2200      	movs	r2, #0
 8000570:	e7f2      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000572:	4653      	mov	r3, sl
 8000574:	2b02      	cmp	r3, #2
 8000576:	d0ed      	beq.n	8000554 <__aeabi_fdiv+0x100>
 8000578:	2b03      	cmp	r3, #3
 800057a:	d033      	beq.n	80005e4 <__aeabi_fdiv+0x190>
 800057c:	46a0      	mov	r8, r4
 800057e:	2b01      	cmp	r3, #1
 8000580:	d105      	bne.n	800058e <__aeabi_fdiv+0x13a>
 8000582:	2000      	movs	r0, #0
 8000584:	2200      	movs	r2, #0
 8000586:	e7e7      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000588:	0035      	movs	r5, r6
 800058a:	2803      	cmp	r0, #3
 800058c:	d07a      	beq.n	8000684 <__aeabi_fdiv+0x230>
 800058e:	003b      	movs	r3, r7
 8000590:	337f      	adds	r3, #127	@ 0x7f
 8000592:	2b00      	cmp	r3, #0
 8000594:	dd2d      	ble.n	80005f2 <__aeabi_fdiv+0x19e>
 8000596:	4642      	mov	r2, r8
 8000598:	0752      	lsls	r2, r2, #29
 800059a:	d007      	beq.n	80005ac <__aeabi_fdiv+0x158>
 800059c:	220f      	movs	r2, #15
 800059e:	4641      	mov	r1, r8
 80005a0:	400a      	ands	r2, r1
 80005a2:	2a04      	cmp	r2, #4
 80005a4:	d002      	beq.n	80005ac <__aeabi_fdiv+0x158>
 80005a6:	2204      	movs	r2, #4
 80005a8:	4694      	mov	ip, r2
 80005aa:	44e0      	add	r8, ip
 80005ac:	4642      	mov	r2, r8
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	d505      	bpl.n	80005be <__aeabi_fdiv+0x16a>
 80005b2:	4642      	mov	r2, r8
 80005b4:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <__aeabi_fdiv+0x23c>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	003b      	movs	r3, r7
 80005ba:	4690      	mov	r8, r2
 80005bc:	3380      	adds	r3, #128	@ 0x80
 80005be:	2bfe      	cmp	r3, #254	@ 0xfe
 80005c0:	dcc8      	bgt.n	8000554 <__aeabi_fdiv+0x100>
 80005c2:	4642      	mov	r2, r8
 80005c4:	0192      	lsls	r2, r2, #6
 80005c6:	0a52      	lsrs	r2, r2, #9
 80005c8:	b2d8      	uxtb	r0, r3
 80005ca:	e7c5      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	2500      	movs	r5, #0
 80005d0:	20ff      	movs	r0, #255	@ 0xff
 80005d2:	03d2      	lsls	r2, r2, #15
 80005d4:	e7c0      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	03d2      	lsls	r2, r2, #15
 80005da:	4214      	tst	r4, r2
 80005dc:	d002      	beq.n	80005e4 <__aeabi_fdiv+0x190>
 80005de:	4643      	mov	r3, r8
 80005e0:	4213      	tst	r3, r2
 80005e2:	d049      	beq.n	8000678 <__aeabi_fdiv+0x224>
 80005e4:	2280      	movs	r2, #128	@ 0x80
 80005e6:	03d2      	lsls	r2, r2, #15
 80005e8:	4322      	orrs	r2, r4
 80005ea:	0252      	lsls	r2, r2, #9
 80005ec:	20ff      	movs	r0, #255	@ 0xff
 80005ee:	0a52      	lsrs	r2, r2, #9
 80005f0:	e7b2      	b.n	8000558 <__aeabi_fdiv+0x104>
 80005f2:	2201      	movs	r2, #1
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b1b      	cmp	r3, #27
 80005f8:	dcc3      	bgt.n	8000582 <__aeabi_fdiv+0x12e>
 80005fa:	4642      	mov	r2, r8
 80005fc:	40da      	lsrs	r2, r3
 80005fe:	4643      	mov	r3, r8
 8000600:	379e      	adds	r7, #158	@ 0x9e
 8000602:	40bb      	lsls	r3, r7
 8000604:	1e59      	subs	r1, r3, #1
 8000606:	418b      	sbcs	r3, r1
 8000608:	431a      	orrs	r2, r3
 800060a:	0753      	lsls	r3, r2, #29
 800060c:	d004      	beq.n	8000618 <__aeabi_fdiv+0x1c4>
 800060e:	230f      	movs	r3, #15
 8000610:	4013      	ands	r3, r2
 8000612:	2b04      	cmp	r3, #4
 8000614:	d000      	beq.n	8000618 <__aeabi_fdiv+0x1c4>
 8000616:	3204      	adds	r2, #4
 8000618:	0153      	lsls	r3, r2, #5
 800061a:	d529      	bpl.n	8000670 <__aeabi_fdiv+0x21c>
 800061c:	2001      	movs	r0, #1
 800061e:	2200      	movs	r2, #0
 8000620:	e79a      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000622:	4642      	mov	r2, r8
 8000624:	0163      	lsls	r3, r4, #5
 8000626:	0155      	lsls	r5, r2, #5
 8000628:	42ab      	cmp	r3, r5
 800062a:	d215      	bcs.n	8000658 <__aeabi_fdiv+0x204>
 800062c:	201b      	movs	r0, #27
 800062e:	2200      	movs	r2, #0
 8000630:	3f01      	subs	r7, #1
 8000632:	2601      	movs	r6, #1
 8000634:	001c      	movs	r4, r3
 8000636:	0052      	lsls	r2, r2, #1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	2c00      	cmp	r4, #0
 800063c:	db01      	blt.n	8000642 <__aeabi_fdiv+0x1ee>
 800063e:	429d      	cmp	r5, r3
 8000640:	d801      	bhi.n	8000646 <__aeabi_fdiv+0x1f2>
 8000642:	1b5b      	subs	r3, r3, r5
 8000644:	4332      	orrs	r2, r6
 8000646:	3801      	subs	r0, #1
 8000648:	2800      	cmp	r0, #0
 800064a:	d1f3      	bne.n	8000634 <__aeabi_fdiv+0x1e0>
 800064c:	1e58      	subs	r0, r3, #1
 800064e:	4183      	sbcs	r3, r0
 8000650:	4313      	orrs	r3, r2
 8000652:	4698      	mov	r8, r3
 8000654:	000d      	movs	r5, r1
 8000656:	e79a      	b.n	800058e <__aeabi_fdiv+0x13a>
 8000658:	201a      	movs	r0, #26
 800065a:	2201      	movs	r2, #1
 800065c:	1b5b      	subs	r3, r3, r5
 800065e:	e7e8      	b.n	8000632 <__aeabi_fdiv+0x1de>
 8000660:	3b02      	subs	r3, #2
 8000662:	425a      	negs	r2, r3
 8000664:	4153      	adcs	r3, r2
 8000666:	425b      	negs	r3, r3
 8000668:	0035      	movs	r5, r6
 800066a:	2200      	movs	r2, #0
 800066c:	b2d8      	uxtb	r0, r3
 800066e:	e773      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000670:	0192      	lsls	r2, r2, #6
 8000672:	2000      	movs	r0, #0
 8000674:	0a52      	lsrs	r2, r2, #9
 8000676:	e76f      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000678:	431a      	orrs	r2, r3
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	0035      	movs	r5, r6
 800067e:	20ff      	movs	r0, #255	@ 0xff
 8000680:	0a52      	lsrs	r2, r2, #9
 8000682:	e769      	b.n	8000558 <__aeabi_fdiv+0x104>
 8000684:	4644      	mov	r4, r8
 8000686:	e7ad      	b.n	80005e4 <__aeabi_fdiv+0x190>
 8000688:	0800589c 	.word	0x0800589c
 800068c:	080058dc 	.word	0x080058dc
 8000690:	f7ffffff 	.word	0xf7ffffff

08000694 <__aeabi_fmul>:
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	464f      	mov	r7, r9
 8000698:	4646      	mov	r6, r8
 800069a:	46d6      	mov	lr, sl
 800069c:	0243      	lsls	r3, r0, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	0045      	lsls	r5, r0, #1
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	4699      	mov	r9, r3
 80006a6:	1c0f      	adds	r7, r1, #0
 80006a8:	0e2d      	lsrs	r5, r5, #24
 80006aa:	0fc6      	lsrs	r6, r0, #31
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fmul+0x1e>
 80006b0:	e088      	b.n	80007c4 <__aeabi_fmul+0x130>
 80006b2:	2dff      	cmp	r5, #255	@ 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fmul+0x24>
 80006b6:	e08d      	b.n	80007d4 <__aeabi_fmul+0x140>
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	04d2      	lsls	r2, r2, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	2300      	movs	r3, #0
 80006c2:	4691      	mov	r9, r2
 80006c4:	4698      	mov	r8, r3
 80006c6:	469a      	mov	sl, r3
 80006c8:	3d7f      	subs	r5, #127	@ 0x7f
 80006ca:	027c      	lsls	r4, r7, #9
 80006cc:	007b      	lsls	r3, r7, #1
 80006ce:	0a64      	lsrs	r4, r4, #9
 80006d0:	0e1b      	lsrs	r3, r3, #24
 80006d2:	0fff      	lsrs	r7, r7, #31
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d068      	beq.n	80007aa <__aeabi_fmul+0x116>
 80006d8:	2bff      	cmp	r3, #255	@ 0xff
 80006da:	d021      	beq.n	8000720 <__aeabi_fmul+0x8c>
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	04d2      	lsls	r2, r2, #19
 80006e2:	4314      	orrs	r4, r2
 80006e4:	4642      	mov	r2, r8
 80006e6:	3b7f      	subs	r3, #127	@ 0x7f
 80006e8:	195b      	adds	r3, r3, r5
 80006ea:	2100      	movs	r1, #0
 80006ec:	1c5d      	adds	r5, r3, #1
 80006ee:	2a0a      	cmp	r2, #10
 80006f0:	dc2e      	bgt.n	8000750 <__aeabi_fmul+0xbc>
 80006f2:	407e      	eors	r6, r7
 80006f4:	4642      	mov	r2, r8
 80006f6:	2a02      	cmp	r2, #2
 80006f8:	dc23      	bgt.n	8000742 <__aeabi_fmul+0xae>
 80006fa:	3a01      	subs	r2, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d900      	bls.n	8000702 <__aeabi_fmul+0x6e>
 8000700:	e0bd      	b.n	800087e <__aeabi_fmul+0x1ea>
 8000702:	2902      	cmp	r1, #2
 8000704:	d06e      	beq.n	80007e4 <__aeabi_fmul+0x150>
 8000706:	2901      	cmp	r1, #1
 8000708:	d12c      	bne.n	8000764 <__aeabi_fmul+0xd0>
 800070a:	2000      	movs	r0, #0
 800070c:	2200      	movs	r2, #0
 800070e:	05c0      	lsls	r0, r0, #23
 8000710:	07f6      	lsls	r6, r6, #31
 8000712:	4310      	orrs	r0, r2
 8000714:	4330      	orrs	r0, r6
 8000716:	bce0      	pop	{r5, r6, r7}
 8000718:	46ba      	mov	sl, r7
 800071a:	46b1      	mov	r9, r6
 800071c:	46a8      	mov	r8, r5
 800071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000720:	002b      	movs	r3, r5
 8000722:	33ff      	adds	r3, #255	@ 0xff
 8000724:	2c00      	cmp	r4, #0
 8000726:	d065      	beq.n	80007f4 <__aeabi_fmul+0x160>
 8000728:	2203      	movs	r2, #3
 800072a:	4641      	mov	r1, r8
 800072c:	4311      	orrs	r1, r2
 800072e:	0032      	movs	r2, r6
 8000730:	3501      	adds	r5, #1
 8000732:	4688      	mov	r8, r1
 8000734:	407a      	eors	r2, r7
 8000736:	35ff      	adds	r5, #255	@ 0xff
 8000738:	290a      	cmp	r1, #10
 800073a:	dd00      	ble.n	800073e <__aeabi_fmul+0xaa>
 800073c:	e0d8      	b.n	80008f0 <__aeabi_fmul+0x25c>
 800073e:	0016      	movs	r6, r2
 8000740:	2103      	movs	r1, #3
 8000742:	4640      	mov	r0, r8
 8000744:	2201      	movs	r2, #1
 8000746:	4082      	lsls	r2, r0
 8000748:	20a6      	movs	r0, #166	@ 0xa6
 800074a:	00c0      	lsls	r0, r0, #3
 800074c:	4202      	tst	r2, r0
 800074e:	d020      	beq.n	8000792 <__aeabi_fmul+0xfe>
 8000750:	4653      	mov	r3, sl
 8000752:	2b02      	cmp	r3, #2
 8000754:	d046      	beq.n	80007e4 <__aeabi_fmul+0x150>
 8000756:	2b03      	cmp	r3, #3
 8000758:	d100      	bne.n	800075c <__aeabi_fmul+0xc8>
 800075a:	e0bb      	b.n	80008d4 <__aeabi_fmul+0x240>
 800075c:	4651      	mov	r1, sl
 800075e:	464c      	mov	r4, r9
 8000760:	2901      	cmp	r1, #1
 8000762:	d0d2      	beq.n	800070a <__aeabi_fmul+0x76>
 8000764:	002b      	movs	r3, r5
 8000766:	337f      	adds	r3, #127	@ 0x7f
 8000768:	2b00      	cmp	r3, #0
 800076a:	dd70      	ble.n	800084e <__aeabi_fmul+0x1ba>
 800076c:	0762      	lsls	r2, r4, #29
 800076e:	d004      	beq.n	800077a <__aeabi_fmul+0xe6>
 8000770:	220f      	movs	r2, #15
 8000772:	4022      	ands	r2, r4
 8000774:	2a04      	cmp	r2, #4
 8000776:	d000      	beq.n	800077a <__aeabi_fmul+0xe6>
 8000778:	3404      	adds	r4, #4
 800077a:	0122      	lsls	r2, r4, #4
 800077c:	d503      	bpl.n	8000786 <__aeabi_fmul+0xf2>
 800077e:	4b63      	ldr	r3, [pc, #396]	@ (800090c <__aeabi_fmul+0x278>)
 8000780:	401c      	ands	r4, r3
 8000782:	002b      	movs	r3, r5
 8000784:	3380      	adds	r3, #128	@ 0x80
 8000786:	2bfe      	cmp	r3, #254	@ 0xfe
 8000788:	dc2c      	bgt.n	80007e4 <__aeabi_fmul+0x150>
 800078a:	01a2      	lsls	r2, r4, #6
 800078c:	0a52      	lsrs	r2, r2, #9
 800078e:	b2d8      	uxtb	r0, r3
 8000790:	e7bd      	b.n	800070e <__aeabi_fmul+0x7a>
 8000792:	2090      	movs	r0, #144	@ 0x90
 8000794:	0080      	lsls	r0, r0, #2
 8000796:	4202      	tst	r2, r0
 8000798:	d127      	bne.n	80007ea <__aeabi_fmul+0x156>
 800079a:	38b9      	subs	r0, #185	@ 0xb9
 800079c:	38ff      	subs	r0, #255	@ 0xff
 800079e:	4210      	tst	r0, r2
 80007a0:	d06d      	beq.n	800087e <__aeabi_fmul+0x1ea>
 80007a2:	003e      	movs	r6, r7
 80007a4:	46a1      	mov	r9, r4
 80007a6:	468a      	mov	sl, r1
 80007a8:	e7d2      	b.n	8000750 <__aeabi_fmul+0xbc>
 80007aa:	2c00      	cmp	r4, #0
 80007ac:	d141      	bne.n	8000832 <__aeabi_fmul+0x19e>
 80007ae:	2301      	movs	r3, #1
 80007b0:	4642      	mov	r2, r8
 80007b2:	431a      	orrs	r2, r3
 80007b4:	4690      	mov	r8, r2
 80007b6:	002b      	movs	r3, r5
 80007b8:	4642      	mov	r2, r8
 80007ba:	2101      	movs	r1, #1
 80007bc:	1c5d      	adds	r5, r3, #1
 80007be:	2a0a      	cmp	r2, #10
 80007c0:	dd97      	ble.n	80006f2 <__aeabi_fmul+0x5e>
 80007c2:	e7c5      	b.n	8000750 <__aeabi_fmul+0xbc>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d126      	bne.n	8000816 <__aeabi_fmul+0x182>
 80007c8:	2304      	movs	r3, #4
 80007ca:	4698      	mov	r8, r3
 80007cc:	3b03      	subs	r3, #3
 80007ce:	2500      	movs	r5, #0
 80007d0:	469a      	mov	sl, r3
 80007d2:	e77a      	b.n	80006ca <__aeabi_fmul+0x36>
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d118      	bne.n	800080a <__aeabi_fmul+0x176>
 80007d8:	2308      	movs	r3, #8
 80007da:	4698      	mov	r8, r3
 80007dc:	3b06      	subs	r3, #6
 80007de:	25ff      	movs	r5, #255	@ 0xff
 80007e0:	469a      	mov	sl, r3
 80007e2:	e772      	b.n	80006ca <__aeabi_fmul+0x36>
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	2200      	movs	r2, #0
 80007e8:	e791      	b.n	800070e <__aeabi_fmul+0x7a>
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	2600      	movs	r6, #0
 80007ee:	20ff      	movs	r0, #255	@ 0xff
 80007f0:	03d2      	lsls	r2, r2, #15
 80007f2:	e78c      	b.n	800070e <__aeabi_fmul+0x7a>
 80007f4:	4641      	mov	r1, r8
 80007f6:	2202      	movs	r2, #2
 80007f8:	3501      	adds	r5, #1
 80007fa:	4311      	orrs	r1, r2
 80007fc:	4688      	mov	r8, r1
 80007fe:	35ff      	adds	r5, #255	@ 0xff
 8000800:	290a      	cmp	r1, #10
 8000802:	dca5      	bgt.n	8000750 <__aeabi_fmul+0xbc>
 8000804:	2102      	movs	r1, #2
 8000806:	407e      	eors	r6, r7
 8000808:	e774      	b.n	80006f4 <__aeabi_fmul+0x60>
 800080a:	230c      	movs	r3, #12
 800080c:	4698      	mov	r8, r3
 800080e:	3b09      	subs	r3, #9
 8000810:	25ff      	movs	r5, #255	@ 0xff
 8000812:	469a      	mov	sl, r3
 8000814:	e759      	b.n	80006ca <__aeabi_fmul+0x36>
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fa8a 	bl	8000d30 <__clzsi2>
 800081c:	464a      	mov	r2, r9
 800081e:	1f43      	subs	r3, r0, #5
 8000820:	2576      	movs	r5, #118	@ 0x76
 8000822:	409a      	lsls	r2, r3
 8000824:	2300      	movs	r3, #0
 8000826:	426d      	negs	r5, r5
 8000828:	4691      	mov	r9, r2
 800082a:	4698      	mov	r8, r3
 800082c:	469a      	mov	sl, r3
 800082e:	1a2d      	subs	r5, r5, r0
 8000830:	e74b      	b.n	80006ca <__aeabi_fmul+0x36>
 8000832:	0020      	movs	r0, r4
 8000834:	f000 fa7c 	bl	8000d30 <__clzsi2>
 8000838:	4642      	mov	r2, r8
 800083a:	1f43      	subs	r3, r0, #5
 800083c:	409c      	lsls	r4, r3
 800083e:	1a2b      	subs	r3, r5, r0
 8000840:	3b76      	subs	r3, #118	@ 0x76
 8000842:	2100      	movs	r1, #0
 8000844:	1c5d      	adds	r5, r3, #1
 8000846:	2a0a      	cmp	r2, #10
 8000848:	dc00      	bgt.n	800084c <__aeabi_fmul+0x1b8>
 800084a:	e752      	b.n	80006f2 <__aeabi_fmul+0x5e>
 800084c:	e780      	b.n	8000750 <__aeabi_fmul+0xbc>
 800084e:	2201      	movs	r2, #1
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	2b1b      	cmp	r3, #27
 8000854:	dd00      	ble.n	8000858 <__aeabi_fmul+0x1c4>
 8000856:	e758      	b.n	800070a <__aeabi_fmul+0x76>
 8000858:	359e      	adds	r5, #158	@ 0x9e
 800085a:	0022      	movs	r2, r4
 800085c:	40ac      	lsls	r4, r5
 800085e:	40da      	lsrs	r2, r3
 8000860:	1e63      	subs	r3, r4, #1
 8000862:	419c      	sbcs	r4, r3
 8000864:	4322      	orrs	r2, r4
 8000866:	0753      	lsls	r3, r2, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x1e0>
 800086a:	230f      	movs	r3, #15
 800086c:	4013      	ands	r3, r2
 800086e:	2b04      	cmp	r3, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x1e0>
 8000872:	3204      	adds	r2, #4
 8000874:	0153      	lsls	r3, r2, #5
 8000876:	d537      	bpl.n	80008e8 <__aeabi_fmul+0x254>
 8000878:	2001      	movs	r0, #1
 800087a:	2200      	movs	r2, #0
 800087c:	e747      	b.n	800070e <__aeabi_fmul+0x7a>
 800087e:	0c21      	lsrs	r1, r4, #16
 8000880:	464a      	mov	r2, r9
 8000882:	0424      	lsls	r4, r4, #16
 8000884:	0c24      	lsrs	r4, r4, #16
 8000886:	0027      	movs	r7, r4
 8000888:	0c10      	lsrs	r0, r2, #16
 800088a:	0412      	lsls	r2, r2, #16
 800088c:	0c12      	lsrs	r2, r2, #16
 800088e:	4344      	muls	r4, r0
 8000890:	4357      	muls	r7, r2
 8000892:	4348      	muls	r0, r1
 8000894:	4351      	muls	r1, r2
 8000896:	0c3a      	lsrs	r2, r7, #16
 8000898:	1909      	adds	r1, r1, r4
 800089a:	1852      	adds	r2, r2, r1
 800089c:	4294      	cmp	r4, r2
 800089e:	d903      	bls.n	80008a8 <__aeabi_fmul+0x214>
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0249      	lsls	r1, r1, #9
 80008a4:	468c      	mov	ip, r1
 80008a6:	4460      	add	r0, ip
 80008a8:	043f      	lsls	r7, r7, #16
 80008aa:	0411      	lsls	r1, r2, #16
 80008ac:	0c3f      	lsrs	r7, r7, #16
 80008ae:	19c9      	adds	r1, r1, r7
 80008b0:	018c      	lsls	r4, r1, #6
 80008b2:	1e67      	subs	r7, r4, #1
 80008b4:	41bc      	sbcs	r4, r7
 80008b6:	0c12      	lsrs	r2, r2, #16
 80008b8:	0e89      	lsrs	r1, r1, #26
 80008ba:	1812      	adds	r2, r2, r0
 80008bc:	430c      	orrs	r4, r1
 80008be:	0192      	lsls	r2, r2, #6
 80008c0:	4314      	orrs	r4, r2
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	d50e      	bpl.n	80008e4 <__aeabi_fmul+0x250>
 80008c6:	2301      	movs	r3, #1
 80008c8:	0862      	lsrs	r2, r4, #1
 80008ca:	401c      	ands	r4, r3
 80008cc:	4314      	orrs	r4, r2
 80008ce:	e749      	b.n	8000764 <__aeabi_fmul+0xd0>
 80008d0:	003e      	movs	r6, r7
 80008d2:	46a1      	mov	r9, r4
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	464b      	mov	r3, r9
 80008d8:	03d2      	lsls	r2, r2, #15
 80008da:	431a      	orrs	r2, r3
 80008dc:	0252      	lsls	r2, r2, #9
 80008de:	20ff      	movs	r0, #255	@ 0xff
 80008e0:	0a52      	lsrs	r2, r2, #9
 80008e2:	e714      	b.n	800070e <__aeabi_fmul+0x7a>
 80008e4:	001d      	movs	r5, r3
 80008e6:	e73d      	b.n	8000764 <__aeabi_fmul+0xd0>
 80008e8:	0192      	lsls	r2, r2, #6
 80008ea:	2000      	movs	r0, #0
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e70e      	b.n	800070e <__aeabi_fmul+0x7a>
 80008f0:	290f      	cmp	r1, #15
 80008f2:	d1ed      	bne.n	80008d0 <__aeabi_fmul+0x23c>
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	464b      	mov	r3, r9
 80008f8:	03d2      	lsls	r2, r2, #15
 80008fa:	4213      	tst	r3, r2
 80008fc:	d0ea      	beq.n	80008d4 <__aeabi_fmul+0x240>
 80008fe:	4214      	tst	r4, r2
 8000900:	d1e8      	bne.n	80008d4 <__aeabi_fmul+0x240>
 8000902:	003e      	movs	r6, r7
 8000904:	20ff      	movs	r0, #255	@ 0xff
 8000906:	4322      	orrs	r2, r4
 8000908:	e701      	b.n	800070e <__aeabi_fmul+0x7a>
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	f7ffffff 	.word	0xf7ffffff

08000910 <__aeabi_fsub>:
 8000910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000912:	4647      	mov	r7, r8
 8000914:	46ce      	mov	lr, r9
 8000916:	024e      	lsls	r6, r1, #9
 8000918:	0243      	lsls	r3, r0, #9
 800091a:	0045      	lsls	r5, r0, #1
 800091c:	0a72      	lsrs	r2, r6, #9
 800091e:	0fc4      	lsrs	r4, r0, #31
 8000920:	0048      	lsls	r0, r1, #1
 8000922:	b580      	push	{r7, lr}
 8000924:	4694      	mov	ip, r2
 8000926:	0a5f      	lsrs	r7, r3, #9
 8000928:	0e2d      	lsrs	r5, r5, #24
 800092a:	099b      	lsrs	r3, r3, #6
 800092c:	0e00      	lsrs	r0, r0, #24
 800092e:	0fc9      	lsrs	r1, r1, #31
 8000930:	09b6      	lsrs	r6, r6, #6
 8000932:	28ff      	cmp	r0, #255	@ 0xff
 8000934:	d024      	beq.n	8000980 <__aeabi_fsub+0x70>
 8000936:	2201      	movs	r2, #1
 8000938:	4051      	eors	r1, r2
 800093a:	1a2a      	subs	r2, r5, r0
 800093c:	428c      	cmp	r4, r1
 800093e:	d00f      	beq.n	8000960 <__aeabi_fsub+0x50>
 8000940:	2a00      	cmp	r2, #0
 8000942:	dc00      	bgt.n	8000946 <__aeabi_fsub+0x36>
 8000944:	e16a      	b.n	8000c1c <__aeabi_fsub+0x30c>
 8000946:	2800      	cmp	r0, #0
 8000948:	d135      	bne.n	80009b6 <__aeabi_fsub+0xa6>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fsub+0x40>
 800094e:	e0a2      	b.n	8000a96 <__aeabi_fsub+0x186>
 8000950:	1e51      	subs	r1, r2, #1
 8000952:	2a01      	cmp	r2, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x48>
 8000956:	e124      	b.n	8000ba2 <__aeabi_fsub+0x292>
 8000958:	2aff      	cmp	r2, #255	@ 0xff
 800095a:	d021      	beq.n	80009a0 <__aeabi_fsub+0x90>
 800095c:	000a      	movs	r2, r1
 800095e:	e02f      	b.n	80009c0 <__aeabi_fsub+0xb0>
 8000960:	2a00      	cmp	r2, #0
 8000962:	dc00      	bgt.n	8000966 <__aeabi_fsub+0x56>
 8000964:	e167      	b.n	8000c36 <__aeabi_fsub+0x326>
 8000966:	2800      	cmp	r0, #0
 8000968:	d05e      	beq.n	8000a28 <__aeabi_fsub+0x118>
 800096a:	2dff      	cmp	r5, #255	@ 0xff
 800096c:	d018      	beq.n	80009a0 <__aeabi_fsub+0x90>
 800096e:	2180      	movs	r1, #128	@ 0x80
 8000970:	04c9      	lsls	r1, r1, #19
 8000972:	430e      	orrs	r6, r1
 8000974:	2a1b      	cmp	r2, #27
 8000976:	dc00      	bgt.n	800097a <__aeabi_fsub+0x6a>
 8000978:	e076      	b.n	8000a68 <__aeabi_fsub+0x158>
 800097a:	002a      	movs	r2, r5
 800097c:	3301      	adds	r3, #1
 800097e:	e032      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000980:	002a      	movs	r2, r5
 8000982:	3aff      	subs	r2, #255	@ 0xff
 8000984:	4691      	mov	r9, r2
 8000986:	2e00      	cmp	r6, #0
 8000988:	d042      	beq.n	8000a10 <__aeabi_fsub+0x100>
 800098a:	428c      	cmp	r4, r1
 800098c:	d055      	beq.n	8000a3a <__aeabi_fsub+0x12a>
 800098e:	464a      	mov	r2, r9
 8000990:	2a00      	cmp	r2, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x86>
 8000994:	e09c      	b.n	8000ad0 <__aeabi_fsub+0x1c0>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x8c>
 800099a:	e077      	b.n	8000a8c <__aeabi_fsub+0x17c>
 800099c:	000c      	movs	r4, r1
 800099e:	0033      	movs	r3, r6
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x98>
 80009a6:	e06e      	b.n	8000a86 <__aeabi_fsub+0x176>
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	03d2      	lsls	r2, r2, #15
 80009ac:	4313      	orrs	r3, r2
 80009ae:	025b      	lsls	r3, r3, #9
 80009b0:	20ff      	movs	r0, #255	@ 0xff
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	e024      	b.n	8000a00 <__aeabi_fsub+0xf0>
 80009b6:	2dff      	cmp	r5, #255	@ 0xff
 80009b8:	d0f2      	beq.n	80009a0 <__aeabi_fsub+0x90>
 80009ba:	2180      	movs	r1, #128	@ 0x80
 80009bc:	04c9      	lsls	r1, r1, #19
 80009be:	430e      	orrs	r6, r1
 80009c0:	2101      	movs	r1, #1
 80009c2:	2a1b      	cmp	r2, #27
 80009c4:	dc08      	bgt.n	80009d8 <__aeabi_fsub+0xc8>
 80009c6:	0031      	movs	r1, r6
 80009c8:	2020      	movs	r0, #32
 80009ca:	40d1      	lsrs	r1, r2
 80009cc:	1a82      	subs	r2, r0, r2
 80009ce:	4096      	lsls	r6, r2
 80009d0:	0032      	movs	r2, r6
 80009d2:	1e50      	subs	r0, r2, #1
 80009d4:	4182      	sbcs	r2, r0
 80009d6:	4311      	orrs	r1, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	015a      	lsls	r2, r3, #5
 80009dc:	d460      	bmi.n	8000aa0 <__aeabi_fsub+0x190>
 80009de:	2107      	movs	r1, #7
 80009e0:	002a      	movs	r2, r5
 80009e2:	4019      	ands	r1, r3
 80009e4:	d057      	beq.n	8000a96 <__aeabi_fsub+0x186>
 80009e6:	210f      	movs	r1, #15
 80009e8:	4019      	ands	r1, r3
 80009ea:	2904      	cmp	r1, #4
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fsub+0xe0>
 80009ee:	3304      	adds	r3, #4
 80009f0:	0159      	lsls	r1, r3, #5
 80009f2:	d550      	bpl.n	8000a96 <__aeabi_fsub+0x186>
 80009f4:	1c50      	adds	r0, r2, #1
 80009f6:	2afe      	cmp	r2, #254	@ 0xfe
 80009f8:	d045      	beq.n	8000a86 <__aeabi_fsub+0x176>
 80009fa:	019b      	lsls	r3, r3, #6
 80009fc:	b2c0      	uxtb	r0, r0
 80009fe:	0a5b      	lsrs	r3, r3, #9
 8000a00:	05c0      	lsls	r0, r0, #23
 8000a02:	4318      	orrs	r0, r3
 8000a04:	07e4      	lsls	r4, r4, #31
 8000a06:	4320      	orrs	r0, r4
 8000a08:	bcc0      	pop	{r6, r7}
 8000a0a:	46b9      	mov	r9, r7
 8000a0c:	46b0      	mov	r8, r6
 8000a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a10:	2201      	movs	r2, #1
 8000a12:	4051      	eors	r1, r2
 8000a14:	428c      	cmp	r4, r1
 8000a16:	d1ba      	bne.n	800098e <__aeabi_fsub+0x7e>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d010      	beq.n	8000a40 <__aeabi_fsub+0x130>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fsub+0x114>
 8000a22:	e098      	b.n	8000b56 <__aeabi_fsub+0x246>
 8000a24:	2300      	movs	r3, #0
 8000a26:	e7bb      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d034      	beq.n	8000a96 <__aeabi_fsub+0x186>
 8000a2c:	1e51      	subs	r1, r2, #1
 8000a2e:	2a01      	cmp	r2, #1
 8000a30:	d06e      	beq.n	8000b10 <__aeabi_fsub+0x200>
 8000a32:	2aff      	cmp	r2, #255	@ 0xff
 8000a34:	d0b4      	beq.n	80009a0 <__aeabi_fsub+0x90>
 8000a36:	000a      	movs	r2, r1
 8000a38:	e79c      	b.n	8000974 <__aeabi_fsub+0x64>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d000      	beq.n	8000a40 <__aeabi_fsub+0x130>
 8000a3e:	e088      	b.n	8000b52 <__aeabi_fsub+0x242>
 8000a40:	20fe      	movs	r0, #254	@ 0xfe
 8000a42:	1c6a      	adds	r2, r5, #1
 8000a44:	4210      	tst	r0, r2
 8000a46:	d000      	beq.n	8000a4a <__aeabi_fsub+0x13a>
 8000a48:	e092      	b.n	8000b70 <__aeabi_fsub+0x260>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_fsub+0x140>
 8000a4e:	e0a4      	b.n	8000b9a <__aeabi_fsub+0x28a>
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fsub+0x146>
 8000a54:	e0cb      	b.n	8000bee <__aeabi_fsub+0x2de>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x14c>
 8000a5a:	e0ca      	b.n	8000bf2 <__aeabi_fsub+0x2e2>
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	025b      	lsls	r3, r3, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	b2d0      	uxtb	r0, r2
 8000a66:	e7cb      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000a68:	0031      	movs	r1, r6
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	40d1      	lsrs	r1, r2
 8000a6e:	1a82      	subs	r2, r0, r2
 8000a70:	4096      	lsls	r6, r2
 8000a72:	0032      	movs	r2, r6
 8000a74:	1e50      	subs	r0, r2, #1
 8000a76:	4182      	sbcs	r2, r0
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	189b      	adds	r3, r3, r2
 8000a7c:	015a      	lsls	r2, r3, #5
 8000a7e:	d5ae      	bpl.n	80009de <__aeabi_fsub+0xce>
 8000a80:	1c6a      	adds	r2, r5, #1
 8000a82:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a84:	d14a      	bne.n	8000b1c <__aeabi_fsub+0x20c>
 8000a86:	20ff      	movs	r0, #255	@ 0xff
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e7b9      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000a8c:	22ff      	movs	r2, #255	@ 0xff
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__aeabi_fsub+0x21a>
 8000a92:	000c      	movs	r4, r1
 8000a94:	0033      	movs	r3, r6
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	2aff      	cmp	r2, #255	@ 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fsub+0x18e>
 8000a9c:	e781      	b.n	80009a2 <__aeabi_fsub+0x92>
 8000a9e:	e7df      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000aa0:	019f      	lsls	r7, r3, #6
 8000aa2:	09bf      	lsrs	r7, r7, #6
 8000aa4:	0038      	movs	r0, r7
 8000aa6:	f000 f943 	bl	8000d30 <__clzsi2>
 8000aaa:	3805      	subs	r0, #5
 8000aac:	4087      	lsls	r7, r0
 8000aae:	4285      	cmp	r5, r0
 8000ab0:	dc21      	bgt.n	8000af6 <__aeabi_fsub+0x1e6>
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2120      	movs	r1, #32
 8000ab6:	1b42      	subs	r2, r0, r5
 8000ab8:	3201      	adds	r2, #1
 8000aba:	40d3      	lsrs	r3, r2
 8000abc:	1a8a      	subs	r2, r1, r2
 8000abe:	4097      	lsls	r7, r2
 8000ac0:	1e7a      	subs	r2, r7, #1
 8000ac2:	4197      	sbcs	r7, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	433b      	orrs	r3, r7
 8000ac8:	0759      	lsls	r1, r3, #29
 8000aca:	d000      	beq.n	8000ace <__aeabi_fsub+0x1be>
 8000acc:	e78b      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fsub+0xe0>
 8000ad0:	20fe      	movs	r0, #254	@ 0xfe
 8000ad2:	1c6a      	adds	r2, r5, #1
 8000ad4:	4210      	tst	r0, r2
 8000ad6:	d112      	bne.n	8000afe <__aeabi_fsub+0x1ee>
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	d152      	bne.n	8000b82 <__aeabi_fsub+0x272>
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d07c      	beq.n	8000bda <__aeabi_fsub+0x2ca>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	d0bb      	beq.n	8000a5c <__aeabi_fsub+0x14c>
 8000ae4:	1b9a      	subs	r2, r3, r6
 8000ae6:	0150      	lsls	r0, r2, #5
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_fsub+0x1dc>
 8000aea:	e08b      	b.n	8000c04 <__aeabi_fsub+0x2f4>
 8000aec:	2401      	movs	r4, #1
 8000aee:	2200      	movs	r2, #0
 8000af0:	1af3      	subs	r3, r6, r3
 8000af2:	400c      	ands	r4, r1
 8000af4:	e7e8      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000af6:	4b56      	ldr	r3, [pc, #344]	@ (8000c50 <__aeabi_fsub+0x340>)
 8000af8:	1a2a      	subs	r2, r5, r0
 8000afa:	403b      	ands	r3, r7
 8000afc:	e7e4      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000afe:	1b9f      	subs	r7, r3, r6
 8000b00:	017a      	lsls	r2, r7, #5
 8000b02:	d446      	bmi.n	8000b92 <__aeabi_fsub+0x282>
 8000b04:	2f00      	cmp	r7, #0
 8000b06:	d1cd      	bne.n	8000aa4 <__aeabi_fsub+0x194>
 8000b08:	2400      	movs	r4, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e777      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000b10:	199b      	adds	r3, r3, r6
 8000b12:	2501      	movs	r5, #1
 8000b14:	3201      	adds	r2, #1
 8000b16:	0159      	lsls	r1, r3, #5
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_fsub+0x20c>
 8000b1a:	e760      	b.n	80009de <__aeabi_fsub+0xce>
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	484d      	ldr	r0, [pc, #308]	@ (8000c54 <__aeabi_fsub+0x344>)
 8000b20:	4019      	ands	r1, r3
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4003      	ands	r3, r0
 8000b26:	430b      	orrs	r3, r1
 8000b28:	e7ce      	b.n	8000ac8 <__aeabi_fsub+0x1b8>
 8000b2a:	1e57      	subs	r7, r2, #1
 8000b2c:	2a01      	cmp	r2, #1
 8000b2e:	d05a      	beq.n	8000be6 <__aeabi_fsub+0x2d6>
 8000b30:	000c      	movs	r4, r1
 8000b32:	2aff      	cmp	r2, #255	@ 0xff
 8000b34:	d033      	beq.n	8000b9e <__aeabi_fsub+0x28e>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2f1b      	cmp	r7, #27
 8000b3a:	dc07      	bgt.n	8000b4c <__aeabi_fsub+0x23c>
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	1bc9      	subs	r1, r1, r7
 8000b40:	001a      	movs	r2, r3
 8000b42:	408b      	lsls	r3, r1
 8000b44:	40fa      	lsrs	r2, r7
 8000b46:	1e59      	subs	r1, r3, #1
 8000b48:	418b      	sbcs	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	0005      	movs	r5, r0
 8000b4e:	1ab3      	subs	r3, r6, r2
 8000b50:	e743      	b.n	80009da <__aeabi_fsub+0xca>
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d123      	bne.n	8000b9e <__aeabi_fsub+0x28e>
 8000b56:	22ff      	movs	r2, #255	@ 0xff
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d09b      	beq.n	8000a94 <__aeabi_fsub+0x184>
 8000b5c:	1e51      	subs	r1, r2, #1
 8000b5e:	2a01      	cmp	r2, #1
 8000b60:	d0d6      	beq.n	8000b10 <__aeabi_fsub+0x200>
 8000b62:	2aff      	cmp	r2, #255	@ 0xff
 8000b64:	d01b      	beq.n	8000b9e <__aeabi_fsub+0x28e>
 8000b66:	291b      	cmp	r1, #27
 8000b68:	dd2c      	ble.n	8000bc4 <__aeabi_fsub+0x2b4>
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	1c73      	adds	r3, r6, #1
 8000b6e:	e73a      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000b70:	2aff      	cmp	r2, #255	@ 0xff
 8000b72:	d088      	beq.n	8000a86 <__aeabi_fsub+0x176>
 8000b74:	199b      	adds	r3, r3, r6
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	0759      	lsls	r1, r3, #29
 8000b7a:	d000      	beq.n	8000b7e <__aeabi_fsub+0x26e>
 8000b7c:	e733      	b.n	80009e6 <__aeabi_fsub+0xd6>
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	e76e      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d110      	bne.n	8000ba8 <__aeabi_fsub+0x298>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d043      	beq.n	8000c12 <__aeabi_fsub+0x302>
 8000b8a:	2401      	movs	r4, #1
 8000b8c:	0033      	movs	r3, r6
 8000b8e:	400c      	ands	r4, r1
 8000b90:	e706      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000b92:	2401      	movs	r4, #1
 8000b94:	1af7      	subs	r7, r6, r3
 8000b96:	400c      	ands	r4, r1
 8000b98:	e784      	b.n	8000aa4 <__aeabi_fsub+0x194>
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d104      	bne.n	8000ba8 <__aeabi_fsub+0x298>
 8000b9e:	0033      	movs	r3, r6
 8000ba0:	e6fe      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000ba2:	2501      	movs	r5, #1
 8000ba4:	1b9b      	subs	r3, r3, r6
 8000ba6:	e718      	b.n	80009da <__aeabi_fsub+0xca>
 8000ba8:	2e00      	cmp	r6, #0
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x29e>
 8000bac:	e6f8      	b.n	80009a0 <__aeabi_fsub+0x90>
 8000bae:	2280      	movs	r2, #128	@ 0x80
 8000bb0:	03d2      	lsls	r2, r2, #15
 8000bb2:	4297      	cmp	r7, r2
 8000bb4:	d304      	bcc.n	8000bc0 <__aeabi_fsub+0x2b0>
 8000bb6:	4594      	cmp	ip, r2
 8000bb8:	d202      	bcs.n	8000bc0 <__aeabi_fsub+0x2b0>
 8000bba:	2401      	movs	r4, #1
 8000bbc:	0033      	movs	r3, r6
 8000bbe:	400c      	ands	r4, r1
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	e6f1      	b.n	80009a8 <__aeabi_fsub+0x98>
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2520      	movs	r5, #32
 8000bc8:	40ca      	lsrs	r2, r1
 8000bca:	1a69      	subs	r1, r5, r1
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	1e59      	subs	r1, r3, #1
 8000bd0:	418b      	sbcs	r3, r1
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	0005      	movs	r5, r0
 8000bd6:	199b      	adds	r3, r3, r6
 8000bd8:	e750      	b.n	8000a7c <__aeabi_fsub+0x16c>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d094      	beq.n	8000b08 <__aeabi_fsub+0x1f8>
 8000bde:	2401      	movs	r4, #1
 8000be0:	0033      	movs	r3, r6
 8000be2:	400c      	ands	r4, r1
 8000be4:	e73a      	b.n	8000a5c <__aeabi_fsub+0x14c>
 8000be6:	000c      	movs	r4, r1
 8000be8:	2501      	movs	r5, #1
 8000bea:	1af3      	subs	r3, r6, r3
 8000bec:	e6f5      	b.n	80009da <__aeabi_fsub+0xca>
 8000bee:	0033      	movs	r3, r6
 8000bf0:	e734      	b.n	8000a5c <__aeabi_fsub+0x14c>
 8000bf2:	199b      	adds	r3, r3, r6
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	0159      	lsls	r1, r3, #5
 8000bf8:	d5c1      	bpl.n	8000b7e <__aeabi_fsub+0x26e>
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <__aeabi_fsub+0x340>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	2201      	movs	r2, #1
 8000c02:	e72d      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0x2fa>
 8000c08:	e77e      	b.n	8000b08 <__aeabi_fsub+0x1f8>
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	08db      	lsrs	r3, r3, #3
 8000c10:	e726      	b.n	8000a60 <__aeabi_fsub+0x150>
 8000c12:	2380      	movs	r3, #128	@ 0x80
 8000c14:	2400      	movs	r4, #0
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	03db      	lsls	r3, r3, #15
 8000c1a:	e6f1      	b.n	8000a00 <__aeabi_fsub+0xf0>
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fsub+0x312>
 8000c20:	e756      	b.n	8000ad0 <__aeabi_fsub+0x1c0>
 8000c22:	1b47      	subs	r7, r0, r5
 8000c24:	003a      	movs	r2, r7
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x31c>
 8000c2a:	e730      	b.n	8000a8e <__aeabi_fsub+0x17e>
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	04d2      	lsls	r2, r2, #19
 8000c30:	000c      	movs	r4, r1
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e77f      	b.n	8000b36 <__aeabi_fsub+0x226>
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x32c>
 8000c3a:	e701      	b.n	8000a40 <__aeabi_fsub+0x130>
 8000c3c:	1b41      	subs	r1, r0, r5
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d101      	bne.n	8000c46 <__aeabi_fsub+0x336>
 8000c42:	000a      	movs	r2, r1
 8000c44:	e788      	b.n	8000b58 <__aeabi_fsub+0x248>
 8000c46:	2280      	movs	r2, #128	@ 0x80
 8000c48:	04d2      	lsls	r2, r2, #19
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	e78b      	b.n	8000b66 <__aeabi_fsub+0x256>
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	fbffffff 	.word	0xfbffffff
 8000c54:	7dffffff 	.word	0x7dffffff

08000c58 <__aeabi_f2iz>:
 8000c58:	0241      	lsls	r1, r0, #9
 8000c5a:	0042      	lsls	r2, r0, #1
 8000c5c:	0fc3      	lsrs	r3, r0, #31
 8000c5e:	0a49      	lsrs	r1, r1, #9
 8000c60:	2000      	movs	r0, #0
 8000c62:	0e12      	lsrs	r2, r2, #24
 8000c64:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c66:	dd03      	ble.n	8000c70 <__aeabi_f2iz+0x18>
 8000c68:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c6a:	dd02      	ble.n	8000c72 <__aeabi_f2iz+0x1a>
 8000c6c:	4a09      	ldr	r2, [pc, #36]	@ (8000c94 <__aeabi_f2iz+0x3c>)
 8000c6e:	1898      	adds	r0, r3, r2
 8000c70:	4770      	bx	lr
 8000c72:	2080      	movs	r0, #128	@ 0x80
 8000c74:	0400      	lsls	r0, r0, #16
 8000c76:	4301      	orrs	r1, r0
 8000c78:	2a95      	cmp	r2, #149	@ 0x95
 8000c7a:	dc07      	bgt.n	8000c8c <__aeabi_f2iz+0x34>
 8000c7c:	2096      	movs	r0, #150	@ 0x96
 8000c7e:	1a82      	subs	r2, r0, r2
 8000c80:	40d1      	lsrs	r1, r2
 8000c82:	4248      	negs	r0, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1f3      	bne.n	8000c70 <__aeabi_f2iz+0x18>
 8000c88:	0008      	movs	r0, r1
 8000c8a:	e7f1      	b.n	8000c70 <__aeabi_f2iz+0x18>
 8000c8c:	3a96      	subs	r2, #150	@ 0x96
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	e7f7      	b.n	8000c82 <__aeabi_f2iz+0x2a>
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	7fffffff 	.word	0x7fffffff

08000c98 <__aeabi_i2f>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d013      	beq.n	8000cc6 <__aeabi_i2f+0x2e>
 8000c9e:	17c3      	asrs	r3, r0, #31
 8000ca0:	18c5      	adds	r5, r0, r3
 8000ca2:	405d      	eors	r5, r3
 8000ca4:	0fc4      	lsrs	r4, r0, #31
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	f000 f842 	bl	8000d30 <__clzsi2>
 8000cac:	239e      	movs	r3, #158	@ 0x9e
 8000cae:	0001      	movs	r1, r0
 8000cb0:	1a1b      	subs	r3, r3, r0
 8000cb2:	2b96      	cmp	r3, #150	@ 0x96
 8000cb4:	dc0f      	bgt.n	8000cd6 <__aeabi_i2f+0x3e>
 8000cb6:	2808      	cmp	r0, #8
 8000cb8:	d034      	beq.n	8000d24 <__aeabi_i2f+0x8c>
 8000cba:	3908      	subs	r1, #8
 8000cbc:	408d      	lsls	r5, r1
 8000cbe:	026d      	lsls	r5, r5, #9
 8000cc0:	0a6d      	lsrs	r5, r5, #9
 8000cc2:	b2d8      	uxtb	r0, r3
 8000cc4:	e002      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000cc6:	2400      	movs	r4, #0
 8000cc8:	2000      	movs	r0, #0
 8000cca:	2500      	movs	r5, #0
 8000ccc:	05c0      	lsls	r0, r0, #23
 8000cce:	4328      	orrs	r0, r5
 8000cd0:	07e4      	lsls	r4, r4, #31
 8000cd2:	4320      	orrs	r0, r4
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2b99      	cmp	r3, #153	@ 0x99
 8000cd8:	dc16      	bgt.n	8000d08 <__aeabi_i2f+0x70>
 8000cda:	1f42      	subs	r2, r0, #5
 8000cdc:	2805      	cmp	r0, #5
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_i2f+0x4a>
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	002a      	movs	r2, r5
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <__aeabi_i2f+0x94>)
 8000ce6:	4002      	ands	r2, r0
 8000ce8:	076e      	lsls	r6, r5, #29
 8000cea:	d009      	beq.n	8000d00 <__aeabi_i2f+0x68>
 8000cec:	260f      	movs	r6, #15
 8000cee:	4035      	ands	r5, r6
 8000cf0:	2d04      	cmp	r5, #4
 8000cf2:	d005      	beq.n	8000d00 <__aeabi_i2f+0x68>
 8000cf4:	3204      	adds	r2, #4
 8000cf6:	0155      	lsls	r5, r2, #5
 8000cf8:	d502      	bpl.n	8000d00 <__aeabi_i2f+0x68>
 8000cfa:	239f      	movs	r3, #159	@ 0x9f
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	1a5b      	subs	r3, r3, r1
 8000d00:	0192      	lsls	r2, r2, #6
 8000d02:	0a55      	lsrs	r5, r2, #9
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	e7e1      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d08:	2205      	movs	r2, #5
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	0028      	movs	r0, r5
 8000d0e:	40d0      	lsrs	r0, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	0008      	movs	r0, r1
 8000d14:	301b      	adds	r0, #27
 8000d16:	4085      	lsls	r5, r0
 8000d18:	0028      	movs	r0, r5
 8000d1a:	1e45      	subs	r5, r0, #1
 8000d1c:	41a8      	sbcs	r0, r5
 8000d1e:	4302      	orrs	r2, r0
 8000d20:	0015      	movs	r5, r2
 8000d22:	e7de      	b.n	8000ce2 <__aeabi_i2f+0x4a>
 8000d24:	026d      	lsls	r5, r5, #9
 8000d26:	2096      	movs	r0, #150	@ 0x96
 8000d28:	0a6d      	lsrs	r5, r5, #9
 8000d2a:	e7cf      	b.n	8000ccc <__aeabi_i2f+0x34>
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__clzsi2>:
 8000d30:	211c      	movs	r1, #28
 8000d32:	2301      	movs	r3, #1
 8000d34:	041b      	lsls	r3, r3, #16
 8000d36:	4298      	cmp	r0, r3
 8000d38:	d301      	bcc.n	8000d3e <__clzsi2+0xe>
 8000d3a:	0c00      	lsrs	r0, r0, #16
 8000d3c:	3910      	subs	r1, #16
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	4298      	cmp	r0, r3
 8000d42:	d301      	bcc.n	8000d48 <__clzsi2+0x18>
 8000d44:	0a00      	lsrs	r0, r0, #8
 8000d46:	3908      	subs	r1, #8
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d301      	bcc.n	8000d52 <__clzsi2+0x22>
 8000d4e:	0900      	lsrs	r0, r0, #4
 8000d50:	3904      	subs	r1, #4
 8000d52:	a202      	add	r2, pc, #8	@ (adr r2, 8000d5c <__clzsi2+0x2c>)
 8000d54:	5c10      	ldrb	r0, [r2, r0]
 8000d56:	1840      	adds	r0, r0, r1
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	02020304 	.word	0x02020304
 8000d60:	01010101 	.word	0x01010101
	...

08000d6c <__clzdi2>:
 8000d6c:	b510      	push	{r4, lr}
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d103      	bne.n	8000d7a <__clzdi2+0xe>
 8000d72:	f7ff ffdd 	bl	8000d30 <__clzsi2>
 8000d76:	3020      	adds	r0, #32
 8000d78:	e002      	b.n	8000d80 <__clzdi2+0x14>
 8000d7a:	0008      	movs	r0, r1
 8000d7c:	f7ff ffd8 	bl	8000d30 <__clzsi2>
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)

08000d84 <modify_bit>:

/*
 * Modify the bit in where the indice 0 is the left one
 */

uint8_t modify_bit(uint8_t x, uint8_t n, uint8_t value) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	0004      	movs	r4, r0
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1dfb      	adds	r3, r7, #7
 8000d92:	1c22      	adds	r2, r4, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	1c02      	adds	r2, r0, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
 8000d9c:	1d7b      	adds	r3, r7, #5
 8000d9e:	1c0a      	adds	r2, r1, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    return (value) ? (x | (0x80 >> n)) : (x & ~(0x80 >> n));
 8000da2:	1d7b      	adds	r3, r7, #5
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <modify_bit+0x40>
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2280      	movs	r2, #128	@ 0x80
 8000db0:	411a      	asrs	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	e00d      	b.n	8000de0 <modify_bit+0x5c>
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2280      	movs	r2, #128	@ 0x80
 8000dca:	411a      	asrs	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	1dfa      	adds	r2, r7, #7
 8000dd6:	7812      	ldrb	r2, [r2, #0]
 8000dd8:	b252      	sxtb	r2, r2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	b2db      	uxtb	r3, r3
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}

08000de8 <get_bit>:

/*
 * Get the bit in where the indice 0 is the left one
 */

uint8_t get_bit(uint8_t x,uint8_t n){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	1dfb      	adds	r3, r7, #7
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	1dbb      	adds	r3, r7, #6
 8000df6:	1c0a      	adds	r2, r1, #0
 8000df8:	701a      	strb	r2, [r3, #0]
	return (x >> (7-n)) & 1;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781a      	ldrb	r2, [r3, #0]
 8000dfe:	1dbb      	adds	r3, r7, #6
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2107      	movs	r1, #7
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	411a      	asrs	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <Set_pixel>:

void Set_pixel(uint8_t* Map,uint8_t x,uint16_t y, uint8_t set)
{
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	000c      	movs	r4, r1
 8000e24:	0010      	movs	r0, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	1cfb      	adds	r3, r7, #3
 8000e2a:	1c22      	adds	r2, r4, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	003b      	movs	r3, r7
 8000e30:	1c02      	adds	r2, r0, #0
 8000e32:	801a      	strh	r2, [r3, #0]
 8000e34:	1cbb      	adds	r3, r7, #2
 8000e36:	1c0a      	adds	r2, r1, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	uint16_t absolute_address;

	absolute_address = y + x*EPD_WIDTH;
 8000e3a:	1cfb      	adds	r3, r7, #3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	2258      	movs	r2, #88	@ 0x58
 8000e42:	4353      	muls	r3, r2
 8000e44:	b299      	uxth	r1, r3
 8000e46:	200e      	movs	r0, #14
 8000e48:	183b      	adds	r3, r7, r0
 8000e4a:	003a      	movs	r2, r7
 8000e4c:	8812      	ldrh	r2, [r2, #0]
 8000e4e:	188a      	adds	r2, r1, r2
 8000e50:	801a      	strh	r2, [r3, #0]

	Map[absolute_address/8]= modify_bit(Map[absolute_address/8],absolute_address%8,set);
 8000e52:	0001      	movs	r1, r0
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	189b      	adds	r3, r3, r2
 8000e62:	7818      	ldrb	r0, [r3, #0]
 8000e64:	000c      	movs	r4, r1
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b2d9      	uxtb	r1, r3
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	189c      	adds	r4, r3, r2
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	001a      	movs	r2, r3
 8000e86:	f7ff ff7d 	bl	8000d84 <modify_bit>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	7023      	strb	r3, [r4, #0]

}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b005      	add	sp, #20
 8000e94:	bd90      	pop	{r4, r7, pc}

08000e96 <countDigits>:

uint8_t countDigits(uint16_t num) {
 8000e96:	b590      	push	{r4, r7, lr}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	1dbb      	adds	r3, r7, #6
 8000ea0:	801a      	strh	r2, [r3, #0]
	uint8_t count = 0;
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	18fb      	adds	r3, r7, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

	if(num==0)
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d110      	bne.n	8000ed4 <countDigits+0x3e>
	{
		return 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e015      	b.n	8000ee2 <countDigits+0x4c>
	}

    while (num != 0) {
        num /= 10;
 8000eb6:	1dbc      	adds	r4, r7, #6
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	210a      	movs	r1, #10
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff f922 	bl	8000108 <__udivsi3>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	8023      	strh	r3, [r4, #0]
        count++;
 8000ec8:	210f      	movs	r1, #15
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
    while (num != 0) {
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1ec      	bne.n	8000eb6 <countDigits+0x20>
    }
    return count;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b005      	add	sp, #20
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <getDecimalDigits>:

void getDecimalDigits(uint16_t num, uint8_t * digits, uint16_t numDigits) {
 8000eea:	b5b0      	push	{r4, r5, r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	1dbb      	adds	r3, r7, #6
 8000ef6:	1c02      	adds	r2, r0, #0
 8000ef8:	801a      	strh	r2, [r3, #0]
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	1c0a      	adds	r2, r1, #0
 8000efe:	801a      	strh	r2, [r3, #0]
	int16_t i;
    for (i = numDigits - 1; i >= 0; i--) {
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	230e      	movs	r3, #14
 8000f0a:	18fb      	adds	r3, r7, r3
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	e020      	b.n	8000f52 <getDecimalDigits+0x68>
        digits[i] = num % 10;
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	210a      	movs	r1, #10
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff f97c 	bl	8000214 <__aeabi_uidivmod>
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	b299      	uxth	r1, r3
 8000f20:	250e      	movs	r5, #14
 8000f22:	197b      	adds	r3, r7, r5
 8000f24:	2200      	movs	r2, #0
 8000f26:	5e9b      	ldrsh	r3, [r3, r2]
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	18d3      	adds	r3, r2, r3
 8000f2c:	b2ca      	uxtb	r2, r1
 8000f2e:	701a      	strb	r2, [r3, #0]
        num /= 10;
 8000f30:	1dbc      	adds	r4, r7, #6
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	210a      	movs	r1, #10
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff f8e5 	bl	8000108 <__udivsi3>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	8023      	strh	r3, [r4, #0]
    for (i = numDigits - 1; i >= 0; i--) {
 8000f42:	197b      	adds	r3, r7, r5
 8000f44:	2200      	movs	r2, #0
 8000f46:	5e9b      	ldrsh	r3, [r3, r2]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	197b      	adds	r3, r7, r5
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	230e      	movs	r3, #14
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	5e9b      	ldrsh	r3, [r3, r2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	dad8      	bge.n	8000f10 <getDecimalDigits+0x26>
    }
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}

08000f68 <Write_num>:

/*
 * Draw a Number on an array from bottom left
 */
void Write_num(uint8_t* Map,uint8_t x,uint16_t y,sFONT font,uint8_t num)
{
 8000f68:	b082      	sub	sp, #8
 8000f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	0008      	movs	r0, r1
 8000f74:	0011      	movs	r1, r2
 8000f76:	2204      	movs	r2, #4
 8000f78:	2420      	movs	r4, #32
 8000f7a:	1912      	adds	r2, r2, r4
 8000f7c:	2508      	movs	r5, #8
 8000f7e:	46ac      	mov	ip, r5
 8000f80:	44bc      	add	ip, r7
 8000f82:	4462      	add	r2, ip
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	1cfb      	adds	r3, r7, #3
 8000f88:	1c02      	adds	r2, r0, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	003b      	movs	r3, r7
 8000f8e:	1c0a      	adds	r2, r1, #0
 8000f90:	801a      	strh	r2, [r3, #0]
	uint8_t round_width;

	round_width = font.Width/8 + (font.Width%8>0);
 8000f92:	2304      	movs	r3, #4
 8000f94:	0020      	movs	r0, r4
 8000f96:	181b      	adds	r3, r3, r0
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4694      	mov	ip, r2
 8000f9c:	44bc      	add	ip, r7
 8000f9e:	4463      	add	r3, ip
 8000fa0:	889b      	ldrh	r3, [r3, #4]
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	2304      	movs	r3, #4
 8000faa:	181b      	adds	r3, r3, r0
 8000fac:	2108      	movs	r1, #8
 8000fae:	468c      	mov	ip, r1
 8000fb0:	44bc      	add	ip, r7
 8000fb2:	4463      	add	r3, ip
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	400b      	ands	r3, r1
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	1e59      	subs	r1, r3, #1
 8000fbe:	418b      	sbcs	r3, r1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	240d      	movs	r4, #13
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	1852      	adds	r2, r2, r1
 8000fca:	701a      	strb	r2, [r3, #0]

	uint16_t start_adress;

	start_adress = num*round_width*font.Height;
 8000fcc:	232c      	movs	r3, #44	@ 0x2c
 8000fce:	2208      	movs	r2, #8
 8000fd0:	189b      	adds	r3, r3, r2
 8000fd2:	19db      	adds	r3, r3, r7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	193a      	adds	r2, r7, r4
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	4353      	muls	r3, r2
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	181b      	adds	r3, r3, r0
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	468c      	mov	ip, r1
 8000fea:	44bc      	add	ip, r7
 8000fec:	4463      	add	r3, ip
 8000fee:	88d9      	ldrh	r1, [r3, #6]
 8000ff0:	230a      	movs	r3, #10
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	434a      	muls	r2, r1
 8000ff6:	801a      	strh	r2, [r3, #0]

	uint8_t i;
	uint8_t j;

	for(i=0;i<font.Width;i++)
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e05f      	b.n	80010c2 <Write_num+0x15a>
	{

		for(j=0;j<font.Height;j++)
 8001002:	230e      	movs	r3, #14
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	e046      	b.n	800109a <Write_num+0x132>
		{
			Set_pixel(Map,x-i,y-font.Height+j,get_bit(font.table[start_adress+i/8+j*round_width],i%8));
 800100c:	1cfa      	adds	r2, r7, #3
 800100e:	210f      	movs	r1, #15
 8001010:	187b      	adds	r3, r7, r1
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b2dc      	uxtb	r4, r3
 800101a:	2304      	movs	r3, #4
 800101c:	2620      	movs	r6, #32
 800101e:	199b      	adds	r3, r3, r6
 8001020:	2208      	movs	r2, #8
 8001022:	4694      	mov	ip, r2
 8001024:	44bc      	add	ip, r7
 8001026:	4463      	add	r3, ip
 8001028:	88db      	ldrh	r3, [r3, #6]
 800102a:	003a      	movs	r2, r7
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	200e      	movs	r0, #14
 8001034:	183b      	adds	r3, r7, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	b29d      	uxth	r5, r3
 800103e:	2304      	movs	r3, #4
 8001040:	199b      	adds	r3, r3, r6
 8001042:	2208      	movs	r2, #8
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	220a      	movs	r2, #10
 800104e:	18ba      	adds	r2, r7, r2
 8001050:	8812      	ldrh	r2, [r2, #0]
 8001052:	1879      	adds	r1, r7, r1
 8001054:	7809      	ldrb	r1, [r1, #0]
 8001056:	08c9      	lsrs	r1, r1, #3
 8001058:	b2c9      	uxtb	r1, r1
 800105a:	1851      	adds	r1, r2, r1
 800105c:	0006      	movs	r6, r0
 800105e:	183a      	adds	r2, r7, r0
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	200d      	movs	r0, #13
 8001064:	1838      	adds	r0, r7, r0
 8001066:	7800      	ldrb	r0, [r0, #0]
 8001068:	4342      	muls	r2, r0
 800106a:	188a      	adds	r2, r1, r2
 800106c:	189b      	adds	r3, r3, r2
 800106e:	781a      	ldrb	r2, [r3, #0]
 8001070:	210f      	movs	r1, #15
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2107      	movs	r1, #7
 8001078:	400b      	ands	r3, r1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	0019      	movs	r1, r3
 800107e:	0010      	movs	r0, r2
 8001080:	f7ff feb2 	bl	8000de8 <get_bit>
 8001084:	0003      	movs	r3, r0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	002a      	movs	r2, r5
 800108a:	0021      	movs	r1, r4
 800108c:	f7ff fec5 	bl	8000e1a <Set_pixel>
		for(j=0;j<font.Height;j++)
 8001090:	19bb      	adds	r3, r7, r6
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	19bb      	adds	r3, r7, r6
 8001096:	3201      	adds	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	230e      	movs	r3, #14
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	2304      	movs	r3, #4
 80010a4:	2120      	movs	r1, #32
 80010a6:	185b      	adds	r3, r3, r1
 80010a8:	2108      	movs	r1, #8
 80010aa:	468c      	mov	ip, r1
 80010ac:	44bc      	add	ip, r7
 80010ae:	4463      	add	r3, ip
 80010b0:	88db      	ldrh	r3, [r3, #6]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3aa      	bcc.n	800100c <Write_num+0xa4>
	for(i=0;i<font.Width;i++)
 80010b6:	210f      	movs	r1, #15
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	3201      	adds	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	230f      	movs	r3, #15
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2304      	movs	r3, #4
 80010cc:	2120      	movs	r1, #32
 80010ce:	185b      	adds	r3, r3, r1
 80010d0:	2108      	movs	r1, #8
 80010d2:	468c      	mov	ip, r1
 80010d4:	44bc      	add	ip, r7
 80010d6:	4463      	add	r3, ip
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d391      	bcc.n	8001002 <Write_num+0x9a>
			//Set_pixel(Map,x-i,y-font.Height+j,(i+j)%2);
		}

	}
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b005      	add	sp, #20
 80010e6:	bcf0      	pop	{r4, r5, r6, r7}
 80010e8:	bc08      	pop	{r3}
 80010ea:	b002      	add	sp, #8
 80010ec:	4718      	bx	r3

080010ee <Zone_Write_nums>:

#define LETTER_UPPER_CACHE 1

Text_Z Zone_Write_nums(uint8_t x,uint16_t y,sFONT font,uint16_t num,uint8_t v_al,uint8_t h_al,uint8_t max_size)
{
 80010ee:	b082      	sub	sp, #8
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08d      	sub	sp, #52	@ 0x34
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	0008      	movs	r0, r1
 80010fa:	0011      	movs	r1, r2
 80010fc:	2204      	movs	r2, #4
 80010fe:	2440      	movs	r4, #64	@ 0x40
 8001100:	1912      	adds	r2, r2, r4
 8001102:	2408      	movs	r4, #8
 8001104:	46a4      	mov	ip, r4
 8001106:	44bc      	add	ip, r7
 8001108:	4462      	add	r2, ip
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	1cfb      	adds	r3, r7, #3
 800110e:	1c02      	adds	r2, r0, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	003b      	movs	r3, r7
 8001114:	1c0a      	adds	r2, r1, #0
 8001116:	801a      	strh	r2, [r3, #0]

	Text_Z res;

	res.num_digit = countDigits(num);
 8001118:	234c      	movs	r3, #76	@ 0x4c
 800111a:	2408      	movs	r4, #8
 800111c:	191b      	adds	r3, r3, r4
 800111e:	19db      	adds	r3, r3, r7
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff feb7 	bl	8000e96 <countDigits>
 8001128:	0003      	movs	r3, r0
 800112a:	001a      	movs	r2, r3
 800112c:	230c      	movs	r3, #12
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	769a      	strb	r2, [r3, #26]

	uint16_t max_y;

	switch(v_al){
 8001132:	2350      	movs	r3, #80	@ 0x50
 8001134:	191b      	adds	r3, r3, r4
 8001136:	19db      	adds	r3, r3, r7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d025      	beq.n	800118a <Zone_Write_nums+0x9c>
 800113e:	dc2a      	bgt.n	8001196 <Zone_Write_nums+0xa8>
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <Zone_Write_nums+0x5c>
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00f      	beq.n	8001168 <Zone_Write_nums+0x7a>
 8001148:	e025      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 0: // up
		max_y=y-font.Height;
 800114a:	2304      	movs	r3, #4
 800114c:	2240      	movs	r2, #64	@ 0x40
 800114e:	189b      	adds	r3, r3, r2
 8001150:	2208      	movs	r2, #8
 8001152:	4694      	mov	ip, r2
 8001154:	44bc      	add	ip, r7
 8001156:	4463      	add	r3, ip
 8001158:	88da      	ldrh	r2, [r3, #6]
 800115a:	232e      	movs	r3, #46	@ 0x2e
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	0039      	movs	r1, r7
 8001160:	8809      	ldrh	r1, [r1, #0]
 8001162:	1a8a      	subs	r2, r1, r2
 8001164:	801a      	strh	r2, [r3, #0]
		break;
 8001166:	e016      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 1: // center
		max_y=y-font.Height/2;
 8001168:	2304      	movs	r3, #4
 800116a:	2240      	movs	r2, #64	@ 0x40
 800116c:	189b      	adds	r3, r3, r2
 800116e:	2208      	movs	r2, #8
 8001170:	4694      	mov	ip, r2
 8001172:	44bc      	add	ip, r7
 8001174:	4463      	add	r3, ip
 8001176:	88db      	ldrh	r3, [r3, #6]
 8001178:	085b      	lsrs	r3, r3, #1
 800117a:	b29a      	uxth	r2, r3
 800117c:	232e      	movs	r3, #46	@ 0x2e
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	0039      	movs	r1, r7
 8001182:	8809      	ldrh	r1, [r1, #0]
 8001184:	1a8a      	subs	r2, r1, r2
 8001186:	801a      	strh	r2, [r3, #0]
		break;
 8001188:	e005      	b.n	8001196 <Zone_Write_nums+0xa8>
	case 2: // down
		max_y=y;
 800118a:	232e      	movs	r3, #46	@ 0x2e
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	003a      	movs	r2, r7
 8001190:	8812      	ldrh	r2, [r2, #0]
 8001192:	801a      	strh	r2, [r3, #0]
		break;
 8001194:	46c0      	nop			@ (mov r8, r8)
	}

	uint8_t max_x_th;
	uint8_t max_x;
	switch(h_al){
 8001196:	2354      	movs	r3, #84	@ 0x54
 8001198:	2208      	movs	r2, #8
 800119a:	189b      	adds	r3, r3, r2
 800119c:	19db      	adds	r3, r3, r7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d052      	beq.n	800124a <Zone_Write_nums+0x15c>
 80011a4:	dc6d      	bgt.n	8001282 <Zone_Write_nums+0x194>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <Zone_Write_nums+0xc2>
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d01a      	beq.n	80011e4 <Zone_Write_nums+0xf6>
 80011ae:	e068      	b.n	8001282 <Zone_Write_nums+0x194>
	case 0: // left
		max_x=x+(res.num_digit)*font.Width;
 80011b0:	230c      	movs	r3, #12
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	7e9b      	ldrb	r3, [r3, #26]
 80011b6:	2204      	movs	r2, #4
 80011b8:	2140      	movs	r1, #64	@ 0x40
 80011ba:	1852      	adds	r2, r2, r1
 80011bc:	2108      	movs	r1, #8
 80011be:	468c      	mov	ip, r1
 80011c0:	44bc      	add	ip, r7
 80011c2:	4462      	add	r2, ip
 80011c4:	8892      	ldrh	r2, [r2, #4]
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4353      	muls	r3, r2
 80011ca:	b2d9      	uxtb	r1, r3
 80011cc:	232c      	movs	r3, #44	@ 0x2c
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	1cfa      	adds	r2, r7, #3
 80011d2:	7812      	ldrb	r2, [r2, #0]
 80011d4:	188a      	adds	r2, r1, r2
 80011d6:	701a      	strb	r2, [r3, #0]
		max_x_th = x;
 80011d8:	232d      	movs	r3, #45	@ 0x2d
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	1cfa      	adds	r2, r7, #3
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
		break;
 80011e2:	e04e      	b.n	8001282 <Zone_Write_nums+0x194>
	case 1: // center
		max_x=x+(res.num_digit*font.Width)/2;
 80011e4:	230c      	movs	r3, #12
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	7e9b      	ldrb	r3, [r3, #26]
 80011ea:	001a      	movs	r2, r3
 80011ec:	2304      	movs	r3, #4
 80011ee:	2140      	movs	r1, #64	@ 0x40
 80011f0:	185b      	adds	r3, r3, r1
 80011f2:	2108      	movs	r1, #8
 80011f4:	468c      	mov	ip, r1
 80011f6:	44bc      	add	ip, r7
 80011f8:	4463      	add	r3, ip
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	4353      	muls	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da00      	bge.n	8001204 <Zone_Write_nums+0x116>
 8001202:	3301      	adds	r3, #1
 8001204:	105b      	asrs	r3, r3, #1
 8001206:	b2d9      	uxtb	r1, r3
 8001208:	232c      	movs	r3, #44	@ 0x2c
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	1cfa      	adds	r2, r7, #3
 800120e:	7812      	ldrb	r2, [r2, #0]
 8001210:	188a      	adds	r2, r1, r2
 8001212:	701a      	strb	r2, [r3, #0]
		max_x_th=x-(max_size*font.Width)/2;
 8001214:	2358      	movs	r3, #88	@ 0x58
 8001216:	2208      	movs	r2, #8
 8001218:	189b      	adds	r3, r3, r2
 800121a:	19db      	adds	r3, r3, r7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2204      	movs	r2, #4
 8001220:	2140      	movs	r1, #64	@ 0x40
 8001222:	1852      	adds	r2, r2, r1
 8001224:	2108      	movs	r1, #8
 8001226:	468c      	mov	ip, r1
 8001228:	44bc      	add	ip, r7
 800122a:	4462      	add	r2, ip
 800122c:	8892      	ldrh	r2, [r2, #4]
 800122e:	4353      	muls	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	da00      	bge.n	8001236 <Zone_Write_nums+0x148>
 8001234:	3301      	adds	r3, #1
 8001236:	105b      	asrs	r3, r3, #1
 8001238:	425b      	negs	r3, r3
 800123a:	b2d9      	uxtb	r1, r3
 800123c:	232d      	movs	r3, #45	@ 0x2d
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	1cfa      	adds	r2, r7, #3
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	188a      	adds	r2, r1, r2
 8001246:	701a      	strb	r2, [r3, #0]
		break;
 8001248:	e01b      	b.n	8001282 <Zone_Write_nums+0x194>
	case 2: // right
		max_x=x;
 800124a:	232c      	movs	r3, #44	@ 0x2c
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	1cfa      	adds	r2, r7, #3
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	701a      	strb	r2, [r3, #0]
		max_x_th=x-max_size*font.Width;
 8001254:	2304      	movs	r3, #4
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	189b      	adds	r3, r3, r2
 800125a:	2208      	movs	r2, #8
 800125c:	4694      	mov	ip, r2
 800125e:	44bc      	add	ip, r7
 8001260:	4463      	add	r3, ip
 8001262:	889b      	ldrh	r3, [r3, #4]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2258      	movs	r2, #88	@ 0x58
 8001268:	2108      	movs	r1, #8
 800126a:	1852      	adds	r2, r2, r1
 800126c:	19d2      	adds	r2, r2, r7
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4353      	muls	r3, r2
 8001272:	b2da      	uxtb	r2, r3
 8001274:	232d      	movs	r3, #45	@ 0x2d
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	1cf9      	adds	r1, r7, #3
 800127a:	7809      	ldrb	r1, [r1, #0]
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	701a      	strb	r2, [r3, #0]
		break;
 8001280:	46c0      	nop			@ (mov r8, r8)
	}

	res.y = max_y+font.Height;
 8001282:	2304      	movs	r3, #4
 8001284:	2540      	movs	r5, #64	@ 0x40
 8001286:	195b      	adds	r3, r3, r5
 8001288:	2208      	movs	r2, #8
 800128a:	4694      	mov	ip, r2
 800128c:	44bc      	add	ip, r7
 800128e:	4463      	add	r3, ip
 8001290:	88da      	ldrh	r2, [r3, #6]
 8001292:	202e      	movs	r0, #46	@ 0x2e
 8001294:	183b      	adds	r3, r7, r0
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	210c      	movs	r1, #12
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	805a      	strh	r2, [r3, #2]
	res.max_y=max_y-max_y%8;
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	2207      	movs	r2, #7
 80012a8:	4393      	bics	r3, r2
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	80da      	strh	r2, [r3, #6]
	res.line=max_y%8 + font.Height;
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	2207      	movs	r2, #7
 80012b6:	4013      	ands	r3, r2
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	2304      	movs	r3, #4
 80012bc:	195b      	adds	r3, r3, r5
 80012be:	2008      	movs	r0, #8
 80012c0:	4684      	mov	ip, r0
 80012c2:	44bc      	add	ip, r7
 80012c4:	4463      	add	r3, ip
 80012c6:	88db      	ldrh	r3, [r3, #6]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	000c      	movs	r4, r1
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	819a      	strh	r2, [r3, #12]
	res.line+=  (8-res.line%8)*(res.line%8!=0);
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	899a      	ldrh	r2, [r3, #12]
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	0019      	movs	r1, r3
 80012dc:	2307      	movs	r3, #7
 80012de:	400b      	ands	r3, r1
 80012e0:	2108      	movs	r1, #8
 80012e2:	1acb      	subs	r3, r1, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	1939      	adds	r1, r7, r4
 80012e8:	8989      	ldrh	r1, [r1, #12]
 80012ea:	2007      	movs	r0, #7
 80012ec:	4001      	ands	r1, r0
 80012ee:	b289      	uxth	r1, r1
 80012f0:	1e48      	subs	r0, r1, #1
 80012f2:	4181      	sbcs	r1, r0
 80012f4:	b2c9      	uxtb	r1, r1
 80012f6:	b289      	uxth	r1, r1
 80012f8:	434b      	muls	r3, r1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	b29a      	uxth	r2, r3
 8001300:	0021      	movs	r1, r4
 8001302:	187b      	adds	r3, r7, r1
 8001304:	819a      	strh	r2, [r3, #12]

	res.x = max_x;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	222c      	movs	r2, #44	@ 0x2c
 800130a:	18ba      	adds	r2, r7, r2
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	701a      	strb	r2, [r3, #0]
	res.max_x=max_x_th;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	222d      	movs	r2, #45	@ 0x2d
 8001314:	18ba      	adds	r2, r7, r2
 8001316:	7812      	ldrb	r2, [r2, #0]
 8001318:	711a      	strb	r2, [r3, #4]
	res.column= max_size*font.Width;
 800131a:	2658      	movs	r6, #88	@ 0x58
 800131c:	2308      	movs	r3, #8
 800131e:	18f2      	adds	r2, r6, r3
 8001320:	19d3      	adds	r3, r2, r7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	2204      	movs	r2, #4
 8001328:	1952      	adds	r2, r2, r5
 800132a:	2008      	movs	r0, #8
 800132c:	4684      	mov	ip, r0
 800132e:	44bc      	add	ip, r7
 8001330:	4462      	add	r2, ip
 8001332:	8892      	ldrh	r2, [r2, #4]
 8001334:	4353      	muls	r3, r2
 8001336:	b29a      	uxth	r2, r3
 8001338:	187b      	adds	r3, r7, r1
 800133a:	815a      	strh	r2, [r3, #10]

	res.font=font;
 800133c:	000c      	movs	r4, r1
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2204      	movs	r2, #4
 8001342:	1952      	adds	r2, r2, r5
 8001344:	2008      	movs	r0, #8
 8001346:	4684      	mov	ip, r0
 8001348:	44bc      	add	ip, r7
 800134a:	4462      	add	r2, ip
 800134c:	3310      	adds	r3, #16
 800134e:	ca03      	ldmia	r2!, {r0, r1}
 8001350:	c303      	stmia	r3!, {r0, r1}

	res.num=num;
 8001352:	193b      	adds	r3, r7, r4
 8001354:	224c      	movs	r2, #76	@ 0x4c
 8001356:	2108      	movs	r1, #8
 8001358:	1852      	adds	r2, r2, r1
 800135a:	19d2      	adds	r2, r2, r7
 800135c:	8812      	ldrh	r2, [r2, #0]
 800135e:	831a      	strh	r2, [r3, #24]

	res.max_digit=max_size;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	1872      	adds	r2, r6, r1
 8001364:	19d2      	adds	r2, r2, r7
 8001366:	7812      	ldrb	r2, [r2, #0]
 8001368:	721a      	strb	r2, [r3, #8]

	res.area_draw=res.column*res.line/8;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	895b      	ldrh	r3, [r3, #10]
 800136e:	001a      	movs	r2, r3
 8001370:	193b      	adds	r3, r7, r4
 8001372:	899b      	ldrh	r3, [r3, #12]
 8001374:	4353      	muls	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	da00      	bge.n	800137c <Zone_Write_nums+0x28e>
 800137a:	3307      	adds	r3, #7
 800137c:	10db      	asrs	r3, r3, #3
 800137e:	b29a      	uxth	r2, r3
 8001380:	210c      	movs	r1, #12
 8001382:	187b      	adds	r3, r7, r1
 8001384:	839a      	strh	r2, [r3, #28]

	res.absolute_address = (res.max_x*EPD_WIDTH+res.max_y)/8;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	791b      	ldrb	r3, [r3, #4]
 800138a:	001a      	movs	r2, r3
 800138c:	2358      	movs	r3, #88	@ 0x58
 800138e:	4353      	muls	r3, r2
 8001390:	187a      	adds	r2, r7, r1
 8001392:	88d2      	ldrh	r2, [r2, #6]
 8001394:	189b      	adds	r3, r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	da00      	bge.n	800139c <Zone_Write_nums+0x2ae>
 800139a:	3307      	adds	r3, #7
 800139c:	10db      	asrs	r3, r3, #3
 800139e:	b29a      	uxth	r2, r3
 80013a0:	210c      	movs	r1, #12
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	83da      	strh	r2, [r3, #30]

	return res;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	187a      	adds	r2, r7, r1
 80013aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013ac:	c313      	stmia	r3!, {r0, r1, r4}
 80013ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80013b0:	c313      	stmia	r3!, {r0, r1, r4}
 80013b2:	ca03      	ldmia	r2!, {r0, r1}
 80013b4:	c303      	stmia	r3!, {r0, r1}
}
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b00d      	add	sp, #52	@ 0x34
 80013bc:	bcf0      	pop	{r4, r5, r6, r7}
 80013be:	bc08      	pop	{r3}
 80013c0:	b002      	add	sp, #8
 80013c2:	4718      	bx	r3

080013c4 <Save_data>:

/*
 * Save data inside the draw zone of a text into an array save
 */
void Save_data(uint8_t * save,Text_Z text,uint8_t * Map)
{
 80013c4:	b084      	sub	sp, #16
 80013c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	2004      	movs	r0, #4
 80013d0:	2420      	movs	r4, #32
 80013d2:	1900      	adds	r0, r0, r4
 80013d4:	2408      	movs	r4, #8
 80013d6:	46a4      	mov	ip, r4
 80013d8:	44bc      	add	ip, r7
 80013da:	4460      	add	r0, ip
 80013dc:	6001      	str	r1, [r0, #0]
 80013de:	6042      	str	r2, [r0, #4]
 80013e0:	6083      	str	r3, [r0, #8]

	uint16_t i;
	for(i=0;i<text.area_draw;i++){
 80013e2:	230e      	movs	r3, #14
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	e041      	b.n	8001470 <Save_data+0xac>
		save[i]=Map[text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8];
 80013ec:	2304      	movs	r3, #4
 80013ee:	2620      	movs	r6, #32
 80013f0:	199b      	adds	r3, r3, r6
 80013f2:	2208      	movs	r2, #8
 80013f4:	4694      	mov	ip, r2
 80013f6:	44bc      	add	ip, r7
 80013f8:	4463      	add	r3, ip
 80013fa:	8bdb      	ldrh	r3, [r3, #30]
 80013fc:	001c      	movs	r4, r3
 80013fe:	2304      	movs	r3, #4
 8001400:	199b      	adds	r3, r3, r6
 8001402:	2208      	movs	r2, #8
 8001404:	4694      	mov	ip, r2
 8001406:	44bc      	add	ip, r7
 8001408:	4463      	add	r3, ip
 800140a:	899b      	ldrh	r3, [r3, #12]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	b29a      	uxth	r2, r3
 8001410:	250e      	movs	r5, #14
 8001412:	197b      	adds	r3, r7, r5
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f7fe fefb 	bl	8000214 <__aeabi_uidivmod>
 800141e:	000b      	movs	r3, r1
 8001420:	b29b      	uxth	r3, r3
 8001422:	18e4      	adds	r4, r4, r3
 8001424:	2304      	movs	r3, #4
 8001426:	199b      	adds	r3, r3, r6
 8001428:	2208      	movs	r2, #8
 800142a:	4694      	mov	ip, r2
 800142c:	44bc      	add	ip, r7
 800142e:	4463      	add	r3, ip
 8001430:	899b      	ldrh	r3, [r3, #12]
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	b29a      	uxth	r2, r3
 8001436:	197b      	adds	r3, r7, r5
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe fe63 	bl	8000108 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	b29b      	uxth	r3, r3
 8001446:	001a      	movs	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	189b      	adds	r3, r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	189b      	adds	r3, r3, r2
 8001452:	18e3      	adds	r3, r4, r3
 8001454:	001a      	movs	r2, r3
 8001456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001458:	189a      	adds	r2, r3, r2
 800145a:	197b      	adds	r3, r7, r5
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	18cb      	adds	r3, r1, r3
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	701a      	strb	r2, [r3, #0]
	for(i=0;i<text.area_draw;i++){
 8001466:	197b      	adds	r3, r7, r5
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	197b      	adds	r3, r7, r5
 800146c:	3201      	adds	r2, #1
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	2304      	movs	r3, #4
 8001472:	2220      	movs	r2, #32
 8001474:	189b      	adds	r3, r3, r2
 8001476:	2208      	movs	r2, #8
 8001478:	4694      	mov	ip, r2
 800147a:	44bc      	add	ip, r7
 800147c:	4463      	add	r3, ip
 800147e:	8b9b      	ldrh	r3, [r3, #28]
 8001480:	220e      	movs	r2, #14
 8001482:	18ba      	adds	r2, r7, r2
 8001484:	8812      	ldrh	r2, [r2, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b0      	bcc.n	80013ec <Save_data+0x28>
	}
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b005      	add	sp, #20
 8001492:	bcf0      	pop	{r4, r5, r6, r7}
 8001494:	bc08      	pop	{r3}
 8001496:	b004      	add	sp, #16
 8001498:	4718      	bx	r3

0800149a <Wipe_TextZone>:

/*
 * Wipe the text zone
 */
void Wipe_TextZone(uint8_t * Map,Text_Z text,uint8_t * Background){
 800149a:	b084      	sub	sp, #16
 800149c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	2004      	movs	r0, #4
 80014a6:	2420      	movs	r4, #32
 80014a8:	1900      	adds	r0, r0, r4
 80014aa:	2408      	movs	r4, #8
 80014ac:	46a4      	mov	ip, r4
 80014ae:	44bc      	add	ip, r7
 80014b0:	4460      	add	r0, ip
 80014b2:	6001      	str	r1, [r0, #0]
 80014b4:	6042      	str	r2, [r0, #4]
 80014b6:	6083      	str	r3, [r0, #8]
	uint16_t i;
	for(i=0;i<text.area_draw;i++){
 80014b8:	230e      	movs	r3, #14
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
 80014c0:	e045      	b.n	800154e <Wipe_TextZone+0xb4>
		uint16_t address = text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8;
 80014c2:	2304      	movs	r3, #4
 80014c4:	2620      	movs	r6, #32
 80014c6:	199b      	adds	r3, r3, r6
 80014c8:	2208      	movs	r2, #8
 80014ca:	4694      	mov	ip, r2
 80014cc:	44bc      	add	ip, r7
 80014ce:	4463      	add	r3, ip
 80014d0:	8bdc      	ldrh	r4, [r3, #30]
 80014d2:	2304      	movs	r3, #4
 80014d4:	199b      	adds	r3, r3, r6
 80014d6:	2208      	movs	r2, #8
 80014d8:	4694      	mov	ip, r2
 80014da:	44bc      	add	ip, r7
 80014dc:	4463      	add	r3, ip
 80014de:	899b      	ldrh	r3, [r3, #12]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	250e      	movs	r5, #14
 80014e6:	197b      	adds	r3, r7, r5
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe91 	bl	8000214 <__aeabi_uidivmod>
 80014f2:	000b      	movs	r3, r1
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	18e3      	adds	r3, r4, r3
 80014f8:	b29c      	uxth	r4, r3
 80014fa:	2304      	movs	r3, #4
 80014fc:	199b      	adds	r3, r3, r6
 80014fe:	2208      	movs	r2, #8
 8001500:	4694      	mov	ip, r2
 8001502:	44bc      	add	ip, r7
 8001504:	4463      	add	r3, ip
 8001506:	899b      	ldrh	r3, [r3, #12]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	b29a      	uxth	r2, r3
 800150c:	197b      	adds	r3, r7, r5
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f7fe fdf8 	bl	8000108 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	b29b      	uxth	r3, r3
 800151c:	1c1a      	adds	r2, r3, #0
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	18d2      	adds	r2, r2, r3
 8001522:	1892      	adds	r2, r2, r2
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	b29a      	uxth	r2, r3
 8001528:	210c      	movs	r1, #12
 800152a:	187b      	adds	r3, r7, r1
 800152c:	18a2      	adds	r2, r4, r2
 800152e:	801a      	strh	r2, [r3, #0]
		Map[address]=Background[address];
 8001530:	187b      	adds	r3, r7, r1
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001536:	18d2      	adds	r2, r2, r3
 8001538:	187b      	adds	r3, r7, r1
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	18cb      	adds	r3, r1, r3
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	701a      	strb	r2, [r3, #0]
	for(i=0;i<text.area_draw;i++){
 8001544:	197b      	adds	r3, r7, r5
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	197b      	adds	r3, r7, r5
 800154a:	3201      	adds	r2, #1
 800154c:	801a      	strh	r2, [r3, #0]
 800154e:	2304      	movs	r3, #4
 8001550:	2220      	movs	r2, #32
 8001552:	189b      	adds	r3, r3, r2
 8001554:	2208      	movs	r2, #8
 8001556:	4694      	mov	ip, r2
 8001558:	44bc      	add	ip, r7
 800155a:	4463      	add	r3, ip
 800155c:	8b9b      	ldrh	r3, [r3, #28]
 800155e:	220e      	movs	r2, #14
 8001560:	18ba      	adds	r2, r7, r2
 8001562:	8812      	ldrh	r2, [r2, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d3ac      	bcc.n	80014c2 <Wipe_TextZone+0x28>
	}
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b005      	add	sp, #20
 8001570:	bcf0      	pop	{r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	b004      	add	sp, #16
 8001576:	4718      	bx	r3

08001578 <Write_nums>:
/*
 * Write the different number of the Text_Z element from bottom left
 */

void Write_nums(uint8_t* Map,Text_Z text)
{
 8001578:	b084      	sub	sp, #16
 800157a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157c:	46c6      	mov	lr, r8
 800157e:	b500      	push	{lr}
 8001580:	b08e      	sub	sp, #56	@ 0x38
 8001582:	af02      	add	r7, sp, #8
 8001584:	61f8      	str	r0, [r7, #28]
 8001586:	2004      	movs	r0, #4
 8001588:	2630      	movs	r6, #48	@ 0x30
 800158a:	1980      	adds	r0, r0, r6
 800158c:	61b8      	str	r0, [r7, #24]
 800158e:	2018      	movs	r0, #24
 8001590:	4684      	mov	ip, r0
 8001592:	44bc      	add	ip, r7
 8001594:	69b8      	ldr	r0, [r7, #24]
 8001596:	4460      	add	r0, ip
 8001598:	6001      	str	r1, [r0, #0]
 800159a:	6042      	str	r2, [r0, #4]
 800159c:	6083      	str	r3, [r0, #8]
 800159e:	466b      	mov	r3, sp
 80015a0:	4698      	mov	r8, r3

    uint8_t digits[text.num_digit]; // Array to store digits
 80015a2:	2304      	movs	r3, #4
 80015a4:	0032      	movs	r2, r6
 80015a6:	189b      	adds	r3, r3, r2
 80015a8:	2218      	movs	r2, #24
 80015aa:	4694      	mov	ip, r2
 80015ac:	44bc      	add	ip, r7
 80015ae:	4463      	add	r3, ip
 80015b0:	7e9b      	ldrb	r3, [r3, #26]
 80015b2:	001a      	movs	r2, r3
 80015b4:	3a01      	subs	r2, #1
 80015b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	2200      	movs	r2, #0
 80015bc:	60fa      	str	r2, [r7, #12]
 80015be:	68b8      	ldr	r0, [r7, #8]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	0006      	movs	r6, r0
 80015c4:	0f72      	lsrs	r2, r6, #29
 80015c6:	000e      	movs	r6, r1
 80015c8:	00f6      	lsls	r6, r6, #3
 80015ca:	617e      	str	r6, [r7, #20]
 80015cc:	697e      	ldr	r6, [r7, #20]
 80015ce:	4316      	orrs	r6, r2
 80015d0:	617e      	str	r6, [r7, #20]
 80015d2:	0001      	movs	r1, r0
 80015d4:	00c9      	lsls	r1, r1, #3
 80015d6:	6139      	str	r1, [r7, #16]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	0006      	movs	r6, r0
 80015e4:	0f72      	lsrs	r2, r6, #29
 80015e6:	000e      	movs	r6, r1
 80015e8:	00f5      	lsls	r5, r6, #3
 80015ea:	4315      	orrs	r5, r2
 80015ec:	0001      	movs	r1, r0
 80015ee:	00cc      	lsls	r4, r1, #3
 80015f0:	3307      	adds	r3, #7
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4669      	mov	r1, sp
 80015f8:	1acb      	subs	r3, r1, r3
 80015fa:	469d      	mov	sp, r3
 80015fc:	ab02      	add	r3, sp, #8
 80015fe:	3300      	adds	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24

    getDecimalDigits(text.num, digits, text.num_digit); // Store digits in the array
 8001602:	2304      	movs	r3, #4
 8001604:	2230      	movs	r2, #48	@ 0x30
 8001606:	189b      	adds	r3, r3, r2
 8001608:	2118      	movs	r1, #24
 800160a:	468c      	mov	ip, r1
 800160c:	44bc      	add	ip, r7
 800160e:	4463      	add	r3, ip
 8001610:	8b18      	ldrh	r0, [r3, #24]
 8001612:	2304      	movs	r3, #4
 8001614:	189b      	adds	r3, r3, r2
 8001616:	2218      	movs	r2, #24
 8001618:	4694      	mov	ip, r2
 800161a:	44bc      	add	ip, r7
 800161c:	4463      	add	r3, ip
 800161e:	7e9b      	ldrb	r3, [r3, #26]
 8001620:	001a      	movs	r2, r3
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	0019      	movs	r1, r3
 8001626:	f7ff fc60 	bl	8000eea <getDecimalDigits>

	uint8_t i;
	for(i=0;i<text.num_digit;i++)
 800162a:	2317      	movs	r3, #23
 800162c:	2218      	movs	r2, #24
 800162e:	189b      	adds	r3, r3, r2
 8001630:	19db      	adds	r3, r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e041      	b.n	80016bc <Write_nums+0x144>
	{
		Write_num(Map,text.x-i*text.font.Width,text.y,text.font,digits[i]);
 8001638:	2304      	movs	r3, #4
 800163a:	2030      	movs	r0, #48	@ 0x30
 800163c:	181b      	adds	r3, r3, r0
 800163e:	2218      	movs	r2, #24
 8001640:	4694      	mov	ip, r2
 8001642:	44bc      	add	ip, r7
 8001644:	4463      	add	r3, ip
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	2304      	movs	r3, #4
 800164a:	181b      	adds	r3, r3, r0
 800164c:	2118      	movs	r1, #24
 800164e:	468c      	mov	ip, r1
 8001650:	44bc      	add	ip, r7
 8001652:	4463      	add	r3, ip
 8001654:	8a9b      	ldrh	r3, [r3, #20]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2117      	movs	r1, #23
 800165a:	000e      	movs	r6, r1
 800165c:	2418      	movs	r4, #24
 800165e:	1909      	adds	r1, r1, r4
 8001660:	19c9      	adds	r1, r1, r7
 8001662:	7809      	ldrb	r1, [r1, #0]
 8001664:	434b      	muls	r3, r1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	b2dc      	uxtb	r4, r3
 800166c:	2304      	movs	r3, #4
 800166e:	181b      	adds	r3, r3, r0
 8001670:	2218      	movs	r2, #24
 8001672:	4694      	mov	ip, r2
 8001674:	44bc      	add	ip, r7
 8001676:	4463      	add	r3, ip
 8001678:	885d      	ldrh	r5, [r3, #2]
 800167a:	0031      	movs	r1, r6
 800167c:	000e      	movs	r6, r1
 800167e:	2318      	movs	r3, #24
 8001680:	18ca      	adds	r2, r1, r3
 8001682:	19d3      	adds	r3, r2, r7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	5cd2      	ldrb	r2, [r2, r3]
 800168a:	2304      	movs	r3, #4
 800168c:	181b      	adds	r3, r3, r0
 800168e:	2118      	movs	r1, #24
 8001690:	468c      	mov	ip, r1
 8001692:	44bc      	add	ip, r7
 8001694:	4463      	add	r3, ip
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	466a      	mov	r2, sp
 800169c:	6959      	ldr	r1, [r3, #20]
 800169e:	6011      	str	r1, [r2, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	002a      	movs	r2, r5
 80016a4:	0021      	movs	r1, r4
 80016a6:	f7ff fc5f 	bl	8000f68 <Write_num>
	for(i=0;i<text.num_digit;i++)
 80016aa:	0031      	movs	r1, r6
 80016ac:	2018      	movs	r0, #24
 80016ae:	180b      	adds	r3, r1, r0
 80016b0:	19db      	adds	r3, r3, r7
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	180b      	adds	r3, r1, r0
 80016b6:	19db      	adds	r3, r3, r7
 80016b8:	3201      	adds	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	2304      	movs	r3, #4
 80016be:	2230      	movs	r2, #48	@ 0x30
 80016c0:	189b      	adds	r3, r3, r2
 80016c2:	2218      	movs	r2, #24
 80016c4:	4694      	mov	ip, r2
 80016c6:	44bc      	add	ip, r7
 80016c8:	4463      	add	r3, ip
 80016ca:	7e9b      	ldrb	r3, [r3, #26]
 80016cc:	2217      	movs	r2, #23
 80016ce:	2118      	movs	r1, #24
 80016d0:	1852      	adds	r2, r2, r1
 80016d2:	19d2      	adds	r2, r2, r7
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3ae      	bcc.n	8001638 <Write_nums+0xc0>
 80016da:	46c5      	mov	sp, r8
	}

}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00c      	add	sp, #48	@ 0x30
 80016e2:	bc80      	pop	{r7}
 80016e4:	46b8      	mov	r8, r7
 80016e6:	bcf0      	pop	{r4, r5, r6, r7}
 80016e8:	bc08      	pop	{r3}
 80016ea:	b004      	add	sp, #16
 80016ec:	4718      	bx	r3

080016ee <Display_Text>:



void Display_Text(Text_Z text, uint8_t * Map,uint8_t * background)
{
 80016ee:	b084      	sub	sp, #16
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	46c6      	mov	lr, r8
 80016f4:	b500      	push	{lr}
 80016f6:	b09a      	sub	sp, #104	@ 0x68
 80016f8:	af06      	add	r7, sp, #24
 80016fa:	2428      	movs	r4, #40	@ 0x28
 80016fc:	2538      	movs	r5, #56	@ 0x38
 80016fe:	1964      	adds	r4, r4, r5
 8001700:	2508      	movs	r5, #8
 8001702:	46ac      	mov	ip, r5
 8001704:	44bc      	add	ip, r7
 8001706:	4464      	add	r4, ip
 8001708:	6020      	str	r0, [r4, #0]
 800170a:	6061      	str	r1, [r4, #4]
 800170c:	60a2      	str	r2, [r4, #8]
 800170e:	60e3      	str	r3, [r4, #12]
 8001710:	466b      	mov	r3, sp
 8001712:	4698      	mov	r8, r3

	uint8_t old_datas[text.area_draw];
 8001714:	2428      	movs	r4, #40	@ 0x28
 8001716:	2338      	movs	r3, #56	@ 0x38
 8001718:	18e3      	adds	r3, r4, r3
 800171a:	2208      	movs	r2, #8
 800171c:	4694      	mov	ip, r2
 800171e:	44bc      	add	ip, r7
 8001720:	4463      	add	r3, ip
 8001722:	8b9a      	ldrh	r2, [r3, #28]
 8001724:	0013      	movs	r3, r2
 8001726:	3b01      	subs	r3, #1
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800172a:	623a      	str	r2, [r7, #32]
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001730:	6a38      	ldr	r0, [r7, #32]
 8001732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001734:	0003      	movs	r3, r0
 8001736:	0f5b      	lsrs	r3, r3, #29
 8001738:	469c      	mov	ip, r3
 800173a:	000b      	movs	r3, r1
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4663      	mov	r3, ip
 8001742:	687d      	ldr	r5, [r7, #4]
 8001744:	431d      	orrs	r5, r3
 8001746:	607d      	str	r5, [r7, #4]
 8001748:	0003      	movs	r3, r0
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	61ba      	str	r2, [r7, #24]
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69b8      	ldr	r0, [r7, #24]
 8001756:	69f9      	ldr	r1, [r7, #28]
 8001758:	0003      	movs	r3, r0
 800175a:	0f5b      	lsrs	r3, r3, #29
 800175c:	000d      	movs	r5, r1
 800175e:	00ed      	lsls	r5, r5, #3
 8001760:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001762:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001764:	431d      	orrs	r5, r3
 8001766:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001768:	0003      	movs	r3, r0
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800176e:	0013      	movs	r3, r2
 8001770:	3307      	adds	r3, #7
 8001772:	08db      	lsrs	r3, r3, #3
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	466a      	mov	r2, sp
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	469d      	mov	sp, r3
 800177c:	ab06      	add	r3, sp, #24
 800177e:	3300      	adds	r3, #0
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48

	//memset(old_datas,0xFF,text.area_draw);
	Save_data(old_datas,text,Map);
 8001782:	2338      	movs	r3, #56	@ 0x38
 8001784:	18e3      	adds	r3, r4, r3
 8001786:	2208      	movs	r2, #8
 8001788:	18ba      	adds	r2, r7, r2
 800178a:	1898      	adds	r0, r3, r2
 800178c:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	2208      	movs	r2, #8
 8001792:	189b      	adds	r3, r3, r2
 8001794:	19db      	adds	r3, r3, r7
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	9305      	str	r3, [sp, #20]
 800179a:	466b      	mov	r3, sp
 800179c:	001a      	movs	r2, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	330c      	adds	r3, #12
 80017a2:	cb32      	ldmia	r3!, {r1, r4, r5}
 80017a4:	c232      	stmia	r2!, {r1, r4, r5}
 80017a6:	cb12      	ldmia	r3!, {r1, r4}
 80017a8:	c212      	stmia	r2!, {r1, r4}
 80017aa:	6801      	ldr	r1, [r0, #0]
 80017ac:	6842      	ldr	r2, [r0, #4]
 80017ae:	6883      	ldr	r3, [r0, #8]
 80017b0:	0030      	movs	r0, r6
 80017b2:	f7ff fe07 	bl	80013c4 <Save_data>


	Wipe_TextZone(Map,text,background);
 80017b6:	2428      	movs	r4, #40	@ 0x28
 80017b8:	2338      	movs	r3, #56	@ 0x38
 80017ba:	18e3      	adds	r3, r4, r3
 80017bc:	2208      	movs	r2, #8
 80017be:	18ba      	adds	r2, r7, r2
 80017c0:	1898      	adds	r0, r3, r2
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	2208      	movs	r2, #8
 80017c6:	189b      	adds	r3, r3, r2
 80017c8:	19db      	adds	r3, r3, r7
 80017ca:	681e      	ldr	r6, [r3, #0]
 80017cc:	2384      	movs	r3, #132	@ 0x84
 80017ce:	2208      	movs	r2, #8
 80017d0:	189b      	adds	r3, r3, r2
 80017d2:	19db      	adds	r3, r3, r7
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	9305      	str	r3, [sp, #20]
 80017d8:	466b      	mov	r3, sp
 80017da:	001a      	movs	r2, r3
 80017dc:	0003      	movs	r3, r0
 80017de:	330c      	adds	r3, #12
 80017e0:	cb32      	ldmia	r3!, {r1, r4, r5}
 80017e2:	c232      	stmia	r2!, {r1, r4, r5}
 80017e4:	cb12      	ldmia	r3!, {r1, r4}
 80017e6:	c212      	stmia	r2!, {r1, r4}
 80017e8:	6801      	ldr	r1, [r0, #0]
 80017ea:	6842      	ldr	r2, [r0, #4]
 80017ec:	6883      	ldr	r3, [r0, #8]
 80017ee:	0030      	movs	r0, r6
 80017f0:	f7ff fe53 	bl	800149a <Wipe_TextZone>
	Write_nums(Map,text);
 80017f4:	2428      	movs	r4, #40	@ 0x28
 80017f6:	2338      	movs	r3, #56	@ 0x38
 80017f8:	18e3      	adds	r3, r4, r3
 80017fa:	2208      	movs	r2, #8
 80017fc:	18ba      	adds	r2, r7, r2
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	2208      	movs	r2, #8
 8001804:	189b      	adds	r3, r3, r2
 8001806:	19db      	adds	r3, r3, r7
 8001808:	681e      	ldr	r6, [r3, #0]
 800180a:	466b      	mov	r3, sp
 800180c:	001a      	movs	r2, r3
 800180e:	0003      	movs	r3, r0
 8001810:	330c      	adds	r3, #12
 8001812:	cb32      	ldmia	r3!, {r1, r4, r5}
 8001814:	c232      	stmia	r2!, {r1, r4, r5}
 8001816:	cb12      	ldmia	r3!, {r1, r4}
 8001818:	c212      	stmia	r2!, {r1, r4}
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	6842      	ldr	r2, [r0, #4]
 800181e:	6883      	ldr	r3, [r0, #8]
 8001820:	0030      	movs	r0, r6
 8001822:	f7ff fea9 	bl	8001578 <Write_nums>

	uint8_t new_datas[text.area_draw];
 8001826:	2428      	movs	r4, #40	@ 0x28
 8001828:	2338      	movs	r3, #56	@ 0x38
 800182a:	18e3      	adds	r3, r4, r3
 800182c:	2208      	movs	r2, #8
 800182e:	4694      	mov	ip, r2
 8001830:	44bc      	add	ip, r7
 8001832:	4463      	add	r3, ip
 8001834:	8b9b      	ldrh	r3, [r3, #28]
 8001836:	001a      	movs	r2, r3
 8001838:	3a01      	subs	r2, #1
 800183a:	647a      	str	r2, [r7, #68]	@ 0x44
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	2200      	movs	r2, #0
 8001840:	617a      	str	r2, [r7, #20]
 8001842:	6938      	ldr	r0, [r7, #16]
 8001844:	6979      	ldr	r1, [r7, #20]
 8001846:	0002      	movs	r2, r0
 8001848:	0f52      	lsrs	r2, r2, #29
 800184a:	000d      	movs	r5, r1
 800184c:	00ed      	lsls	r5, r5, #3
 800184e:	637d      	str	r5, [r7, #52]	@ 0x34
 8001850:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8001852:	4315      	orrs	r5, r2
 8001854:	637d      	str	r5, [r7, #52]	@ 0x34
 8001856:	0002      	movs	r2, r0
 8001858:	00d2      	lsls	r2, r2, #3
 800185a:	633a      	str	r2, [r7, #48]	@ 0x30
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	60fa      	str	r2, [r7, #12]
 8001862:	68b8      	ldr	r0, [r7, #8]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	0002      	movs	r2, r0
 8001868:	0f52      	lsrs	r2, r2, #29
 800186a:	000d      	movs	r5, r1
 800186c:	00ed      	lsls	r5, r5, #3
 800186e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001870:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001872:	4315      	orrs	r5, r2
 8001874:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001876:	0002      	movs	r2, r0
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800187c:	3307      	adds	r3, #7
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	466a      	mov	r2, sp
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	469d      	mov	sp, r3
 8001888:	ab06      	add	r3, sp, #24
 800188a:	3300      	adds	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	@ 0x40
//		//new_datas[i] = 0xAA;
//		new_datas[i]=Map[text.absolute_address+i%(text.line/8)+i/(text.line/8)*EPD_WIDTH/8];
//	}

	//memset(new_datas,0x00,text.area_draw);
	Save_data(new_datas,text,Map);
 800188e:	2338      	movs	r3, #56	@ 0x38
 8001890:	18e3      	adds	r3, r4, r3
 8001892:	2208      	movs	r2, #8
 8001894:	4694      	mov	ip, r2
 8001896:	44bc      	add	ip, r7
 8001898:	4463      	add	r3, ip
 800189a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800189c:	2280      	movs	r2, #128	@ 0x80
 800189e:	2108      	movs	r1, #8
 80018a0:	1852      	adds	r2, r2, r1
 80018a2:	19d2      	adds	r2, r2, r7
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	9205      	str	r2, [sp, #20]
 80018a8:	466a      	mov	r2, sp
 80018aa:	0011      	movs	r1, r2
 80018ac:	001d      	movs	r5, r3
 80018ae:	350c      	adds	r5, #12
 80018b0:	002a      	movs	r2, r5
 80018b2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80018b4:	c170      	stmia	r1!, {r4, r5, r6}
 80018b6:	ca30      	ldmia	r2!, {r4, r5}
 80018b8:	c130      	stmia	r1!, {r4, r5}
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f7ff fd80 	bl	80013c4 <Save_data>



	EPD_Dis_Part_Old(text.max_y,text.max_x,new_datas,old_datas,text.column,text.line);
 80018c4:	2228      	movs	r2, #40	@ 0x28
 80018c6:	2338      	movs	r3, #56	@ 0x38
 80018c8:	18d3      	adds	r3, r2, r3
 80018ca:	2108      	movs	r1, #8
 80018cc:	468c      	mov	ip, r1
 80018ce:	44bc      	add	ip, r7
 80018d0:	4463      	add	r3, ip
 80018d2:	88db      	ldrh	r3, [r3, #6]
 80018d4:	001c      	movs	r4, r3
 80018d6:	2338      	movs	r3, #56	@ 0x38
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	2108      	movs	r1, #8
 80018dc:	468c      	mov	ip, r1
 80018de:	44bc      	add	ip, r7
 80018e0:	4463      	add	r3, ip
 80018e2:	791b      	ldrb	r3, [r3, #4]
 80018e4:	001d      	movs	r5, r3
 80018e6:	2338      	movs	r3, #56	@ 0x38
 80018e8:	18d3      	adds	r3, r2, r3
 80018ea:	2108      	movs	r1, #8
 80018ec:	468c      	mov	ip, r1
 80018ee:	44bc      	add	ip, r7
 80018f0:	4463      	add	r3, ip
 80018f2:	895b      	ldrh	r3, [r3, #10]
 80018f4:	0019      	movs	r1, r3
 80018f6:	2338      	movs	r3, #56	@ 0x38
 80018f8:	18d3      	adds	r3, r2, r3
 80018fa:	2208      	movs	r2, #8
 80018fc:	4694      	mov	ip, r2
 80018fe:	44bc      	add	ip, r7
 8001900:	4463      	add	r3, ip
 8001902:	899b      	ldrh	r3, [r3, #12]
 8001904:	0018      	movs	r0, r3
 8001906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001908:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800190a:	9001      	str	r0, [sp, #4]
 800190c:	9100      	str	r1, [sp, #0]
 800190e:	0029      	movs	r1, r5
 8001910:	0020      	movs	r0, r4
 8001912:	f000 f9d5 	bl	8001cc0 <EPD_Dis_Part_Old>
 8001916:	46c5      	mov	sp, r8



}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b014      	add	sp, #80	@ 0x50
 800191e:	bc80      	pop	{r7}
 8001920:	46b8      	mov	r8, r7
 8001922:	bcf0      	pop	{r4, r5, r6, r7}
 8001924:	bc08      	pop	{r3}
 8001926:	b004      	add	sp, #16
 8001928:	4718      	bx	r3

0800192a <Send_I2C_Command>:


HAL_StatusTypeDef Send_I2C_Command(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t command, uint32_t Timeout)
{
 800192a:	b590      	push	{r4, r7, lr}
 800192c:	b089      	sub	sp, #36	@ 0x24
 800192e:	af02      	add	r7, sp, #8
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	0008      	movs	r0, r1
 8001934:	0011      	movs	r1, r2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	240a      	movs	r4, #10
 800193a:	193b      	adds	r3, r7, r4
 800193c:	1c02      	adds	r2, r0, #0
 800193e:	801a      	strh	r2, [r3, #0]
 8001940:	2008      	movs	r0, #8
 8001942:	183b      	adds	r3, r7, r0
 8001944:	1c0a      	adds	r2, r1, #0
 8001946:	801a      	strh	r2, [r3, #0]

	uint8_t comm[] = {(command >> 8) & 0xFF,command & 0xFF};
 8001948:	0001      	movs	r1, r0
 800194a:	187b      	adds	r3, r7, r1
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	2014      	movs	r0, #20
 8001956:	183b      	adds	r3, r7, r0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	187b      	adds	r3, r7, r1
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	183b      	adds	r3, r7, r0
 8001962:	705a      	strb	r2, [r3, #1]

	//return HAL_I2C_Master_Transmit(hi2c, DevAddress, (uint8_t*)&command,2, 500);
	return HAL_I2C_Master_Transmit(hi2c, DevAddress, comm,2, 500);
 8001964:	183a      	adds	r2, r7, r0
 8001966:	193b      	adds	r3, r7, r4
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	23fa      	movs	r3, #250	@ 0xfa
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2302      	movs	r3, #2
 8001974:	f001 fda8 	bl	80034c8 <HAL_I2C_Master_Transmit>
 8001978:	0003      	movs	r3, r0
}
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b007      	add	sp, #28
 8001980:	bd90      	pop	{r4, r7, pc}
	...

08001984 <delay_xms>:
unsigned char oldDataC[256];
unsigned char oldDataD[256];
unsigned char oldDataE[256];
unsigned char partFlag=1;
void delay_xms(unsigned int xms)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	unsigned int i;
	while(xms--)
 800198c:	e007      	b.n	800199e <delay_xms+0x1a>
	{
		i=12000;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <delay_xms+0x30>)
 8001990:	60fb      	str	r3, [r7, #12]
		while(i--);
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1e5a      	subs	r2, r3, #1
 8001998:	60fa      	str	r2, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1fa      	bne.n	8001994 <delay_xms+0x10>
	while(xms--)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	1e5a      	subs	r2, r3, #1
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f2      	bne.n	800198e <delay_xms+0xa>
	}
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b004      	add	sp, #16
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	00002ee0 	.word	0x00002ee0

080019b8 <lcd_chkstatus>:
void lcd_chkstatus(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	while(isEPD_W21_BUSY==0);
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	23a0      	movs	r3, #160	@ 0xa0
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	2110      	movs	r1, #16
 80019c4:	0018      	movs	r0, r3
 80019c6:	f001 fcaf 	bl	8003328 <HAL_GPIO_ReadPin>
 80019ca:	1e03      	subs	r3, r0, #0
 80019cc:	d0f7      	beq.n	80019be <lcd_chkstatus+0x6>
                   
}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <EPD_lut>:
EPD_W21_WriteDATA (0x87);
}


void EPD_lut(unsigned char LUTsel)			
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	0002      	movs	r2, r0
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	701a      	strb	r2, [r3, #0]
	unsigned char tempfull,temppartial;
	EPD_W21_WriteCMD(0x40);
 80019e2:	2040      	movs	r0, #64	@ 0x40
 80019e4:	f000 fa2a 	bl	8001e3c <EPD_W21_WriteCMD>
	lcd_chkstatus();
 80019e8:	f7ff ffe6 	bl	80019b8 <lcd_chkstatus>
	//tempfull = EPD_W21_ReadDATA();
	tempfull =25;
 80019ec:	210f      	movs	r1, #15
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2219      	movs	r2, #25
 80019f2:	701a      	strb	r2, [r3, #0]
	if((128>tempfull)&&(tempfull>54))		
 80019f4:	000a      	movs	r2, r1
 80019f6:	18bb      	adds	r3, r7, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db07      	blt.n	8001a10 <EPD_lut+0x3a>
 8001a00:	18bb      	adds	r3, r7, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b36      	cmp	r3, #54	@ 0x36
 8001a06:	d903      	bls.n	8001a10 <EPD_lut+0x3a>
		tempfull = 53 ;						
 8001a08:	18bb      	adds	r3, r7, r2
 8001a0a:	2235      	movs	r2, #53	@ 0x35
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <EPD_lut+0x4a>
	else if(tempfull>128)					
 8001a10:	220f      	movs	r2, #15
 8001a12:	18bb      	adds	r3, r7, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b80      	cmp	r3, #128	@ 0x80
 8001a18:	d902      	bls.n	8001a20 <EPD_lut+0x4a>
		tempfull = 1;							
 8001a1a:	18bb      	adds	r3, r7, r2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
	
	temppartial = tempfull+60;			
 8001a20:	210e      	movs	r1, #14
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	220f      	movs	r2, #15
 8001a26:	18ba      	adds	r2, r7, r2
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	323c      	adds	r2, #60	@ 0x3c
 8001a2c:	701a      	strb	r2, [r3, #0]
	if(temppartial>128)						
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b80      	cmp	r3, #128	@ 0x80
 8001a34:	d902      	bls.n	8001a3c <EPD_lut+0x66>
		temppartial = 127;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	227f      	movs	r2, #127	@ 0x7f
 8001a3a:	701a      	strb	r2, [r3, #0]
	
	if(LUTsel==0)							
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10f      	bne.n	8001a64 <EPD_lut+0x8e>
	{
			EPD_W21_WriteCMD(0xE0);					
 8001a44:	20e0      	movs	r0, #224	@ 0xe0
 8001a46:	f000 f9f9 	bl	8001e3c <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA(0x02);		
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 fa1b 	bl	8001e86 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xE5);			
 8001a50:	20e5      	movs	r0, #229	@ 0xe5
 8001a52:	f000 f9f3 	bl	8001e3c <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA(tempfull);	//define the Temperature value////			
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 fa12 	bl	8001e86 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xe0);
			EPD_W21_WriteDATA (0x02);
			EPD_W21_WriteCMD(0xe5);
			EPD_W21_WriteDATA (temppartial);
	}
}
 8001a62:	e012      	b.n	8001a8a <EPD_lut+0xb4>
	else if(LUTsel==1)							
 8001a64:	1dfb      	adds	r3, r7, #7
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d10e      	bne.n	8001a8a <EPD_lut+0xb4>
			EPD_W21_WriteCMD(0xe0);
 8001a6c:	20e0      	movs	r0, #224	@ 0xe0
 8001a6e:	f000 f9e5 	bl	8001e3c <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA (0x02);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f000 fa07 	bl	8001e86 <EPD_W21_WriteDATA>
			EPD_W21_WriteCMD(0xe5);
 8001a78:	20e5      	movs	r0, #229	@ 0xe5
 8001a7a:	f000 f9df 	bl	8001e3c <EPD_W21_WriteCMD>
			EPD_W21_WriteDATA (temppartial);
 8001a7e:	230e      	movs	r3, #14
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f000 f9fe 	bl	8001e86 <EPD_W21_WriteDATA>
}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <EPD_Init>:
//JD79651
void EPD_Init(void)
{	
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
		EPD_W21_RST_0;		// Module reset
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <EPD_Init+0xbc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f001 fc5f 	bl	8003362 <HAL_GPIO_WritePin>
		HAL_Delay(10);//At least 10ms delay
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f000 ff99 	bl	80029dc <HAL_Delay>
		EPD_W21_RST_1;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <EPD_Init+0xbc>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	2102      	movs	r1, #2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fc56 	bl	8003362 <HAL_GPIO_WritePin>
		HAL_Delay(10);//At least 10ms delay
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f000 ff90 	bl	80029dc <HAL_Delay>
    lcd_chkstatus();
 8001abc:	f7ff ff7c 	bl	80019b8 <lcd_chkstatus>
    /******FiTi  init****************/

		EPD_W21_WriteCMD(0x4D);        			//FITIinternal code
 8001ac0:	204d      	movs	r0, #77	@ 0x4d
 8001ac2:	f000 f9bb 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xAA);
 8001ac6:	20aa      	movs	r0, #170	@ 0xaa
 8001ac8:	f000 f9dd 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x87);        			//FITIinternal code
 8001acc:	2087      	movs	r0, #135	@ 0x87
 8001ace:	f000 f9b5 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x28);
 8001ad2:	2028      	movs	r0, #40	@ 0x28
 8001ad4:	f000 f9d7 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x88);        			//FITIinternal code
 8001ad8:	2088      	movs	r0, #136	@ 0x88
 8001ada:	f000 f9af 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x80);
 8001ade:	2080      	movs	r0, #128	@ 0x80
 8001ae0:	f000 f9d1 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x90);        			//FITIinternal code
 8001ae4:	2090      	movs	r0, #144	@ 0x90
 8001ae6:	f000 f9a9 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x02);
 8001aea:	2002      	movs	r0, #2
 8001aec:	f000 f9cb 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x91);        			//FITIinternal code
 8001af0:	2091      	movs	r0, #145	@ 0x91
 8001af2:	f000 f9a3 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x8d);
 8001af6:	208d      	movs	r0, #141	@ 0x8d
 8001af8:	f000 f9c5 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0xAA);        			//FITIinternal code
 8001afc:	20aa      	movs	r0, #170	@ 0xaa
 8001afe:	f000 f99d 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f9bf 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_lut(0);
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff ff64 	bl	80019d6 <EPD_lut>

		EPD_W21_WriteCMD(0xE8);
 8001b0e:	20e8      	movs	r0, #232	@ 0xe8
 8001b10:	f000 f994 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xA8);		//A
 8001b14:	20a8      	movs	r0, #168	@ 0xa8
 8001b16:	f000 f9b6 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x26);
 8001b1a:	2026      	movs	r0, #38	@ 0x26
 8001b1c:	f000 f98e 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);		//A
 8001b20:	200f      	movs	r0, #15
 8001b22:	f000 f9b0 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x04);  // power ON
 8001b26:	2004      	movs	r0, #4
 8001b28:	f000 f988 	bl	8001e3c <EPD_W21_WriteCMD>
		lcd_chkstatus();
 8001b2c:	f7ff ff44 	bl	80019b8 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x00);			//panel setting
 8001b30:	2000      	movs	r0, #0
 8001b32:	f000 f983 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x1f);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001b36:	201f      	movs	r0, #31
 8001b38:	f000 f9a5 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X50);
 8001b3c:	2050      	movs	r0, #80	@ 0x50
 8001b3e:	f000 f97d 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x97);
 8001b42:	2097      	movs	r0, #151	@ 0x97
 8001b44:	f000 f99f 	bl	8001e86 <EPD_W21_WriteDATA>

}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	50000400 	.word	0x50000400

08001b54 <EPD_Init_Part>:


void EPD_Init_Part(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
		EPD_W21_RST_0;		// Module reset
 8001b58:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <EPD_Init_Part+0xbc>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2102      	movs	r1, #2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fbff 	bl	8003362 <HAL_GPIO_WritePin>
		delay_xms(10);//At least 10ms delay 
 8001b64:	200a      	movs	r0, #10
 8001b66:	f7ff ff0d 	bl	8001984 <delay_xms>
		EPD_W21_RST_1;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <EPD_Init_Part+0xbc>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2102      	movs	r1, #2
 8001b70:	0018      	movs	r0, r3
 8001b72:	f001 fbf6 	bl	8003362 <HAL_GPIO_WritePin>
		delay_xms(10);//At least 10ms delay 
 8001b76:	200a      	movs	r0, #10
 8001b78:	f7ff ff04 	bl	8001984 <delay_xms>
    lcd_chkstatus();
 8001b7c:	f7ff ff1c 	bl	80019b8 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x4D);        			//FITIinternal code
 8001b80:	204d      	movs	r0, #77	@ 0x4d
 8001b82:	f000 f95b 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xAA);
 8001b86:	20aa      	movs	r0, #170	@ 0xaa
 8001b88:	f000 f97d 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x87);        			//FITIinternal code
 8001b8c:	2087      	movs	r0, #135	@ 0x87
 8001b8e:	f000 f955 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x28);
 8001b92:	2028      	movs	r0, #40	@ 0x28
 8001b94:	f000 f977 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x88);        			//FITIinternal code
 8001b98:	2088      	movs	r0, #136	@ 0x88
 8001b9a:	f000 f94f 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x80);
 8001b9e:	2080      	movs	r0, #128	@ 0x80
 8001ba0:	f000 f971 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x90);        			//FITIinternal code
 8001ba4:	2090      	movs	r0, #144	@ 0x90
 8001ba6:	f000 f949 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x02);
 8001baa:	2002      	movs	r0, #2
 8001bac:	f000 f96b 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x91);        			//FITIinternal code
 8001bb0:	2091      	movs	r0, #145	@ 0x91
 8001bb2:	f000 f943 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x8d);
 8001bb6:	208d      	movs	r0, #141	@ 0x8d
 8001bb8:	f000 f965 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0xAA);        			//FITIinternal code
 8001bbc:	20aa      	movs	r0, #170	@ 0xaa
 8001bbe:	f000 f93d 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f95f 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_lut(1);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff ff04 	bl	80019d6 <EPD_lut>

		EPD_W21_WriteCMD(0xE8);         
 8001bce:	20e8      	movs	r0, #232	@ 0xe8
 8001bd0:	f000 f934 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0xA8);		//A
 8001bd4:	20a8      	movs	r0, #168	@ 0xa8
 8001bd6:	f000 f956 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x26);         
 8001bda:	2026      	movs	r0, #38	@ 0x26
 8001bdc:	f000 f92e 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (0x0f);		//A
 8001be0:	200f      	movs	r0, #15
 8001be2:	f000 f950 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0x04);  
 8001be6:	2004      	movs	r0, #4
 8001be8:	f000 f928 	bl	8001e3c <EPD_W21_WriteCMD>
		lcd_chkstatus();
 8001bec:	f7ff fee4 	bl	80019b8 <lcd_chkstatus>

		EPD_W21_WriteCMD(0x00);			//panel setting
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f923 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0x1f);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8001bf6:	201f      	movs	r0, #31
 8001bf8:	f000 f945 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X50);
 8001bfc:	2050      	movs	r0, #80	@ 0x50
 8001bfe:	f000 f91d 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xf7);
 8001c02:	20f7      	movs	r0, #247	@ 0xf7
 8001c04:	f000 f93f 	bl	8001e86 <EPD_W21_WriteDATA>
	}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	50000400 	.word	0x50000400

08001c14 <EPD_DeepSleep>:
	
void EPD_DeepSleep(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
		EPD_W21_WriteCMD(0X50);  //VCOM AND DATA INTERVAL SETTING			
 8001c18:	2050      	movs	r0, #80	@ 0x50
 8001c1a:	f000 f90f 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xf7); //WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7	
 8001c1e:	20f7      	movs	r0, #247	@ 0xf7
 8001c20:	f000 f931 	bl	8001e86 <EPD_W21_WriteDATA>

		EPD_W21_WriteCMD(0X02);  	//power off
 8001c24:	2002      	movs	r0, #2
 8001c26:	f000 f909 	bl	8001e3c <EPD_W21_WriteCMD>
	  lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001c2a:	f7ff fec5 	bl	80019b8 <lcd_chkstatus>
    delay_xms(100);
 8001c2e:	2064      	movs	r0, #100	@ 0x64
 8001c30:	f7ff fea8 	bl	8001984 <delay_xms>
	  EPD_W21_WriteCMD(0X07);  	//deep sleep
 8001c34:	2007      	movs	r0, #7
 8001c36:	f000 f901 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA(0xA5);
 8001c3a:	20a5      	movs	r0, #165	@ 0xa5
 8001c3c:	f000 f923 	bl	8001e86 <EPD_W21_WriteDATA>
}
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <EPD_Update>:
//Full screen refresh update function
void EPD_Update(void)
{   
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
	//Refresh
	EPD_W21_WriteCMD(0x12);		//DISPLAY REFRESH 	
 8001c4a:	2012      	movs	r0, #18
 8001c4c:	f000 f8f6 	bl	8001e3c <EPD_W21_WriteCMD>
	delay_xms(1);	             //!!!The delay here is necessary, 200uS at least!!!     
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff fe97 	bl	8001984 <delay_xms>
	lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001c56:	f7ff feaf 	bl	80019b8 <lcd_chkstatus>
}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <EPD_WhiteScreen_ALL>:


void EPD_WhiteScreen_ALL(const unsigned char *datas)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    unsigned int i;
	  //Write Data
		EPD_W21_WriteCMD(0x10);	       //Transfer old data
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f000 f8e7 	bl	8001e3c <EPD_W21_WriteCMD>
	  for(i=0;i<EPD_ARRAY;i++)	  
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e005      	b.n	8001c80 <EPD_WhiteScreen_ALL+0x20>
    {	
	    EPD_W21_WriteDATA(0xFF);  //Transfer the actual displayed data
 8001c74:	20ff      	movs	r0, #255	@ 0xff
 8001c76:	f000 f906 	bl	8001e86 <EPD_W21_WriteDATA>
	  for(i=0;i<EPD_ARRAY;i++)	  
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	23fd      	movs	r3, #253	@ 0xfd
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d3f4      	bcc.n	8001c74 <EPD_WhiteScreen_ALL+0x14>
    }	
		EPD_W21_WriteCMD(0x13);		     //Transfer new data
 8001c8a:	2013      	movs	r0, #19
 8001c8c:	f000 f8d6 	bl	8001e3c <EPD_W21_WriteCMD>
	  for(i=0;i<EPD_ARRAY;i++)	     
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e009      	b.n	8001caa <EPD_WhiteScreen_ALL+0x4a>
	  {
	    EPD_W21_WriteDATA(datas[i]);  //Transfer the actual displayed data
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 f8f1 	bl	8001e86 <EPD_W21_WriteDATA>
	  for(i=0;i<EPD_ARRAY;i++)	     
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	23fd      	movs	r3, #253	@ 0xfd
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3f0      	bcc.n	8001c96 <EPD_WhiteScreen_ALL+0x36>
	  }
    EPD_Update();	    
 8001cb4:	f7ff ffc7 	bl	8001c46 <EPD_Update>


}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <EPD_Dis_Part_Old>:
		lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal  
	  
}

void EPD_Dis_Part_Old(unsigned int x_start,unsigned int y_start,uint8_t * datas,uint8_t * oldDatas,unsigned int PART_COLUMN,unsigned int PART_LINE)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	603b      	str	r3, [r7, #0]
  unsigned int i;

  	  	EPD_Init_Part();
 8001cce:	f7ff ff41 	bl	8001b54 <EPD_Init_Part>

		EPD_W21_WriteCMD(0x91);		//This command makes the display enter partial mode
 8001cd2:	2091      	movs	r0, #145	@ 0x91
 8001cd4:	f000 f8b2 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteCMD(0x90);		//resolution setting
 8001cd8:	2090      	movs	r0, #144	@ 0x90
 8001cda:	f000 f8af 	bl	8001e3c <EPD_W21_WriteCMD>

		EPD_W21_WriteCMD(0x14);		//resolution setting
 8001cde:	2014      	movs	r0, #20
 8001ce0:	f000 f8ac 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 f8cc 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f8c6 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);      //y-start
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f8c1 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 f8bc 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f8b6 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f8b1 	bl	8001e86 <EPD_W21_WriteDATA>

		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e009      	b.n	8001d3e <EPD_Dis_Part_Old+0x7e>
		{
		EPD_W21_WriteDATA(oldDatas[i]);
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f8a7 	bl	8001e86 <EPD_W21_WriteDATA>
		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d42:	4353      	muls	r3, r2
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3ee      	bcc.n	8001d2a <EPD_Dis_Part_Old+0x6a>
		}

		EPD_W21_WriteCMD(0x15);		//resolution setting
 8001d4c:	2015      	movs	r0, #21
 8001d4e:	f000 f875 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 f895 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0a1b      	lsrs	r3, r3, #8
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f88f 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);   //y-start
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 f88a 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 f885 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	0018      	movs	r0, r3
 8001d84:	f000 f87f 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f87a 	bl	8001e86 <EPD_W21_WriteDATA>

		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e009      	b.n	8001dac <EPD_Dis_Part_Old+0xec>
		{
		EPD_W21_WriteDATA(datas[i]);
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f870 	bl	8001e86 <EPD_W21_WriteDATA>
		for(i=0;i<PART_COLUMN*PART_LINE/8;i++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db0:	4353      	muls	r3, r2
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ee      	bcc.n	8001d98 <EPD_Dis_Part_Old+0xd8>
		}

    		//Refresh
		EPD_W21_WriteCMD(0x16);	//DISPLAY REFRESH
 8001dba:	2016      	movs	r0, #22
 8001dbc:	f000 f83e 	bl	8001e3c <EPD_W21_WriteCMD>
		EPD_W21_WriteDATA (x_start);   //x-start
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f000 f85e 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start/256);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f858 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA (y_start%256);   //y-start
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f853 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA(PART_LINE);	        //w
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f84e 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)/256);	    //l-MSB
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	0018      	movs	r0, r3
 8001df2:	f000 f848 	bl	8001e86 <EPD_W21_WriteDATA>
		EPD_W21_WriteDATA((PART_COLUMN)%256);	    //l-LSB
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f000 f843 	bl	8001e86 <EPD_W21_WriteDATA>

		HAL_Delay(2);	             //!!!The delay here is necessary, 200uS at least!!!
 8001e00:	2002      	movs	r0, #2
 8001e02:	f000 fdeb 	bl	80029dc <HAL_Delay>
		lcd_chkstatus();          //waiting for the electronic paper IC to release the idle signal
 8001e06:	f7ff fdd7 	bl	80019b8 <lcd_chkstatus>

}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b006      	add	sp, #24
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <SPI_Write>:
//
//}

// SPI Hardware Implement
void SPI_Write(uint8_t value)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	701a      	strb	r2, [r3, #0]

HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);
 8001e20:	2301      	movs	r3, #1
 8001e22:	425b      	negs	r3, r3
 8001e24:	1df9      	adds	r1, r7, #7
 8001e26:	4804      	ldr	r0, [pc, #16]	@ (8001e38 <SPI_Write+0x24>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f003 fac4 	bl	80053b6 <HAL_SPI_Transmit>

}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	200008f4 	.word	0x200008f4

08001e3c <EPD_W21_WriteCMD>:



void EPD_W21_WriteCMD(uint8_t command)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	0002      	movs	r2, r0
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	701a      	strb	r2, [r3, #0]
	EPD_W21_CS_0;
 8001e48:	23a0      	movs	r3, #160	@ 0xa0
 8001e4a:	05db      	lsls	r3, r3, #23
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2108      	movs	r1, #8
 8001e50:	0018      	movs	r0, r3
 8001e52:	f001 fa86 	bl	8003362 <HAL_GPIO_WritePin>
	EPD_W21_DC_0;  // D/C#   0:command  1:data
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	01d9      	lsls	r1, r3, #7
 8001e5a:	23a0      	movs	r3, #160	@ 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	2200      	movs	r2, #0
 8001e60:	0018      	movs	r0, r3
 8001e62:	f001 fa7e 	bl	8003362 <HAL_GPIO_WritePin>
	SPI_Write(command);
 8001e66:	1dfb      	adds	r3, r7, #7
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7ff ffd2 	bl	8001e14 <SPI_Write>
	EPD_W21_CS_1;
 8001e70:	23a0      	movs	r3, #160	@ 0xa0
 8001e72:	05db      	lsls	r3, r3, #23
 8001e74:	2201      	movs	r2, #1
 8001e76:	2108      	movs	r1, #8
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fa72 	bl	8003362 <HAL_GPIO_WritePin>
}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b002      	add	sp, #8
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <EPD_W21_WriteDATA>:
//SPI write data
void EPD_W21_WriteDATA(uint8_t datas)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	701a      	strb	r2, [r3, #0]
	EPD_W21_CS_0;
 8001e92:	23a0      	movs	r3, #160	@ 0xa0
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	2200      	movs	r2, #0
 8001e98:	2108      	movs	r1, #8
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f001 fa61 	bl	8003362 <HAL_GPIO_WritePin>
	EPD_W21_DC_1;  // D/C#   0:command  1:data
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	01d9      	lsls	r1, r3, #7
 8001ea4:	23a0      	movs	r3, #160	@ 0xa0
 8001ea6:	05db      	lsls	r3, r3, #23
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f001 fa59 	bl	8003362 <HAL_GPIO_WritePin>
	SPI_Write(datas);
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff ffad 	bl	8001e14 <SPI_Write>
	EPD_W21_CS_1;
 8001eba:	23a0      	movs	r3, #160	@ 0xa0
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f001 fa4d 	bl	8003362 <HAL_GPIO_WritePin>
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	4cbf      	ldr	r4, [pc, #764]	@ (80021d0 <main+0x300>)
 8001ed4:	44a5      	add	sp, r4
 8001ed6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f000 fd10 	bl	80028fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f000 f9a4 	bl	8002228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f000 fb20 	bl	8002524 <MX_GPIO_Init>
  MX_ADC_Init();
 8001ee4:	f000 fa0e 	bl	8002304 <MX_ADC_Init>
  MX_I2C1_Init();
 8001ee8:	f000 fa70 	bl	80023cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001eec:	f000 fae2 	bl	80024b4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001ef0:	f000 faac 	bl	800244c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  uint8_t DrawMap[EPD_ARRAY];

  //memset(DrawMap,0xFF,sizeof(DrawMap));
  memcpy(DrawMap,Base_map,sizeof(Base_map));
 8001ef4:	4bb7      	ldr	r3, [pc, #732]	@ (80021d4 <main+0x304>)
 8001ef6:	2286      	movs	r2, #134	@ 0x86
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	19da      	adds	r2, r3, r7
 8001efe:	4bb6      	ldr	r3, [pc, #728]	@ (80021d8 <main+0x308>)
 8001f00:	0010      	movs	r0, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	23fd      	movs	r3, #253	@ 0xfd
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	001a      	movs	r2, r3
 8001f0a:	f003 fcb1 	bl	8005870 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(2000);
 8001f0e:	23fa      	movs	r3, #250	@ 0xfa
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	0018      	movs	r0, r3
 8001f14:	f000 fd62 	bl	80029dc <HAL_Delay>
//	    Write_nums(DrawMap, Zone_Write_nums(20,17,FONT_INFO,test.line,0,0,4) ); // Humidite
//	    Write_nums(DrawMap, Zone_Write_nums(34,65,FONT_CO2,test.max_x,1,1,4) ); // CO2
//	    //Write_nums(DrawMap, Zone_Write_nums(129,83,FONT_TIME,test.max_y,0,0,4) );
//
//
		EPD_Init(); //Full screen refresh initialization.
 8001f18:	f7ff fdbc 	bl	8001a94 <EPD_Init>
		EPD_WhiteScreen_ALL(DrawMap); //To Display one image using full screen refresh.
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fe9d 	bl	8001c60 <EPD_WhiteScreen_ALL>
		EPD_DeepSleep(); //Enter the sleep mode and please do not delete it, otherwise it will reduce the lifespan of the screen.
 8001f26:	f7ff fe75 	bl	8001c14 <EPD_DeepSleep>


    	//Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x21b1, 500); // high power

	    //Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x21ac, 500);
    	HAL_Delay(1000);
 8001f2a:	23fa      	movs	r3, #250	@ 0xfa
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 fd54 	bl	80029dc <HAL_Delay>

	    while(1)
	    {
	    	//Text_Z test =Zone_Write_nums(118,83,FONT_TIME,(uint16_t)2*i,0,0,2);

	    	HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_RESET);
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	01db      	lsls	r3, r3, #7
 8001f38:	48a8      	ldr	r0, [pc, #672]	@ (80021dc <main+0x30c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	f001 fa10 	bl	8003362 <HAL_GPIO_WritePin>
	    	HAL_Delay(1200);
 8001f42:	2396      	movs	r3, #150	@ 0x96
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fd48 	bl	80029dc <HAL_Delay>

	    	while(Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x21ac, 500)!= HAL_OK){HAL_Delay(100);};
 8001f4c:	e002      	b.n	8001f54 <main+0x84>
 8001f4e:	2064      	movs	r0, #100	@ 0x64
 8001f50:	f000 fd44 	bl	80029dc <HAL_Delay>
 8001f54:	23fa      	movs	r3, #250	@ 0xfa
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4aa1      	ldr	r2, [pc, #644]	@ (80021e0 <main+0x310>)
 8001f5a:	48a2      	ldr	r0, [pc, #648]	@ (80021e4 <main+0x314>)
 8001f5c:	21c4      	movs	r1, #196	@ 0xc4
 8001f5e:	f7ff fce4 	bl	800192a <Send_I2C_Command>
 8001f62:	1e03      	subs	r3, r0, #0
 8001f64:	d1f3      	bne.n	8001f4e <main+0x7e>

	    	HAL_StatusTypeDef ans1 = HAL_ERROR;
 8001f66:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <main+0x318>)
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]

	    	uint8_t response[9];

	    	while( ans1 == HAL_ERROR)
 8001f6e:	e01b      	b.n	8001fa8 <main+0xd8>
	    	{
	    	Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0xec05, 500);
 8001f70:	23fa      	movs	r3, #250	@ 0xfa
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4a9d      	ldr	r2, [pc, #628]	@ (80021ec <main+0x31c>)
 8001f76:	489b      	ldr	r0, [pc, #620]	@ (80021e4 <main+0x314>)
 8001f78:	21c4      	movs	r1, #196	@ 0xc4
 8001f7a:	f7ff fcd6 	bl	800192a <Send_I2C_Command>

	    	HAL_Delay(1);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 fd2c 	bl	80029dc <HAL_Delay>

	    	ans1 = HAL_I2C_Master_Receive(&hi2c1,SCD_ADDRESS, (uint8_t *) response,9, 500);
 8001f84:	4b98      	ldr	r3, [pc, #608]	@ (80021e8 <main+0x318>)
 8001f86:	18fc      	adds	r4, r7, r3
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4896      	ldr	r0, [pc, #600]	@ (80021e4 <main+0x314>)
 8001f8c:	23fa      	movs	r3, #250	@ 0xfa
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2309      	movs	r3, #9
 8001f94:	21c4      	movs	r1, #196	@ 0xc4
 8001f96:	f001 fb9f 	bl	80036d8 <HAL_I2C_Master_Receive>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	7023      	strb	r3, [r4, #0]
	    	HAL_Delay(500);
 8001f9e:	23fa      	movs	r3, #250	@ 0xfa
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f000 fd1a 	bl	80029dc <HAL_Delay>
	    	while( ans1 == HAL_ERROR)
 8001fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80021e8 <main+0x318>)
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d0de      	beq.n	8001f70 <main+0xa0>
	    	}

	    	Send_I2C_Command(&hi2c1, SCD_ADDRESS, (uint16_t ) 0x3f86, 500);
 8001fb2:	23fa      	movs	r3, #250	@ 0xfa
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4a8e      	ldr	r2, [pc, #568]	@ (80021f0 <main+0x320>)
 8001fb8:	488a      	ldr	r0, [pc, #552]	@ (80021e4 <main+0x314>)
 8001fba:	21c4      	movs	r1, #196	@ 0xc4
 8001fbc:	f7ff fcb5 	bl	800192a <Send_I2C_Command>
	    	HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin, GPIO_PIN_SET);
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	01db      	lsls	r3, r3, #7
 8001fc4:	4885      	ldr	r0, [pc, #532]	@ (80021dc <main+0x30c>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	0019      	movs	r1, r3
 8001fca:	f001 f9ca 	bl	8003362 <HAL_GPIO_WritePin>



			uint16_t CO2 = (response[0] << 8) | response[1];
 8001fce:	4b89      	ldr	r3, [pc, #548]	@ (80021f4 <main+0x324>)
 8001fd0:	2486      	movs	r4, #134	@ 0x86
 8001fd2:	0124      	lsls	r4, r4, #4
 8001fd4:	191b      	adds	r3, r3, r4
 8001fd6:	19db      	adds	r3, r3, r7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b85      	ldr	r3, [pc, #532]	@ (80021f4 <main+0x324>)
 8001fe0:	191b      	adds	r3, r3, r4
 8001fe2:	19db      	adds	r3, r3, r7
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b82      	ldr	r3, [pc, #520]	@ (80021f8 <main+0x328>)
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	801a      	strh	r2, [r3, #0]


			//HAL_I2C_Master_Receive(&hi2c1,SCD_ADDRESS, (uint8_t *) response,3, 500);


			float T =  (response[3] << 8) | response[4];
 8001ff2:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <main+0x324>)
 8001ff4:	191a      	adds	r2, r3, r4
 8001ff6:	19d3      	adds	r3, r2, r7
 8001ff8:	78db      	ldrb	r3, [r3, #3]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80021f4 <main+0x324>)
 8001ffe:	1912      	adds	r2, r2, r4
 8002000:	19d2      	adds	r2, r2, r7
 8002002:	7912      	ldrb	r2, [r2, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe fe46 	bl	8000c98 <__aeabi_i2f>
 800200c:	1c03      	adds	r3, r0, #0
 800200e:	4d7b      	ldr	r5, [pc, #492]	@ (80021fc <main+0x32c>)
 8002010:	197a      	adds	r2, r7, r5
 8002012:	6013      	str	r3, [r2, #0]

			T = -45 + 175*T/65536;
 8002014:	497a      	ldr	r1, [pc, #488]	@ (8002200 <main+0x330>)
 8002016:	197a      	adds	r2, r7, r5
 8002018:	6810      	ldr	r0, [r2, #0]
 800201a:	f7fe fb3b 	bl	8000694 <__aeabi_fmul>
 800201e:	1c03      	adds	r3, r0, #0
 8002020:	218f      	movs	r1, #143	@ 0x8f
 8002022:	05c9      	lsls	r1, r1, #23
 8002024:	1c18      	adds	r0, r3, #0
 8002026:	f7fe fa15 	bl	8000454 <__aeabi_fdiv>
 800202a:	1c03      	adds	r3, r0, #0
 800202c:	4975      	ldr	r1, [pc, #468]	@ (8002204 <main+0x334>)
 800202e:	1c18      	adds	r0, r3, #0
 8002030:	f7fe fc6e 	bl	8000910 <__aeabi_fsub>
 8002034:	1c03      	adds	r3, r0, #0
 8002036:	197a      	adds	r2, r7, r5
 8002038:	6013      	str	r3, [r2, #0]



			//HAL_I2C_Master_Receive(&hi2c1,SCD_ADDRESS, (uint8_t *) response,3, 500);

			float H =  (response[6] << 8) | response[7];
 800203a:	4b6e      	ldr	r3, [pc, #440]	@ (80021f4 <main+0x324>)
 800203c:	191a      	adds	r2, r3, r4
 800203e:	19d3      	adds	r3, r2, r7
 8002040:	799b      	ldrb	r3, [r3, #6]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4a6b      	ldr	r2, [pc, #428]	@ (80021f4 <main+0x324>)
 8002046:	1912      	adds	r2, r2, r4
 8002048:	19d2      	adds	r2, r2, r7
 800204a:	79d2      	ldrb	r2, [r2, #7]
 800204c:	4313      	orrs	r3, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe fe22 	bl	8000c98 <__aeabi_i2f>
 8002054:	1c03      	adds	r3, r0, #0
 8002056:	4e6c      	ldr	r6, [pc, #432]	@ (8002208 <main+0x338>)
 8002058:	19ba      	adds	r2, r7, r6
 800205a:	6013      	str	r3, [r2, #0]

			H = 100*H/65536;
 800205c:	496b      	ldr	r1, [pc, #428]	@ (800220c <main+0x33c>)
 800205e:	19ba      	adds	r2, r7, r6
 8002060:	6810      	ldr	r0, [r2, #0]
 8002062:	f7fe fb17 	bl	8000694 <__aeabi_fmul>
 8002066:	1c03      	adds	r3, r0, #0
 8002068:	218f      	movs	r1, #143	@ 0x8f
 800206a:	05c9      	lsls	r1, r1, #23
 800206c:	1c18      	adds	r0, r3, #0
 800206e:	f7fe f9f1 	bl	8000454 <__aeabi_fdiv>
 8002072:	1c03      	adds	r3, r0, #0
 8002074:	19ba      	adds	r2, r7, r6
 8002076:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin, GPIO_PIN_RESET);
 8002078:	23a0      	movs	r3, #160	@ 0xa0
 800207a:	05db      	lsls	r3, r3, #23
 800207c:	2200      	movs	r2, #0
 800207e:	2102      	movs	r1, #2
 8002080:	0018      	movs	r0, r3
 8002082:	f001 f96e 	bl	8003362 <HAL_GPIO_WritePin>

			HAL_Delay(200);
 8002086:	20c8      	movs	r0, #200	@ 0xc8
 8002088:	f000 fca8 	bl	80029dc <HAL_Delay>

			Display_Text(Zone_Write_nums(64,17,FONT_INFO,(int) T,0,0,4),DrawMap,Base_map );
 800208c:	197a      	adds	r2, r7, r5
 800208e:	6810      	ldr	r0, [r2, #0]
 8002090:	f7fe fde2 	bl	8000c58 <__aeabi_f2iz>
 8002094:	0003      	movs	r3, r0
 8002096:	b29a      	uxth	r2, r3
 8002098:	4c5d      	ldr	r4, [pc, #372]	@ (8002210 <main+0x340>)
 800209a:	1938      	adds	r0, r7, r4
 800209c:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <main+0x344>)
 800209e:	2104      	movs	r1, #4
 80020a0:	9104      	str	r1, [sp, #16]
 80020a2:	2100      	movs	r1, #0
 80020a4:	9103      	str	r1, [sp, #12]
 80020a6:	2100      	movs	r1, #0
 80020a8:	9102      	str	r1, [sp, #8]
 80020aa:	9201      	str	r2, [sp, #4]
 80020ac:	466a      	mov	r2, sp
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2211      	movs	r2, #17
 80020b6:	2140      	movs	r1, #64	@ 0x40
 80020b8:	f7ff f819 	bl	80010ee <Zone_Write_nums>
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	4a46      	ldr	r2, [pc, #280]	@ (80021d8 <main+0x308>)
 80020c0:	9205      	str	r2, [sp, #20]
 80020c2:	220c      	movs	r2, #12
 80020c4:	18ba      	adds	r2, r7, r2
 80020c6:	9204      	str	r2, [sp, #16]
 80020c8:	466a      	mov	r2, sp
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	3010      	adds	r0, #16
 80020d0:	0002      	movs	r2, r0
 80020d2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80020d4:	c131      	stmia	r1!, {r0, r4, r5}
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	600a      	str	r2, [r1, #0]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f7ff fb04 	bl	80016ee <Display_Text>
			Display_Text(Zone_Write_nums(34,65,FONT_CO2,CO2,0,1,5),DrawMap,Base_map);
 80020e6:	4c4c      	ldr	r4, [pc, #304]	@ (8002218 <main+0x348>)
 80020e8:	1938      	adds	r0, r7, r4
 80020ea:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <main+0x34c>)
 80020ec:	2205      	movs	r2, #5
 80020ee:	9204      	str	r2, [sp, #16]
 80020f0:	2201      	movs	r2, #1
 80020f2:	9203      	str	r2, [sp, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	9202      	str	r2, [sp, #8]
 80020f8:	493f      	ldr	r1, [pc, #252]	@ (80021f8 <main+0x328>)
 80020fa:	187a      	adds	r2, r7, r1
 80020fc:	8812      	ldrh	r2, [r2, #0]
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	466a      	mov	r2, sp
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2241      	movs	r2, #65	@ 0x41
 800210a:	2122      	movs	r1, #34	@ 0x22
 800210c:	f7fe ffef 	bl	80010ee <Zone_Write_nums>
 8002110:	193b      	adds	r3, r7, r4
 8002112:	4a31      	ldr	r2, [pc, #196]	@ (80021d8 <main+0x308>)
 8002114:	9205      	str	r2, [sp, #20]
 8002116:	220c      	movs	r2, #12
 8002118:	18ba      	adds	r2, r7, r2
 800211a:	9204      	str	r2, [sp, #16]
 800211c:	466a      	mov	r2, sp
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	3010      	adds	r0, #16
 8002124:	0002      	movs	r2, r0
 8002126:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002128:	c131      	stmia	r1!, {r0, r4, r5}
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	600a      	str	r2, [r1, #0]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f7ff fada 	bl	80016ee <Display_Text>
			Display_Text(Zone_Write_nums(20,17,FONT_INFO,(int) H,0,0,4),DrawMap,Base_map );
 800213a:	19bb      	adds	r3, r7, r6
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f7fe fd8b 	bl	8000c58 <__aeabi_f2iz>
 8002142:	0003      	movs	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	4c36      	ldr	r4, [pc, #216]	@ (8002220 <main+0x350>)
 8002148:	1938      	adds	r0, r7, r4
 800214a:	4b32      	ldr	r3, [pc, #200]	@ (8002214 <main+0x344>)
 800214c:	2104      	movs	r1, #4
 800214e:	9104      	str	r1, [sp, #16]
 8002150:	2100      	movs	r1, #0
 8002152:	9103      	str	r1, [sp, #12]
 8002154:	2100      	movs	r1, #0
 8002156:	9102      	str	r1, [sp, #8]
 8002158:	9201      	str	r2, [sp, #4]
 800215a:	466a      	mov	r2, sp
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	6011      	str	r1, [r2, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2211      	movs	r2, #17
 8002164:	2114      	movs	r1, #20
 8002166:	f7fe ffc2 	bl	80010ee <Zone_Write_nums>
 800216a:	193b      	adds	r3, r7, r4
 800216c:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <main+0x308>)
 800216e:	9205      	str	r2, [sp, #20]
 8002170:	220c      	movs	r2, #12
 8002172:	18ba      	adds	r2, r7, r2
 8002174:	9204      	str	r2, [sp, #16]
 8002176:	466a      	mov	r2, sp
 8002178:	0011      	movs	r1, r2
 800217a:	001a      	movs	r2, r3
 800217c:	3210      	adds	r2, #16
 800217e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002180:	c131      	stmia	r1!, {r0, r4, r5}
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	600a      	str	r2, [r1, #0]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f7ff faae 	bl	80016ee <Display_Text>
			EPD_DeepSleep();
 8002192:	f7ff fd3f 	bl	8001c14 <EPD_DeepSleep>

			HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin, GPIO_PIN_SET);
 8002196:	23a0      	movs	r3, #160	@ 0xa0
 8002198:	05db      	lsls	r3, r3, #23
 800219a:	2201      	movs	r2, #1
 800219c:	2102      	movs	r1, #2
 800219e:	0018      	movs	r0, r3
 80021a0:	f001 f8df 	bl	8003362 <HAL_GPIO_WritePin>
 //x,y,DATA-A~E,number,Resolution 32*32
	    	//EPD_WhiteScreen_ALL(DrawMap);

	    	//HAL_Delay(5000);

            HAL_SuspendTick();
 80021a4:	f000 fc3e 	bl	8002a24 <HAL_SuspendTick>
            HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 40, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80021a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <main+0x354>)
 80021aa:	2204      	movs	r2, #4
 80021ac:	2128      	movs	r1, #40	@ 0x28
 80021ae:	0018      	movs	r0, r3
 80021b0:	f002 ff04 	bl	8004fbc <HAL_RTCEx_SetWakeUpTimer_IT>

            /* Enter STOP 2 mode */
            HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,  PWR_STOPENTRY_WFI);
 80021b4:	2101      	movs	r1, #1
 80021b6:	2001      	movs	r0, #1
 80021b8:	f001 fedc 	bl	8003f74 <HAL_PWR_EnterSTOPMode>
            //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
            HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <main+0x354>)
 80021be:	0018      	movs	r0, r3
 80021c0:	f002 ffd4 	bl	800516c <HAL_RTCEx_DeactivateWakeUpTimer>
            SystemClock_Config();
 80021c4:	f000 f830 	bl	8002228 <SystemClock_Config>
         HAL_ResumeTick();
 80021c8:	f000 fc3a 	bl	8002a40 <HAL_ResumeTick>
	    {
 80021cc:	e6b2      	b.n	8001f34 <main+0x64>
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	fffff784 	.word	0xfffff784
 80021d4:	fffff7ac 	.word	0xfffff7ac
 80021d8:	20000000 	.word	0x20000000
 80021dc:	50000800 	.word	0x50000800
 80021e0:	000021ac 	.word	0x000021ac
 80021e4:	2000087c 	.word	0x2000087c
 80021e8:	0000085f 	.word	0x0000085f
 80021ec:	0000ec05 	.word	0x0000ec05
 80021f0:	00003f86 	.word	0x00003f86
 80021f4:	fffff7a0 	.word	0xfffff7a0
 80021f8:	0000085c 	.word	0x0000085c
 80021fc:	00000858 	.word	0x00000858
 8002200:	432f0000 	.word	0x432f0000
 8002204:	42340000 	.word	0x42340000
 8002208:	00000854 	.word	0x00000854
 800220c:	42c80000 	.word	0x42c80000
 8002210:	000007f4 	.word	0x000007f4
 8002214:	200007f4 	.word	0x200007f4
 8002218:	00000814 	.word	0x00000814
 800221c:	200007ec 	.word	0x200007ec
 8002220:	00000834 	.word	0x00000834
 8002224:	200008d0 	.word	0x200008d0

08002228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b099      	sub	sp, #100	@ 0x64
 800222c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222e:	242c      	movs	r4, #44	@ 0x2c
 8002230:	193b      	adds	r3, r7, r4
 8002232:	0018      	movs	r0, r3
 8002234:	2334      	movs	r3, #52	@ 0x34
 8002236:	001a      	movs	r2, r3
 8002238:	2100      	movs	r1, #0
 800223a:	f003 faed 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223e:	2318      	movs	r3, #24
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	0018      	movs	r0, r3
 8002244:	2314      	movs	r3, #20
 8002246:	001a      	movs	r2, r3
 8002248:	2100      	movs	r1, #0
 800224a:	f003 fae5 	bl	8005818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800224e:	003b      	movs	r3, r7
 8002250:	0018      	movs	r0, r3
 8002252:	2318      	movs	r3, #24
 8002254:	001a      	movs	r2, r3
 8002256:	2100      	movs	r1, #0
 8002258:	f003 fade 	bl	8005818 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225c:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <SystemClock_Config+0xd4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <SystemClock_Config+0xd8>)
 8002262:	401a      	ands	r2, r3
 8002264:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <SystemClock_Config+0xd4>)
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0109      	lsls	r1, r1, #4
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800226e:	0021      	movs	r1, r4
 8002270:	187b      	adds	r3, r7, r1
 8002272:	220a      	movs	r2, #10
 8002274:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2201      	movs	r2, #1
 800227a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227c:	187b      	adds	r3, r7, r1
 800227e:	2210      	movs	r2, #16
 8002280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002282:	187b      	adds	r3, r7, r1
 8002284:	2201      	movs	r2, #1
 8002286:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002288:	187b      	adds	r3, r7, r1
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228e:	187b      	adds	r3, r7, r1
 8002290:	0018      	movs	r0, r3
 8002292:	f001 fecb 	bl	800402c <HAL_RCC_OscConfig>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800229a:	f000 f9db 	bl	8002654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229e:	2118      	movs	r1, #24
 80022a0:	187b      	adds	r3, r7, r1
 80022a2:	220f      	movs	r2, #15
 80022a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2100      	movs	r1, #0
 80022c2:	0018      	movs	r0, r3
 80022c4:	f002 fa2e 	bl	8004724 <HAL_RCC_ClockConfig>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d001      	beq.n	80022d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80022cc:	f000 f9c2 	bl	8002654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 80022d0:	003b      	movs	r3, r7
 80022d2:	2228      	movs	r2, #40	@ 0x28
 80022d4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022d6:	003b      	movs	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022dc:	003b      	movs	r3, r7
 80022de:	2280      	movs	r2, #128	@ 0x80
 80022e0:	0292      	lsls	r2, r2, #10
 80022e2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e4:	003b      	movs	r3, r7
 80022e6:	0018      	movs	r0, r3
 80022e8:	f002 fc0a 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d001      	beq.n	80022f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80022f0:	f000 f9b0 	bl	8002654 <Error_Handler>
  }
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b019      	add	sp, #100	@ 0x64
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	40007000 	.word	0x40007000
 8002300:	ffffe7ff 	.word	0xffffe7ff

08002304 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800230a:	003b      	movs	r3, r7
 800230c:	0018      	movs	r0, r3
 800230e:	2308      	movs	r3, #8
 8002310:	001a      	movs	r2, r3
 8002312:	2100      	movs	r1, #0
 8002314:	f003 fa80 	bl	8005818 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002318:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800231a:	4a2b      	ldr	r2, [pc, #172]	@ (80023c8 <MX_ADC_Init+0xc4>)
 800231c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800231e:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002320:	2200      	movs	r2, #0
 8002322:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002326:	22c0      	movs	r2, #192	@ 0xc0
 8002328:	0612      	lsls	r2, r2, #24
 800232a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800232c:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002334:	2200      	movs	r2, #0
 8002336:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002338:	4b22      	ldr	r3, [pc, #136]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800233a:	2201      	movs	r2, #1
 800233c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233e:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002344:	4b1f      	ldr	r3, [pc, #124]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002346:	2220      	movs	r2, #32
 8002348:	2100      	movs	r1, #0
 800234a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800234c:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800234e:	2221      	movs	r2, #33	@ 0x21
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800235a:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800235c:	22c2      	movs	r2, #194	@ 0xc2
 800235e:	32ff      	adds	r2, #255	@ 0xff
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002364:	222c      	movs	r2, #44	@ 0x2c
 8002366:	2100      	movs	r1, #0
 8002368:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800236a:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800236c:	2204      	movs	r2, #4
 800236e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002372:	2200      	movs	r2, #0
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800237e:	2200      	movs	r2, #0
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <MX_ADC_Init+0xc0>)
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002388:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <MX_ADC_Init+0xc0>)
 800238a:	0018      	movs	r0, r3
 800238c:	f000 fb66 	bl	8002a5c <HAL_ADC_Init>
 8002390:	1e03      	subs	r3, r0, #0
 8002392:	d001      	beq.n	8002398 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002394:	f000 f95e 	bl	8002654 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002398:	003b      	movs	r3, r7
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800239e:	003b      	movs	r3, r7
 80023a0:	2280      	movs	r2, #128	@ 0x80
 80023a2:	0152      	lsls	r2, r2, #5
 80023a4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023a6:	003a      	movs	r2, r7
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_ADC_Init+0xc0>)
 80023aa:	0011      	movs	r1, r2
 80023ac:	0018      	movs	r0, r3
 80023ae:	f000 fcc9 	bl	8002d44 <HAL_ADC_ConfigChannel>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80023b6:	f000 f94d 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	20000820 	.word	0x20000820
 80023c8:	40012400 	.word	0x40012400

080023cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <MX_I2C1_Init+0x78>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <MX_I2C1_Init+0x7c>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e2:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b15      	ldr	r3, [pc, #84]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fa:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <MX_I2C1_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <MX_I2C1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <MX_I2C1_Init+0x74>)
 8002408:	0018      	movs	r0, r3
 800240a:	f000 ffc7 	bl	800339c <HAL_I2C_Init>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d001      	beq.n	8002416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002412:	f000 f91f 	bl	8002654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <MX_I2C1_Init+0x74>)
 8002418:	2100      	movs	r1, #0
 800241a:	0018      	movs	r0, r3
 800241c:	f001 fd12 	bl	8003e44 <HAL_I2CEx_ConfigAnalogFilter>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002424:	f000 f916 	bl	8002654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <MX_I2C1_Init+0x74>)
 800242a:	2100      	movs	r1, #0
 800242c:	0018      	movs	r0, r3
 800242e:	f001 fd55 	bl	8003edc <HAL_I2CEx_ConfigDigitalFilter>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d001      	beq.n	800243a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002436:	f000 f90d 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	2000087c 	.word	0x2000087c
 8002444:	40005400 	.word	0x40005400
 8002448:	00303d5b 	.word	0x00303d5b

0800244c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <MX_RTC_Init+0x60>)
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <MX_RTC_Init+0x64>)
 8002454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <MX_RTC_Init+0x60>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800245c:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <MX_RTC_Init+0x60>)
 800245e:	227f      	movs	r2, #127	@ 0x7f
 8002460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002462:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <MX_RTC_Init+0x60>)
 8002464:	22ff      	movs	r2, #255	@ 0xff
 8002466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002468:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <MX_RTC_Init+0x60>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <MX_RTC_Init+0x60>)
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <MX_RTC_Init+0x60>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800247a:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <MX_RTC_Init+0x60>)
 800247c:	2200      	movs	r2, #0
 800247e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <MX_RTC_Init+0x60>)
 8002482:	0018      	movs	r0, r3
 8002484:	f002 fc68 	bl	8004d58 <HAL_RTC_Init>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800248c:	f000 f8e2 	bl	8002654 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002490:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <MX_RTC_Init+0x60>)
 8002492:	2204      	movs	r2, #4
 8002494:	2105      	movs	r1, #5
 8002496:	0018      	movs	r0, r3
 8002498:	f002 fd90 	bl	8004fbc <HAL_RTCEx_SetWakeUpTimer_IT>
 800249c:	1e03      	subs	r3, r0, #0
 800249e:	d001      	beq.n	80024a4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80024a0:	f000 f8d8 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	200008d0 	.word	0x200008d0
 80024b0:	40002800 	.word	0x40002800

080024b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024b8:	4b18      	ldr	r3, [pc, #96]	@ (800251c <MX_SPI1_Init+0x68>)
 80024ba:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <MX_SPI1_Init+0x6c>)
 80024bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_SPI1_Init+0x68>)
 80024c0:	2282      	movs	r2, #130	@ 0x82
 80024c2:	0052      	lsls	r2, r2, #1
 80024c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_SPI1_Init+0x68>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <MX_SPI1_Init+0x68>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_SPI1_Init+0x68>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <MX_SPI1_Init+0x68>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_SPI1_Init+0x68>)
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <MX_SPI1_Init+0x68>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <MX_SPI1_Init+0x68>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <MX_SPI1_Init+0x68>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f8:	4b08      	ldr	r3, [pc, #32]	@ (800251c <MX_SPI1_Init+0x68>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024fe:	4b07      	ldr	r3, [pc, #28]	@ (800251c <MX_SPI1_Init+0x68>)
 8002500:	2207      	movs	r2, #7
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <MX_SPI1_Init+0x68>)
 8002506:	0018      	movs	r0, r3
 8002508:	f002 fecc 	bl	80052a4 <HAL_SPI_Init>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d001      	beq.n	8002514 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002510:	f000 f8a0 	bl	8002654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002514:	46c0      	nop			@ (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	200008f4 	.word	0x200008f4
 8002520:	40013000 	.word	0x40013000

08002524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252a:	240c      	movs	r4, #12
 800252c:	193b      	adds	r3, r7, r4
 800252e:	0018      	movs	r0, r3
 8002530:	2314      	movs	r3, #20
 8002532:	001a      	movs	r2, r3
 8002534:	2100      	movs	r1, #0
 8002536:	f003 f96f 	bl	8005818 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	4b42      	ldr	r3, [pc, #264]	@ (8002644 <MX_GPIO_Init+0x120>)
 800253c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253e:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002540:	2104      	movs	r1, #4
 8002542:	430a      	orrs	r2, r1
 8002544:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	2204      	movs	r2, #4
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b3c      	ldr	r3, [pc, #240]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002556:	4b3b      	ldr	r3, [pc, #236]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800255e:	4b39      	ldr	r3, [pc, #228]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002562:	2201      	movs	r2, #1
 8002564:	4013      	ands	r3, r2
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <MX_GPIO_Init+0x120>)
 800256c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256e:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002570:	2102      	movs	r1, #2
 8002572:	430a      	orrs	r2, r1
 8002574:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002576:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <MX_GPIO_Init+0x120>)
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CO2_PWR_Pin|Screen_CS_Pin, GPIO_PIN_RESET);
 8002582:	23c0      	movs	r3, #192	@ 0xc0
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4830      	ldr	r0, [pc, #192]	@ (8002648 <MX_GPIO_Init+0x124>)
 8002588:	2200      	movs	r2, #0
 800258a:	0019      	movs	r1, r3
 800258c:	f000 fee9 	bl	8003362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Screen_PWR_Pin|SD_PWR_Pin|SD_CS_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8002590:	492e      	ldr	r1, [pc, #184]	@ (800264c <MX_GPIO_Init+0x128>)
 8002592:	23a0      	movs	r3, #160	@ 0xa0
 8002594:	05db      	lsls	r3, r3, #23
 8002596:	2200      	movs	r2, #0
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fee2 	bl	8003362 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Screen_Res_GPIO_Port, Screen_Res_Pin, GPIO_PIN_RESET);
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <MX_GPIO_Init+0x12c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	2102      	movs	r1, #2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fedc 	bl	8003362 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CO2_PWR_Pin Screen_CS_Pin */
  GPIO_InitStruct.Pin = CO2_PWR_Pin|Screen_CS_Pin;
 80025aa:	193b      	adds	r3, r7, r4
 80025ac:	22c0      	movs	r2, #192	@ 0xc0
 80025ae:	0212      	lsls	r2, r2, #8
 80025b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	2201      	movs	r2, #1
 80025b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	4a20      	ldr	r2, [pc, #128]	@ (8002648 <MX_GPIO_Init+0x124>)
 80025c8:	0019      	movs	r1, r3
 80025ca:	0010      	movs	r0, r2
 80025cc:	f000 fd3e 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : Screen_PWR_Pin SD_PWR_Pin SD_CS_Pin PA14 */
  GPIO_InitStruct.Pin = Screen_PWR_Pin|SD_PWR_Pin|SD_CS_Pin|GPIO_PIN_14;
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <MX_GPIO_Init+0x128>)
 80025d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2201      	movs	r2, #1
 80025da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	193a      	adds	r2, r7, r4
 80025ea:	23a0      	movs	r3, #160	@ 0xa0
 80025ec:	05db      	lsls	r3, r3, #23
 80025ee:	0011      	movs	r1, r2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 fd2b 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Busy_Pin */
  GPIO_InitStruct.Pin = Screen_Busy_Pin;
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	2210      	movs	r2, #16
 80025fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002602:	193b      	adds	r3, r7, r4
 8002604:	2201      	movs	r2, #1
 8002606:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Screen_Busy_GPIO_Port, &GPIO_InitStruct);
 8002608:	193a      	adds	r2, r7, r4
 800260a:	23a0      	movs	r3, #160	@ 0xa0
 800260c:	05db      	lsls	r3, r3, #23
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f000 fd1b 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : Screen_Res_Pin */
  GPIO_InitStruct.Pin = Screen_Res_Pin;
 8002616:	0021      	movs	r1, r4
 8002618:	187b      	adds	r3, r7, r1
 800261a:	2202      	movs	r2, #2
 800261c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2201      	movs	r2, #1
 8002622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Screen_Res_GPIO_Port, &GPIO_InitStruct);
 8002630:	187b      	adds	r3, r7, r1
 8002632:	4a07      	ldr	r2, [pc, #28]	@ (8002650 <MX_GPIO_Init+0x12c>)
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f000 fd08 	bl	800304c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b009      	add	sp, #36	@ 0x24
 8002642:	bd90      	pop	{r4, r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	50000800 	.word	0x50000800
 800264c:	0000400e 	.word	0x0000400e
 8002650:	50000400 	.word	0x50000400

08002654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	e7fd      	b.n	800265c <Error_Handler+0x8>

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_MspInit+0x24>)
 8002666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_MspInit+0x24>)
 800266a:	2101      	movs	r1, #1
 800266c:	430a      	orrs	r2, r1
 800266e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <HAL_MspInit+0x24>)
 8002672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_MspInit+0x24>)
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	0549      	lsls	r1, r1, #21
 800267a:	430a      	orrs	r2, r1
 800267c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002690:	240c      	movs	r4, #12
 8002692:	193b      	adds	r3, r7, r4
 8002694:	0018      	movs	r0, r3
 8002696:	2314      	movs	r3, #20
 8002698:	001a      	movs	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	f003 f8bc 	bl	8005818 <memset>
  if(hadc->Instance==ADC1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a14      	ldr	r2, [pc, #80]	@ (80026f8 <HAL_ADC_MspInit+0x70>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d122      	bne.n	80026f0 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026aa:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <HAL_ADC_MspInit+0x74>)
 80026ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <HAL_ADC_MspInit+0x74>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0089      	lsls	r1, r1, #2
 80026b4:	430a      	orrs	r2, r1
 80026b6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <HAL_ADC_MspInit+0x74>)
 80026ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_ADC_MspInit+0x74>)
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_ADC_MspInit+0x74>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0-CK_IN     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2203      	movs	r2, #3
 80026da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	193a      	adds	r2, r7, r4
 80026e4:	23a0      	movs	r3, #160	@ 0xa0
 80026e6:	05db      	lsls	r3, r3, #23
 80026e8:	0011      	movs	r1, r2
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 fcae 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026f0:	46c0      	nop			@ (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b009      	add	sp, #36	@ 0x24
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	40012400 	.word	0x40012400
 80026fc:	40021000 	.word	0x40021000

08002700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	240c      	movs	r4, #12
 800270a:	193b      	adds	r3, r7, r4
 800270c:	0018      	movs	r0, r3
 800270e:	2314      	movs	r3, #20
 8002710:	001a      	movs	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	f003 f880 	bl	8005818 <memset>
  if(hi2c->Instance==I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_I2C_MspInit+0x80>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12a      	bne.n	8002778 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_I2C_MspInit+0x84>)
 8002724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002726:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HAL_I2C_MspInit+0x84>)
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_I2C_MspInit+0x84>)
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800273a:	193b      	adds	r3, r7, r4
 800273c:	22c0      	movs	r2, #192	@ 0xc0
 800273e:	00d2      	lsls	r2, r2, #3
 8002740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002742:	0021      	movs	r1, r4
 8002744:	187b      	adds	r3, r7, r1
 8002746:	2212      	movs	r2, #18
 8002748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2201      	movs	r2, #1
 800274e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2203      	movs	r2, #3
 8002754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2201      	movs	r2, #1
 800275a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	187a      	adds	r2, r7, r1
 800275e:	23a0      	movs	r3, #160	@ 0xa0
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	0011      	movs	r1, r2
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fc71 	bl	800304c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_I2C_MspInit+0x84>)
 800276c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_I2C_MspInit+0x84>)
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	0389      	lsls	r1, r1, #14
 8002774:	430a      	orrs	r2, r1
 8002776:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b009      	add	sp, #36	@ 0x24
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	40005400 	.word	0x40005400
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_RTC_MspInit+0x38>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10e      	bne.n	80027b8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_RTC_MspInit+0x3c>)
 800279c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RTC_MspInit+0x3c>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	02c9      	lsls	r1, r1, #11
 80027a4:	430a      	orrs	r2, r1
 80027a6:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2002      	movs	r0, #2
 80027ae:	f000 fc1b 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f000 fc2d 	bl	8003012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027b8:	46c0      	nop			@ (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40002800 	.word	0x40002800
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	240c      	movs	r4, #12
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	0018      	movs	r0, r3
 80027d6:	2314      	movs	r3, #20
 80027d8:	001a      	movs	r2, r3
 80027da:	2100      	movs	r1, #0
 80027dc:	f003 f81c 	bl	8005818 <memset>
  if(hspi->Instance==SPI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a18      	ldr	r2, [pc, #96]	@ (8002848 <HAL_SPI_MspInit+0x80>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d129      	bne.n	800283e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027ea:	4b18      	ldr	r3, [pc, #96]	@ (800284c <HAL_SPI_MspInit+0x84>)
 80027ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_SPI_MspInit+0x84>)
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	0149      	lsls	r1, r1, #5
 80027f4:	430a      	orrs	r2, r1
 80027f6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f8:	4b14      	ldr	r3, [pc, #80]	@ (800284c <HAL_SPI_MspInit+0x84>)
 80027fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027fc:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_SPI_MspInit+0x84>)
 80027fe:	2101      	movs	r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_SPI_MspInit+0x84>)
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002810:	0021      	movs	r1, r4
 8002812:	187b      	adds	r3, r7, r1
 8002814:	22e0      	movs	r2, #224	@ 0xe0
 8002816:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2202      	movs	r2, #2
 800281c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2203      	movs	r2, #3
 8002828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	187a      	adds	r2, r7, r1
 8002832:	23a0      	movs	r3, #160	@ 0xa0
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fc07 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b009      	add	sp, #36	@ 0x24
 8002844:	bd90      	pop	{r4, r7, pc}
 8002846:	46c0      	nop			@ (mov r8, r8)
 8002848:	40013000 	.word	0x40013000
 800284c:	40021000 	.word	0x40021000

08002850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	e7fd      	b.n	8002854 <NMI_Handler+0x4>

08002858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285c:	46c0      	nop			@ (mov r8, r8)
 800285e:	e7fd      	b.n	800285c <HardFault_Handler+0x4>

08002860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002878:	f000 f894 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <RTC_IRQHandler+0x14>)
 800288a:	0018      	movs	r0, r3
 800288c:	f002 fcd2 	bl	8005234 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	200008d0 	.word	0x200008d0

0800289c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80028a8:	480d      	ldr	r0, [pc, #52]	@ (80028e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80028aa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028ac:	f7ff fff6 	bl	800289c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b2:	490d      	ldr	r1, [pc, #52]	@ (80028e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b4:	4a0d      	ldr	r2, [pc, #52]	@ (80028ec <LoopForever+0xe>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	@ (80028f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c8:	4c0a      	ldr	r4, [pc, #40]	@ (80028f4 <LoopForever+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d6:	f002 ffa7 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028da:	f7ff faf9 	bl	8001ed0 <main>

080028de <LoopForever>:

LoopForever:
    b LoopForever
 80028de:	e7fe      	b.n	80028de <LoopForever>
   ldr   r0, =_estack
 80028e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e8:	20000804 	.word	0x20000804
  ldr r2, =_sidata
 80028ec:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 80028f0:	20000804 	.word	0x20000804
  ldr r4, =_ebss
 80028f4:	20000950 	.word	0x20000950

080028f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC1_COMP_IRQHandler>
	...

080028fc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002908:	4b0b      	ldr	r3, [pc, #44]	@ (8002938 <HAL_Init+0x3c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_Init+0x3c>)
 800290e:	2140      	movs	r1, #64	@ 0x40
 8002910:	430a      	orrs	r2, r1
 8002912:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002914:	2003      	movs	r0, #3
 8002916:	f000 f811 	bl	800293c <HAL_InitTick>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d003      	beq.n	8002926 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e001      	b.n	800292a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002926:	f7ff fe9b 	bl	8002660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800292a:	1dfb      	adds	r3, r7, #7
 800292c:	781b      	ldrb	r3, [r3, #0]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002944:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <HAL_InitTick+0x5c>)
 8002946:	681c      	ldr	r4, [r3, #0]
 8002948:	4b14      	ldr	r3, [pc, #80]	@ (800299c <HAL_InitTick+0x60>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	0019      	movs	r1, r3
 800294e:	23fa      	movs	r3, #250	@ 0xfa
 8002950:	0098      	lsls	r0, r3, #2
 8002952:	f7fd fbd9 	bl	8000108 <__udivsi3>
 8002956:	0003      	movs	r3, r0
 8002958:	0019      	movs	r1, r3
 800295a:	0020      	movs	r0, r4
 800295c:	f7fd fbd4 	bl	8000108 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	0018      	movs	r0, r3
 8002964:	f000 fb65 	bl	8003032 <HAL_SYSTICK_Config>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e00f      	b.n	8002990 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b03      	cmp	r3, #3
 8002974:	d80b      	bhi.n	800298e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	2301      	movs	r3, #1
 800297a:	425b      	negs	r3, r3
 800297c:	2200      	movs	r2, #0
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fb32 	bl	8002fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_InitTick+0x64>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	b003      	add	sp, #12
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	200007e8 	.word	0x200007e8
 800299c:	20000800 	.word	0x20000800
 80029a0:	200007fc 	.word	0x200007fc

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_IncTick+0x1c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	001a      	movs	r2, r3
 80029ae:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_IncTick+0x20>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	18d2      	adds	r2, r2, r3
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_IncTick+0x20>)
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	46c0      	nop			@ (mov r8, r8)
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	20000800 	.word	0x20000800
 80029c4:	2000094c 	.word	0x2000094c

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <HAL_GetTick+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	2000094c 	.word	0x2000094c

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	d005      	beq.n	8002a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a20 <HAL_Delay+0x44>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	001a      	movs	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	f7ff ffe0 	bl	80029c8 <HAL_GetTick>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d8f7      	bhi.n	8002a04 <HAL_Delay+0x28>
  {
  }
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	20000800 	.word	0x20000800

08002a24 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002a28:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <HAL_SuspendTick+0x18>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_SuspendTick+0x18>)
 8002a2e:	2102      	movs	r1, #2
 8002a30:	438a      	bics	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	e000e010 	.word	0xe000e010

08002a40 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <HAL_ResumeTick+0x18>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <HAL_ResumeTick+0x18>)
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e159      	b.n	8002d22 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2250      	movs	r2, #80	@ 0x50
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff fdfe 	bl	8002688 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	2210      	movs	r2, #16
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d005      	beq.n	8002aa4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002aa2:	d00b      	beq.n	8002abc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2250      	movs	r2, #80	@ 0x50
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e132      	b.n	8002d22 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	4a9a      	ldr	r2, [pc, #616]	@ (8002d2c <HAL_ADC_Init+0x2d0>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_ADC_Init+0x90>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_Init+0x90>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_ADC_Init+0x92>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d149      	bne.n	8002b86 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	23c0      	movs	r3, #192	@ 0xc0
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d00b      	beq.n	8002b16 <HAL_ADC_Init+0xba>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	2380      	movs	r3, #128	@ 0x80
 8002b04:	05db      	lsls	r3, r3, #23
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d005      	beq.n	8002b16 <HAL_ADC_Init+0xba>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d111      	bne.n	8002b3a <HAL_ADC_Init+0xde>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0092      	lsls	r2, r2, #2
 8002b22:	0892      	lsrs	r2, r2, #2
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6919      	ldr	r1, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	e014      	b.n	8002b64 <HAL_ADC_Init+0x108>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0092      	lsls	r2, r2, #2
 8002b46:	0892      	lsrs	r2, r2, #2
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	4b79      	ldr	r3, [pc, #484]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b50:	4978      	ldr	r1, [pc, #480]	@ (8002d34 <HAL_ADC_Init+0x2d8>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	4b76      	ldr	r3, [pc, #472]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4b74      	ldr	r3, [pc, #464]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2118      	movs	r1, #24
 8002b70:	438a      	bics	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002b86:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b69      	ldr	r3, [pc, #420]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b8c:	496a      	ldr	r1, [pc, #424]	@ (8002d38 <HAL_ADC_Init+0x2dc>)
 8002b8e:	400a      	ands	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002b92:	4b67      	ldr	r3, [pc, #412]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	065a      	lsls	r2, r3, #25
 8002b9c:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <HAL_ADC_Init+0x2d4>)
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	4013      	ands	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	0549      	lsls	r1, r1, #21
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	495b      	ldr	r1, [pc, #364]	@ (8002d3c <HAL_ADC_Init+0x2e0>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68d9      	ldr	r1, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_Init+0x18c>
 8002be4:	2304      	movs	r3, #4
 8002be6:	e000      	b.n	8002bea <HAL_ADC_Init+0x18e>
 8002be8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002bea:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2020      	movs	r0, #32
 8002bf0:	5c1b      	ldrb	r3, [r3, r0]
 8002bf2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002bf4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	202c      	movs	r0, #44	@ 0x2c
 8002bfa:	5c1b      	ldrb	r3, [r3, r0]
 8002bfc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bfe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002c04:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002c0c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002c14:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c22:	23c2      	movs	r3, #194	@ 0xc2
 8002c24:	33ff      	adds	r3, #255	@ 0xff
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d00b      	beq.n	8002c42 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68d9      	ldr	r1, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2221      	movs	r2, #33	@ 0x21
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d11a      	bne.n	8002c82 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	5c9b      	ldrb	r3, [r3, r2]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	0249      	lsls	r1, r1, #9
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	e00b      	b.n	8002c82 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6e:	2220      	movs	r2, #32
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d11f      	bne.n	8002cca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	492a      	ldr	r1, [pc, #168]	@ (8002d40 <HAL_ADC_Init+0x2e4>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6919      	ldr	r1, [r3, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002ca8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002cae:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	611a      	str	r2, [r3, #16]
 8002cc8:	e00e      	b.n	8002ce8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2107      	movs	r1, #7
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6959      	ldr	r1, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	2203      	movs	r2, #3
 8002d16:	4393      	bics	r3, r2
 8002d18:	2201      	movs	r2, #1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	fffffefd 	.word	0xfffffefd
 8002d30:	40012708 	.word	0x40012708
 8002d34:	ffc3ffff 	.word	0xffc3ffff
 8002d38:	fdffffff 	.word	0xfdffffff
 8002d3c:	fffe0219 	.word	0xfffe0219
 8002d40:	fffffc03 	.word	0xfffffc03

08002d44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2250      	movs	r2, #80	@ 0x50
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x18>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e06c      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xf2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2250      	movs	r2, #80	@ 0x50
 8002d60:	2101      	movs	r1, #1
 8002d62:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d74:	2220      	movs	r2, #32
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2250      	movs	r2, #80	@ 0x50
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e056      	b.n	8002e36 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <HAL_ADC_ConfigChannel+0xfc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d028      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	035b      	lsls	r3, r3, #13
 8002d9e:	0b5a      	lsrs	r2, r3, #13
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	02db      	lsls	r3, r3, #11
 8002db0:	4013      	ands	r3, r2
 8002db2:	d009      	beq.n	8002dc8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002db4:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	0409      	lsls	r1, r1, #16
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002dc2:	200a      	movs	r0, #10
 8002dc4:	f000 f844 	bl	8002e50 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	029b      	lsls	r3, r3, #10
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d02b      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	03c9      	lsls	r1, r1, #15
 8002dde:	430a      	orrs	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e023      	b.n	8002e2c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	035b      	lsls	r3, r3, #13
 8002df0:	0b5b      	lsrs	r3, r3, #13
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	02db      	lsls	r3, r3, #11
 8002e04:	4013      	ands	r3, r2
 8002e06:	d005      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002e0e:	490e      	ldr	r1, [pc, #56]	@ (8002e48 <HAL_ADC_ConfigChannel+0x104>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d005      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <HAL_ADC_ConfigChannel+0x100>)
 8002e26:	4909      	ldr	r1, [pc, #36]	@ (8002e4c <HAL_ADC_ConfigChannel+0x108>)
 8002e28:	400a      	ands	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2250      	movs	r2, #80	@ 0x50
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	00001001 	.word	0x00001001
 8002e44:	40012708 	.word	0x40012708
 8002e48:	ff7fffff 	.word	0xff7fffff
 8002e4c:	ffbfffff 	.word	0xffbfffff

08002e50 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <ADC_DelayMicroSecond+0x38>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	490b      	ldr	r1, [pc, #44]	@ (8002e8c <ADC_DelayMicroSecond+0x3c>)
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f7fd f952 	bl	8000108 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	001a      	movs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4353      	muls	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002e6e:	e002      	b.n	8002e76 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f9      	bne.n	8002e70 <ADC_DelayMicroSecond+0x20>
  }
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b004      	add	sp, #16
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	200007e8 	.word	0x200007e8
 8002e8c:	000f4240 	.word	0x000f4240

08002e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	0002      	movs	r2, r0
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ea2:	d809      	bhi.n	8002eb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea4:	1dfb      	adds	r3, r7, #7
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	231f      	movs	r3, #31
 8002eac:	401a      	ands	r2, r3
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <__NVIC_EnableIRQ+0x30>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4091      	lsls	r1, r2
 8002eb4:	000a      	movs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
  }
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	0002      	movs	r2, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ed8:	d828      	bhi.n	8002f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eda:	4a2f      	ldr	r2, [pc, #188]	@ (8002f98 <__NVIC_SetPriority+0xd4>)
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	33c0      	adds	r3, #192	@ 0xc0
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	589b      	ldr	r3, [r3, r2]
 8002eea:	1dfa      	adds	r2, r7, #7
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	0011      	movs	r1, r2
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	00d2      	lsls	r2, r2, #3
 8002ef6:	21ff      	movs	r1, #255	@ 0xff
 8002ef8:	4091      	lsls	r1, r2
 8002efa:	000a      	movs	r2, r1
 8002efc:	43d2      	mvns	r2, r2
 8002efe:	401a      	ands	r2, r3
 8002f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	22ff      	movs	r2, #255	@ 0xff
 8002f08:	401a      	ands	r2, r3
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	2303      	movs	r3, #3
 8002f12:	4003      	ands	r3, r0
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f18:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <__NVIC_SetPriority+0xd4>)
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	430a      	orrs	r2, r1
 8002f24:	33c0      	adds	r3, #192	@ 0xc0
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f2a:	e031      	b.n	8002f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f9c <__NVIC_SetPriority+0xd8>)
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0019      	movs	r1, r3
 8002f34:	230f      	movs	r3, #15
 8002f36:	400b      	ands	r3, r1
 8002f38:	3b08      	subs	r3, #8
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3306      	adds	r3, #6
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	3304      	adds	r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1dfa      	adds	r2, r7, #7
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	400a      	ands	r2, r1
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	21ff      	movs	r1, #255	@ 0xff
 8002f54:	4091      	lsls	r1, r2
 8002f56:	000a      	movs	r2, r1
 8002f58:	43d2      	mvns	r2, r2
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	22ff      	movs	r2, #255	@ 0xff
 8002f64:	401a      	ands	r2, r3
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	4003      	ands	r3, r0
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f74:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <__NVIC_SetPriority+0xd8>)
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	001c      	movs	r4, r3
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	4023      	ands	r3, r4
 8002f80:	3b08      	subs	r3, #8
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	430a      	orrs	r2, r1
 8002f86:	3306      	adds	r3, #6
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	18c3      	adds	r3, r0, r3
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b003      	add	sp, #12
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	045b      	lsls	r3, r3, #17
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d301      	bcc.n	8002fb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e010      	b.n	8002fda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	425b      	negs	r3, r3
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff7c 	bl	8002ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd2:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b25b      	sxtb	r3, r3
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff5d 	bl	8002ec4 <__NVIC_SetPriority>
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	0002      	movs	r2, r0
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b25b      	sxtb	r3, r3
 8003024:	0018      	movs	r0, r3
 8003026:	f7ff ff33 	bl	8002e90 <__NVIC_EnableIRQ>
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ffaf 	bl	8002fa0 <SysTick_Config>
 8003042:	0003      	movs	r3, r0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003062:	e149      	b.n	80032f8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4091      	lsls	r1, r2
 800306e:	000a      	movs	r2, r1
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d100      	bne.n	800307c <HAL_GPIO_Init+0x30>
 800307a:	e13a      	b.n	80032f2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	4013      	ands	r3, r2
 8003084:	2b01      	cmp	r3, #1
 8003086:	d005      	beq.n	8003094 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003090:	2b02      	cmp	r3, #2
 8003092:	d130      	bne.n	80030f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	43da      	mvns	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	409a      	lsls	r2, r3
 80030b6:	0013      	movs	r3, r2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	2201      	movs	r2, #1
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2203      	movs	r2, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d017      	beq.n	8003132 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	43da      	mvns	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2203      	movs	r2, #3
 8003138:	4013      	ands	r3, r2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d123      	bne.n	8003186 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	58d3      	ldr	r3, [r2, r3]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	43da      	mvns	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2107      	movs	r1, #7
 800316a:	400b      	ands	r3, r1
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	409a      	lsls	r2, r3
 8003170:	0013      	movs	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	6939      	ldr	r1, [r7, #16]
 8003184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	401a      	ands	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	23c0      	movs	r3, #192	@ 0xc0
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	4013      	ands	r3, r2
 80031c4:	d100      	bne.n	80031c8 <HAL_GPIO_Init+0x17c>
 80031c6:	e094      	b.n	80032f2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c8:	4b51      	ldr	r3, [pc, #324]	@ (8003310 <HAL_GPIO_Init+0x2c4>)
 80031ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031cc:	4b50      	ldr	r3, [pc, #320]	@ (8003310 <HAL_GPIO_Init+0x2c4>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003314 <HAL_GPIO_Init+0x2c8>)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	089b      	lsrs	r3, r3, #2
 80031da:	3302      	adds	r3, #2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	589b      	ldr	r3, [r3, r2]
 80031e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2203      	movs	r2, #3
 80031e6:	4013      	ands	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	220f      	movs	r2, #15
 80031ec:	409a      	lsls	r2, r3
 80031ee:	0013      	movs	r3, r2
 80031f0:	43da      	mvns	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	23a0      	movs	r3, #160	@ 0xa0
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	429a      	cmp	r2, r3
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x1de>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a44      	ldr	r2, [pc, #272]	@ (8003318 <HAL_GPIO_Init+0x2cc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x1da>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a43      	ldr	r2, [pc, #268]	@ (800331c <HAL_GPIO_Init+0x2d0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x1d6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a42      	ldr	r2, [pc, #264]	@ (8003320 <HAL_GPIO_Init+0x2d4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x1d2>
 800321a:	2305      	movs	r3, #5
 800321c:	e006      	b.n	800322c <HAL_GPIO_Init+0x1e0>
 800321e:	2306      	movs	r3, #6
 8003220:	e004      	b.n	800322c <HAL_GPIO_Init+0x1e0>
 8003222:	2302      	movs	r3, #2
 8003224:	e002      	b.n	800322c <HAL_GPIO_Init+0x1e0>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_GPIO_Init+0x1e0>
 800322a:	2300      	movs	r3, #0
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	2103      	movs	r1, #3
 8003230:	400a      	ands	r2, r1
 8003232:	0092      	lsls	r2, r2, #2
 8003234:	4093      	lsls	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800323c:	4935      	ldr	r1, [pc, #212]	@ (8003314 <HAL_GPIO_Init+0x2c8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324a:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	43da      	mvns	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4013      	ands	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	035b      	lsls	r3, r3, #13
 8003262:	4013      	ands	r3, r2
 8003264:	d003      	beq.n	800326e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800326e:	4b2d      	ldr	r3, [pc, #180]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003274:	4b2b      	ldr	r3, [pc, #172]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43da      	mvns	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	039b      	lsls	r3, r3, #14
 800328c:	4013      	ands	r3, r2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003298:	4b22      	ldr	r3, [pc, #136]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800329e:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c8:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	43da      	mvns	r2, r3
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	025b      	lsls	r3, r3, #9
 80032e0:	4013      	ands	r3, r2
 80032e2:	d003      	beq.n	80032ec <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <HAL_GPIO_Init+0x2d8>)
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	3301      	adds	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	40da      	lsrs	r2, r3
 8003300:	1e13      	subs	r3, r2, #0
 8003302:	d000      	beq.n	8003306 <HAL_GPIO_Init+0x2ba>
 8003304:	e6ae      	b.n	8003064 <HAL_GPIO_Init+0x18>
  }
}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	46c0      	nop			@ (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b006      	add	sp, #24
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000
 8003318:	50000400 	.word	0x50000400
 800331c:	50000800 	.word	0x50000800
 8003320:	50001c00 	.word	0x50001c00
 8003324:	40010400 	.word	0x40010400

08003328 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	000a      	movs	r2, r1
 8003332:	1cbb      	adds	r3, r7, #2
 8003334:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	1cba      	adds	r2, r7, #2
 800333c:	8812      	ldrh	r2, [r2, #0]
 800333e:	4013      	ands	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003342:	230f      	movs	r3, #15
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e003      	b.n	8003354 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334c:	230f      	movs	r3, #15
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	781b      	ldrb	r3, [r3, #0]
}
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	0008      	movs	r0, r1
 800336c:	0011      	movs	r1, r2
 800336e:	1cbb      	adds	r3, r7, #2
 8003370:	1c02      	adds	r2, r0, #0
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	1c7b      	adds	r3, r7, #1
 8003376:	1c0a      	adds	r2, r1, #0
 8003378:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800337a:	1c7b      	adds	r3, r7, #1
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003382:	1cbb      	adds	r3, r7, #2
 8003384:	881a      	ldrh	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800338a:	e003      	b.n	8003394 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800338c:	1cbb      	adds	r3, r7, #2
 800338e:	881a      	ldrh	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003394:	46c0      	nop			@ (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b002      	add	sp, #8
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e082      	b.n	80034b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2241      	movs	r2, #65	@ 0x41
 80033b2:	5c9b      	ldrb	r3, [r3, r2]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2240      	movs	r2, #64	@ 0x40
 80033be:	2100      	movs	r1, #0
 80033c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff f99b 	bl	8002700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2241      	movs	r2, #65	@ 0x41
 80033ce:	2124      	movs	r1, #36	@ 0x24
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2101      	movs	r1, #1
 80033de:	438a      	bics	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4934      	ldr	r1, [pc, #208]	@ (80034bc <HAL_I2C_Init+0x120>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4931      	ldr	r1, [pc, #196]	@ (80034c0 <HAL_I2C_Init+0x124>)
 80033fc:	400a      	ands	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	0209      	lsls	r1, r1, #8
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e007      	b.n	800342a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2184      	movs	r1, #132	@ 0x84
 8003424:	0209      	lsls	r1, r1, #8
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d104      	bne.n	800343c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2280      	movs	r2, #128	@ 0x80
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	491f      	ldr	r1, [pc, #124]	@ (80034c4 <HAL_I2C_Init+0x128>)
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	491a      	ldr	r1, [pc, #104]	@ (80034c0 <HAL_I2C_Init+0x124>)
 8003458:	400a      	ands	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	431a      	orrs	r2, r3
 8003466:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69d9      	ldr	r1, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2241      	movs	r2, #65	@ 0x41
 80034a0:	2120      	movs	r1, #32
 80034a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2242      	movs	r2, #66	@ 0x42
 80034ae:	2100      	movs	r1, #0
 80034b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	f0ffffff 	.word	0xf0ffffff
 80034c0:	ffff7fff 	.word	0xffff7fff
 80034c4:	02008000 	.word	0x02008000

080034c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b089      	sub	sp, #36	@ 0x24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	0008      	movs	r0, r1
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	0019      	movs	r1, r3
 80034d6:	230a      	movs	r3, #10
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	1c02      	adds	r2, r0, #0
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	2308      	movs	r3, #8
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	1c0a      	adds	r2, r1, #0
 80034e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2241      	movs	r2, #65	@ 0x41
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d000      	beq.n	80034f4 <HAL_I2C_Master_Transmit+0x2c>
 80034f2:	e0e7      	b.n	80036c4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2240      	movs	r2, #64	@ 0x40
 80034f8:	5c9b      	ldrb	r3, [r3, r2]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_Master_Transmit+0x3a>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0e1      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2240      	movs	r2, #64	@ 0x40
 8003506:	2101      	movs	r1, #1
 8003508:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800350a:	f7ff fa5d 	bl	80029c8 <HAL_GetTick>
 800350e:	0003      	movs	r3, r0
 8003510:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	0219      	lsls	r1, r3, #8
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2319      	movs	r3, #25
 800351e:	2201      	movs	r2, #1
 8003520:	f000 fa04 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2241      	movs	r2, #65	@ 0x41
 8003530:	2121      	movs	r1, #33	@ 0x21
 8003532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2242      	movs	r2, #66	@ 0x42
 8003538:	2110      	movs	r1, #16
 800353a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2208      	movs	r2, #8
 800354c:	18ba      	adds	r2, r7, r2
 800354e:	8812      	ldrh	r2, [r2, #0]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2bff      	cmp	r3, #255	@ 0xff
 8003560:	d911      	bls.n	8003586 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	22ff      	movs	r2, #255	@ 0xff
 8003566:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356c:	b2da      	uxtb	r2, r3
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	045c      	lsls	r4, r3, #17
 8003572:	230a      	movs	r3, #10
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	8819      	ldrh	r1, [r3, #0]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	4b55      	ldr	r3, [pc, #340]	@ (80036d0 <HAL_I2C_Master_Transmit+0x208>)
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	0023      	movs	r3, r4
 8003580:	f000 fc26 	bl	8003dd0 <I2C_TransferConfig>
 8003584:	e075      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003594:	b2da      	uxtb	r2, r3
 8003596:	2380      	movs	r3, #128	@ 0x80
 8003598:	049c      	lsls	r4, r3, #18
 800359a:	230a      	movs	r3, #10
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	8819      	ldrh	r1, [r3, #0]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	4b4b      	ldr	r3, [pc, #300]	@ (80036d0 <HAL_I2C_Master_Transmit+0x208>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	0023      	movs	r3, r4
 80035a8:	f000 fc12 	bl	8003dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035ac:	e061      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fa07 	bl	80039c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e081      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03a      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x1aa>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d136      	bne.n	8003672 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	0013      	movs	r3, r2
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	f000 f98b 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e053      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2bff      	cmp	r3, #255	@ 0xff
 8003626:	d911      	bls.n	800364c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	22ff      	movs	r2, #255	@ 0xff
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	045c      	lsls	r4, r3, #17
 8003638:	230a      	movs	r3, #10
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	8819      	ldrh	r1, [r3, #0]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	0023      	movs	r3, r4
 8003646:	f000 fbc3 	bl	8003dd0 <I2C_TransferConfig>
 800364a:	e012      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	b2da      	uxtb	r2, r3
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	049c      	lsls	r4, r3, #18
 8003660:	230a      	movs	r3, #10
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	8819      	ldrh	r1, [r3, #0]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	0023      	movs	r3, r4
 800366e:	f000 fbaf 	bl	8003dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d198      	bne.n	80035ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	0018      	movs	r0, r3
 8003684:	f000 f9e6 	bl	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003688:	1e03      	subs	r3, r0, #0
 800368a:	d001      	beq.n	8003690 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e01a      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2220      	movs	r2, #32
 8003696:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	490c      	ldr	r1, [pc, #48]	@ (80036d4 <HAL_I2C_Master_Transmit+0x20c>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2241      	movs	r2, #65	@ 0x41
 80036ac:	2120      	movs	r1, #32
 80036ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2242      	movs	r2, #66	@ 0x42
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2240      	movs	r2, #64	@ 0x40
 80036bc:	2100      	movs	r1, #0
 80036be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	0018      	movs	r0, r3
 80036c8:	46bd      	mov	sp, r7
 80036ca:	b007      	add	sp, #28
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	80002000 	.word	0x80002000
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b089      	sub	sp, #36	@ 0x24
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	0008      	movs	r0, r1
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	0019      	movs	r1, r3
 80036e6:	230a      	movs	r3, #10
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	2308      	movs	r3, #8
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	1c0a      	adds	r2, r1, #0
 80036f4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2241      	movs	r2, #65	@ 0x41
 80036fa:	5c9b      	ldrb	r3, [r3, r2]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d000      	beq.n	8003704 <HAL_I2C_Master_Receive+0x2c>
 8003702:	e0e8      	b.n	80038d6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	@ 0x40
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Master_Receive+0x3a>
 800370e:	2302      	movs	r3, #2
 8003710:	e0e2      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800371a:	f7ff f955 	bl	80029c8 <HAL_GetTick>
 800371e:	0003      	movs	r3, r0
 8003720:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	0219      	lsls	r1, r3, #8
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2319      	movs	r3, #25
 800372e:	2201      	movs	r2, #1
 8003730:	f000 f8fc 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0cd      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2241      	movs	r2, #65	@ 0x41
 8003740:	2122      	movs	r1, #34	@ 0x22
 8003742:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2242      	movs	r2, #66	@ 0x42
 8003748:	2110      	movs	r1, #16
 800374a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2208      	movs	r2, #8
 800375c:	18ba      	adds	r2, r7, r2
 800375e:	8812      	ldrh	r2, [r2, #0]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2bff      	cmp	r3, #255	@ 0xff
 8003770:	d911      	bls.n	8003796 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	22ff      	movs	r2, #255	@ 0xff
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	b2da      	uxtb	r2, r3
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	045c      	lsls	r4, r3, #17
 8003782:	230a      	movs	r3, #10
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	8819      	ldrh	r1, [r3, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	4b55      	ldr	r3, [pc, #340]	@ (80038e0 <HAL_I2C_Master_Receive+0x208>)
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	0023      	movs	r3, r4
 8003790:	f000 fb1e 	bl	8003dd0 <I2C_TransferConfig>
 8003794:	e076      	b.n	8003884 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	049c      	lsls	r4, r3, #18
 80037aa:	230a      	movs	r3, #10
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	8819      	ldrh	r1, [r3, #0]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	4b4b      	ldr	r3, [pc, #300]	@ (80038e0 <HAL_I2C_Master_Receive+0x208>)
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	0023      	movs	r3, r4
 80037b8:	f000 fb0a 	bl	8003dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80037bc:	e062      	b.n	8003884 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	0018      	movs	r0, r3
 80037c6:	f000 f989 	bl	8003adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ca:	1e03      	subs	r3, r0, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e082      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d03a      	beq.n	8003884 <HAL_I2C_Master_Receive+0x1ac>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d136      	bne.n	8003884 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	0013      	movs	r3, r2
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	@ 0x80
 8003824:	f000 f882 	bl	800392c <I2C_WaitOnFlagUntilTimeout>
 8003828:	1e03      	subs	r3, r0, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e053      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2bff      	cmp	r3, #255	@ 0xff
 8003838:	d911      	bls.n	800385e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	22ff      	movs	r2, #255	@ 0xff
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	045c      	lsls	r4, r3, #17
 800384a:	230a      	movs	r3, #10
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	8819      	ldrh	r1, [r3, #0]
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	2300      	movs	r3, #0
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	0023      	movs	r3, r4
 8003858:	f000 faba 	bl	8003dd0 <I2C_TransferConfig>
 800385c:	e012      	b.n	8003884 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	b2da      	uxtb	r2, r3
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	049c      	lsls	r4, r3, #18
 8003872:	230a      	movs	r3, #10
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	8819      	ldrh	r1, [r3, #0]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	0023      	movs	r3, r4
 8003880:	f000 faa6 	bl	8003dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d197      	bne.n	80037be <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f8dd 	bl	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01a      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	490b      	ldr	r1, [pc, #44]	@ (80038e4 <HAL_I2C_Master_Receive+0x20c>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2241      	movs	r2, #65	@ 0x41
 80038be:	2120      	movs	r1, #32
 80038c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2242      	movs	r2, #66	@ 0x42
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2240      	movs	r2, #64	@ 0x40
 80038ce:	2100      	movs	r1, #0
 80038d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b007      	add	sp, #28
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	80002400 	.word	0x80002400
 80038e4:	fe00e800 	.word	0xfe00e800

080038e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d103      	bne.n	8003906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2201      	movs	r2, #1
 800390e:	4013      	ands	r3, r2
 8003910:	2b01      	cmp	r3, #1
 8003912:	d007      	beq.n	8003924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2101      	movs	r1, #1
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]
  }
}
 8003924:	46c0      	nop			@ (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800393c:	e030      	b.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	d02d      	beq.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7ff f840 	bl	80029c8 <HAL_GetTick>
 8003948:	0002      	movs	r2, r0
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d122      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	4013      	ands	r3, r2
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	425a      	negs	r2, r3
 800396a:	4153      	adcs	r3, r2
 800396c:	b2db      	uxtb	r3, r3
 800396e:	001a      	movs	r2, r3
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d113      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397c:	2220      	movs	r2, #32
 800397e:	431a      	orrs	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2241      	movs	r2, #65	@ 0x41
 8003988:	2120      	movs	r1, #32
 800398a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2242      	movs	r2, #66	@ 0x42
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	@ 0x40
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e00f      	b.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4013      	ands	r3, r2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	425a      	negs	r2, r3
 80039b0:	4153      	adcs	r3, r2
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	001a      	movs	r2, r3
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d0bf      	beq.n	800393e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d4:	e032      	b.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 f8ff 	bl	8003be0 <I2C_IsErrorOccurred>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e030      	b.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	3301      	adds	r3, #1
 80039ee:	d025      	beq.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7fe ffea 	bl	80029c8 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11a      	bne.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d013      	beq.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	2220      	movs	r2, #32
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2241      	movs	r2, #65	@ 0x41
 8003a24:	2120      	movs	r1, #32
 8003a26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2242      	movs	r2, #66	@ 0x42
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2240      	movs	r2, #64	@ 0x40
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2202      	movs	r2, #2
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d1c5      	bne.n	80039d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a60:	e02f      	b.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f8b9 	bl	8003be0 <I2C_IsErrorOccurred>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e02d      	b.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fe ffa7 	bl	80029c8 <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d302      	bcc.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d11a      	bne.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2220      	movs	r2, #32
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d013      	beq.n	8003ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2241      	movs	r2, #65	@ 0x41
 8003aaa:	2120      	movs	r1, #32
 8003aac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2242      	movs	r2, #66	@ 0x42
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2240      	movs	r2, #64	@ 0x40
 8003aba:	2100      	movs	r1, #0
 8003abc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e007      	b.n	8003ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d1c8      	bne.n	8003a62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae8:	e06b      	b.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f875 	bl	8003be0 <I2C_IsErrorOccurred>
 8003af6:	1e03      	subs	r3, r0, #0
 8003af8:	d001      	beq.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e069      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	2220      	movs	r2, #32
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d138      	bne.n	8003b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d105      	bne.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e055      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d107      	bne.n	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b42:	e002      	b.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	491f      	ldr	r1, [pc, #124]	@ (8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2241      	movs	r2, #65	@ 0x41
 8003b66:	2120      	movs	r1, #32
 8003b68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2242      	movs	r2, #66	@ 0x42
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e029      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe ff23 	bl	80029c8 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d116      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d00f      	beq.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2241      	movs	r2, #65	@ 0x41
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2240      	movs	r2, #64	@ 0x40
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e007      	b.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d18c      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b004      	add	sp, #16
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	fe00e800 	.word	0xfe00e800

08003be0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2327      	movs	r3, #39	@ 0x27
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2210      	movs	r2, #16
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <I2C_IsErrorOccurred+0x2e>
 8003c0c:	e079      	b.n	8003d02 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c16:	e057      	b.n	8003cc8 <I2C_IsErrorOccurred+0xe8>
 8003c18:	2227      	movs	r2, #39	@ 0x27
 8003c1a:	18bb      	adds	r3, r7, r2
 8003c1c:	18ba      	adds	r2, r7, r2
 8003c1e:	7812      	ldrb	r2, [r2, #0]
 8003c20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3301      	adds	r3, #1
 8003c26:	d04f      	beq.n	8003cc8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fece 	bl	80029c8 <HAL_GetTick>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_IsErrorOccurred+0x5e>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d144      	bne.n	8003cc8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	2380      	movs	r3, #128	@ 0x80
 8003c46:	01db      	lsls	r3, r3, #7
 8003c48:	4013      	ands	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c4c:	2013      	movs	r0, #19
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	2142      	movs	r1, #66	@ 0x42
 8003c54:	5c52      	ldrb	r2, [r2, r1]
 8003c56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	021b      	lsls	r3, r3, #8
 8003c62:	401a      	ands	r2, r3
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d126      	bne.n	8003cba <I2C_IsErrorOccurred+0xda>
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	01db      	lsls	r3, r3, #7
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d021      	beq.n	8003cba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003c76:	183b      	adds	r3, r7, r0
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d01d      	beq.n	8003cba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2180      	movs	r1, #128	@ 0x80
 8003c8a:	01c9      	lsls	r1, r1, #7
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c90:	f7fe fe9a 	bl	80029c8 <HAL_GetTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c98:	e00f      	b.n	8003cba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c9a:	f7fe fe95 	bl	80029c8 <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b19      	cmp	r3, #25
 8003ca6:	d908      	bls.n	8003cba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2220      	movs	r2, #32
 8003cac:	4313      	orrs	r3, r2
 8003cae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cb0:	2327      	movs	r3, #39	@ 0x27
 8003cb2:	18fb      	adds	r3, r7, r3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]

              break;
 8003cb8:	e006      	b.n	8003cc8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d1e8      	bne.n	8003c9a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d004      	beq.n	8003ce0 <I2C_IsErrorOccurred+0x100>
 8003cd6:	2327      	movs	r3, #39	@ 0x27
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d09b      	beq.n	8003c18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ce0:	2327      	movs	r3, #39	@ 0x27
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cfa:	2327      	movs	r3, #39	@ 0x27
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4013      	ands	r3, r2
 8003d12:	d00c      	beq.n	8003d2e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2280      	movs	r2, #128	@ 0x80
 8003d22:	0052      	lsls	r2, r2, #1
 8003d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d26:	2327      	movs	r3, #39	@ 0x27
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4013      	ands	r3, r2
 8003d36:	d00c      	beq.n	8003d52 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	00d2      	lsls	r2, r2, #3
 8003d48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d4a:	2327      	movs	r3, #39	@ 0x27
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d00c      	beq.n	8003d76 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4313      	orrs	r3, r2
 8003d62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2280      	movs	r2, #128	@ 0x80
 8003d6a:	0092      	lsls	r2, r2, #2
 8003d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d6e:	2327      	movs	r3, #39	@ 0x27
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003d76:	2327      	movs	r3, #39	@ 0x27
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff fdb0 	bl	80038e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	490e      	ldr	r1, [pc, #56]	@ (8003dcc <I2C_IsErrorOccurred+0x1ec>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2241      	movs	r2, #65	@ 0x41
 8003da8:	2120      	movs	r1, #32
 8003daa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2242      	movs	r2, #66	@ 0x42
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2240      	movs	r2, #64	@ 0x40
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003dbc:	2327      	movs	r3, #39	@ 0x27
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
}
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b00a      	add	sp, #40	@ 0x28
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	fe00e800 	.word	0xfe00e800

08003dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	0008      	movs	r0, r1
 8003dda:	0011      	movs	r1, r2
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	240a      	movs	r4, #10
 8003de0:	193b      	adds	r3, r7, r4
 8003de2:	1c02      	adds	r2, r0, #0
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	2009      	movs	r0, #9
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	1c0a      	adds	r2, r1, #0
 8003dec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	059b      	lsls	r3, r3, #22
 8003df4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	0419      	lsls	r1, r3, #16
 8003dfc:	23ff      	movs	r3, #255	@ 0xff
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e1a:	0d51      	lsrs	r1, r2, #21
 8003e1c:	2280      	movs	r2, #128	@ 0x80
 8003e1e:	00d2      	lsls	r2, r2, #3
 8003e20:	400a      	ands	r2, r1
 8003e22:	4907      	ldr	r1, [pc, #28]	@ (8003e40 <I2C_TransferConfig+0x70>)
 8003e24:	430a      	orrs	r2, r1
 8003e26:	43d2      	mvns	r2, r2
 8003e28:	401a      	ands	r2, r3
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b007      	add	sp, #28
 8003e3c:	bd90      	pop	{r4, r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	03ff63ff 	.word	0x03ff63ff

08003e44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2241      	movs	r2, #65	@ 0x41
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d138      	bne.n	8003ecc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2240      	movs	r2, #64	@ 0x40
 8003e5e:	5c9b      	ldrb	r3, [r3, r2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e032      	b.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2241      	movs	r2, #65	@ 0x41
 8003e74:	2124      	movs	r1, #36	@ 0x24
 8003e76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2101      	movs	r1, #1
 8003e84:	438a      	bics	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4911      	ldr	r1, [pc, #68]	@ (8003ed8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2241      	movs	r2, #65	@ 0x41
 8003ebc:	2120      	movs	r1, #32
 8003ebe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2240      	movs	r2, #64	@ 0x40
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e000      	b.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ecc:	2302      	movs	r3, #2
  }
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	ffffefff 	.word	0xffffefff

08003edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2241      	movs	r2, #65	@ 0x41
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d139      	bne.n	8003f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2240      	movs	r2, #64	@ 0x40
 8003ef6:	5c9b      	ldrb	r3, [r3, r2]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e033      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	2101      	movs	r1, #1
 8003f06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2241      	movs	r2, #65	@ 0x41
 8003f0c:	2124      	movs	r1, #36	@ 0x24
 8003f0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	438a      	bics	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a11      	ldr	r2, [pc, #68]	@ (8003f70 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2241      	movs	r2, #65	@ 0x41
 8003f56:	2120      	movs	r1, #32
 8003f58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2240      	movs	r2, #64	@ 0x40
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	fffff0ff 	.word	0xfffff0ff

08003f74 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	000a      	movs	r2, r1
 8003f7e:	1cfb      	adds	r3, r7, #3
 8003f80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003f86:	4b25      	ldr	r3, [pc, #148]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	2380      	movs	r3, #128	@ 0x80
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003f92:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <HAL_PWR_EnterSTOPMode+0xac>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	2201      	movs	r2, #1
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_PWR_EnterSTOPMode+0x40>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003fae:	491d      	ldr	r1, [pc, #116]	@ (8004024 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003fca:	4b14      	ldr	r3, [pc, #80]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003fd0:	4b15      	ldr	r3, [pc, #84]	@ (8004028 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003fdc:	1cfb      	adds	r3, r7, #3
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003fe4:	bf30      	wfi
 8003fe6:	e002      	b.n	8003fee <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fe8:	bf40      	sev
    __WFE();
 8003fea:	bf20      	wfe
    __WFE();
 8003fec:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003fee:	4b0e      	ldr	r3, [pc, #56]	@ (8004028 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8004028 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_PWR_EnterSTOPMode+0xa0>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <HAL_PWR_EnterSTOPMode+0xa8>)
 800400c:	2180      	movs	r1, #128	@ 0x80
 800400e:	0089      	lsls	r1, r1, #2
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
  }
}
 8004014:	46c0      	nop			@ (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	b006      	add	sp, #24
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40007000 	.word	0x40007000
 8004020:	40010000 	.word	0x40010000
 8004024:	fffffdff 	.word	0xfffffdff
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800402c:	b5b0      	push	{r4, r5, r7, lr}
 800402e:	b08a      	sub	sp, #40	@ 0x28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f000 fb6c 	bl	8004718 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004040:	4bc8      	ldr	r3, [pc, #800]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	220c      	movs	r2, #12
 8004046:	4013      	ands	r3, r2
 8004048:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404a:	4bc6      	ldr	r3, [pc, #792]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	025b      	lsls	r3, r3, #9
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2201      	movs	r2, #1
 800405c:	4013      	ands	r3, r2
 800405e:	d100      	bne.n	8004062 <HAL_RCC_OscConfig+0x36>
 8004060:	e07d      	b.n	800415e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d007      	beq.n	8004078 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	2b0c      	cmp	r3, #12
 800406c:	d112      	bne.n	8004094 <HAL_RCC_OscConfig+0x68>
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	025b      	lsls	r3, r3, #9
 8004074:	429a      	cmp	r2, r3
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4bba      	ldr	r3, [pc, #744]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	@ 0x80
 800407e:	029b      	lsls	r3, r3, #10
 8004080:	4013      	ands	r3, r2
 8004082:	d100      	bne.n	8004086 <HAL_RCC_OscConfig+0x5a>
 8004084:	e06a      	b.n	800415c <HAL_RCC_OscConfig+0x130>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d166      	bne.n	800415c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f000 fb42 	bl	8004718 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	025b      	lsls	r3, r3, #9
 800409c:	429a      	cmp	r2, r3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x84>
 80040a0:	4bb0      	ldr	r3, [pc, #704]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4baf      	ldr	r3, [pc, #700]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	0249      	lsls	r1, r1, #9
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e027      	b.n	8004100 <HAL_RCC_OscConfig+0xd4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	23a0      	movs	r3, #160	@ 0xa0
 80040b6:	02db      	lsls	r3, r3, #11
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d10e      	bne.n	80040da <HAL_RCC_OscConfig+0xae>
 80040bc:	4ba9      	ldr	r3, [pc, #676]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4ba8      	ldr	r3, [pc, #672]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	02c9      	lsls	r1, r1, #11
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	4ba6      	ldr	r3, [pc, #664]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4ba5      	ldr	r3, [pc, #660]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040d0:	2180      	movs	r1, #128	@ 0x80
 80040d2:	0249      	lsls	r1, r1, #9
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e012      	b.n	8004100 <HAL_RCC_OscConfig+0xd4>
 80040da:	4ba2      	ldr	r3, [pc, #648]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4ba1      	ldr	r3, [pc, #644]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040e0:	49a1      	ldr	r1, [pc, #644]	@ (8004368 <HAL_RCC_OscConfig+0x33c>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	025b      	lsls	r3, r3, #9
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4b9b      	ldr	r3, [pc, #620]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b9a      	ldr	r3, [pc, #616]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80040fa:	499c      	ldr	r1, [pc, #624]	@ (800436c <HAL_RCC_OscConfig+0x340>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d014      	beq.n	8004132 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe fc5e 	bl	80029c8 <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004112:	f7fe fc59 	bl	80029c8 <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b64      	cmp	r3, #100	@ 0x64
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e2f9      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004124:	4b8f      	ldr	r3, [pc, #572]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	@ 0x80
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	4013      	ands	r3, r2
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0xe6>
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe fc49 	bl	80029c8 <HAL_GetTick>
 8004136:	0003      	movs	r3, r0
 8004138:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800413c:	f7fe fc44 	bl	80029c8 <HAL_GetTick>
 8004140:	0002      	movs	r2, r0
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e2e4      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800414e:	4b85      	ldr	r3, [pc, #532]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	029b      	lsls	r3, r3, #10
 8004156:	4013      	ands	r3, r2
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x110>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	d100      	bne.n	800416a <HAL_RCC_OscConfig+0x13e>
 8004168:	e099      	b.n	800429e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	2220      	movs	r2, #32
 8004174:	4013      	ands	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004178:	4b7a      	ldr	r3, [pc, #488]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b79      	ldr	r3, [pc, #484]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800417e:	2120      	movs	r1, #32
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	2220      	movs	r2, #32
 8004188:	4393      	bics	r3, r2
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d005      	beq.n	800419e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b0c      	cmp	r3, #12
 8004196:	d13e      	bne.n	8004216 <HAL_RCC_OscConfig+0x1ea>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d13b      	bne.n	8004216 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800419e:	4b71      	ldr	r3, [pc, #452]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2204      	movs	r2, #4
 80041a4:	4013      	ands	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_RCC_OscConfig+0x186>
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e2b2      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004370 <HAL_RCC_OscConfig+0x344>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	021a      	lsls	r2, r3, #8
 80041c2:	4b68      	ldr	r3, [pc, #416]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80041c8:	4b66      	ldr	r3, [pc, #408]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2209      	movs	r2, #9
 80041ce:	4393      	bics	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	4b64      	ldr	r3, [pc, #400]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041da:	f000 fbeb 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80041de:	0001      	movs	r1, r0
 80041e0:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	220f      	movs	r2, #15
 80041e8:	4013      	ands	r3, r2
 80041ea:	4a62      	ldr	r2, [pc, #392]	@ (8004374 <HAL_RCC_OscConfig+0x348>)
 80041ec:	5cd3      	ldrb	r3, [r2, r3]
 80041ee:	000a      	movs	r2, r1
 80041f0:	40da      	lsrs	r2, r3
 80041f2:	4b61      	ldr	r3, [pc, #388]	@ (8004378 <HAL_RCC_OscConfig+0x34c>)
 80041f4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80041f6:	4b61      	ldr	r3, [pc, #388]	@ (800437c <HAL_RCC_OscConfig+0x350>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2513      	movs	r5, #19
 80041fc:	197c      	adds	r4, r7, r5
 80041fe:	0018      	movs	r0, r3
 8004200:	f7fe fb9c 	bl	800293c <HAL_InitTick>
 8004204:	0003      	movs	r3, r0
 8004206:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004208:	197b      	adds	r3, r7, r5
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d046      	beq.n	800429e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004210:	197b      	adds	r3, r7, r5
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	e280      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d027      	beq.n	800426c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800421c:	4b51      	ldr	r3, [pc, #324]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2209      	movs	r2, #9
 8004222:	4393      	bics	r3, r2
 8004224:	0019      	movs	r1, r3
 8004226:	4b4f      	ldr	r3, [pc, #316]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fe fbcb 	bl	80029c8 <HAL_GetTick>
 8004232:	0003      	movs	r3, r0
 8004234:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004238:	f7fe fbc6 	bl	80029c8 <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e266      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800424a:	4b46      	ldr	r3, [pc, #280]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	4013      	ands	r3, r2
 8004252:	d0f1      	beq.n	8004238 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a45      	ldr	r2, [pc, #276]	@ (8004370 <HAL_RCC_OscConfig+0x344>)
 800425a:	4013      	ands	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	4b3f      	ldr	r3, [pc, #252]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	e018      	b.n	800429e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426c:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	4b3c      	ldr	r3, [pc, #240]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004272:	2101      	movs	r1, #1
 8004274:	438a      	bics	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe fba6 	bl	80029c8 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004282:	f7fe fba1 	bl	80029c8 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e241      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004294:	4b33      	ldr	r3, [pc, #204]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2204      	movs	r2, #4
 800429a:	4013      	ands	r3, r2
 800429c:	d1f1      	bne.n	8004282 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2210      	movs	r2, #16
 80042a4:	4013      	ands	r3, r2
 80042a6:	d100      	bne.n	80042aa <HAL_RCC_OscConfig+0x27e>
 80042a8:	e0a1      	b.n	80043ee <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d140      	bne.n	8004332 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x29c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e227      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c8:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004380 <HAL_RCC_OscConfig+0x354>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042dc:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	0a19      	lsrs	r1, r3, #8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	061a      	lsls	r2, r3, #24
 80042ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	0b5b      	lsrs	r3, r3, #13
 80042f6:	3301      	adds	r3, #1
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	0212      	lsls	r2, r2, #8
 80042fc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80042fe:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	210f      	movs	r1, #15
 8004306:	400b      	ands	r3, r1
 8004308:	491a      	ldr	r1, [pc, #104]	@ (8004374 <HAL_RCC_OscConfig+0x348>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <HAL_RCC_OscConfig+0x34c>)
 8004310:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004312:	4b1a      	ldr	r3, [pc, #104]	@ (800437c <HAL_RCC_OscConfig+0x350>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2513      	movs	r5, #19
 8004318:	197c      	adds	r4, r7, r5
 800431a:	0018      	movs	r0, r3
 800431c:	f7fe fb0e 	bl	800293c <HAL_InitTick>
 8004320:	0003      	movs	r3, r0
 8004322:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004324:	197b      	adds	r3, r7, r5
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d060      	beq.n	80043ee <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800432c:	197b      	adds	r3, r7, r5
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	e1f2      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d03f      	beq.n	80043ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800433a:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x338>)
 8004340:	2180      	movs	r1, #128	@ 0x80
 8004342:	0049      	lsls	r1, r1, #1
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe fb3e 	bl	80029c8 <HAL_GetTick>
 800434c:	0003      	movs	r3, r0
 800434e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004350:	e018      	b.n	8004384 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004352:	f7fe fb39 	bl	80029c8 <HAL_GetTick>
 8004356:	0002      	movs	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d911      	bls.n	8004384 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1d9      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
 8004364:	40021000 	.word	0x40021000
 8004368:	fffeffff 	.word	0xfffeffff
 800436c:	fffbffff 	.word	0xfffbffff
 8004370:	ffffe0ff 	.word	0xffffe0ff
 8004374:	08005918 	.word	0x08005918
 8004378:	200007e8 	.word	0x200007e8
 800437c:	200007fc 	.word	0x200007fc
 8004380:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004384:	4bc9      	ldr	r3, [pc, #804]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d0e0      	beq.n	8004352 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004390:	4bc6      	ldr	r3, [pc, #792]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4ac6      	ldr	r2, [pc, #792]	@ (80046b0 <HAL_RCC_OscConfig+0x684>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	4bc3      	ldr	r3, [pc, #780]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a4:	4bc1      	ldr	r3, [pc, #772]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	021b      	lsls	r3, r3, #8
 80043aa:	0a19      	lsrs	r1, r3, #8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	061a      	lsls	r2, r3, #24
 80043b2:	4bbe      	ldr	r3, [pc, #760]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	e019      	b.n	80043ee <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043ba:	4bbc      	ldr	r3, [pc, #752]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4bbb      	ldr	r3, [pc, #748]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043c0:	49bc      	ldr	r1, [pc, #752]	@ (80046b4 <HAL_RCC_OscConfig+0x688>)
 80043c2:	400a      	ands	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fe faff 	bl	80029c8 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043d0:	f7fe fafa 	bl	80029c8 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e19a      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043e2:	4bb2      	ldr	r3, [pc, #712]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	2380      	movs	r3, #128	@ 0x80
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2208      	movs	r2, #8
 80043f4:	4013      	ands	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d019      	beq.n	8004434 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004400:	4baa      	ldr	r3, [pc, #680]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004402:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004404:	4ba9      	ldr	r3, [pc, #676]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004406:	2101      	movs	r1, #1
 8004408:	430a      	orrs	r2, r1
 800440a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440c:	f7fe fadc 	bl	80029c8 <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004416:	f7fe fad7 	bl	80029c8 <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e177      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004428:	4ba0      	ldr	r3, [pc, #640]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800442a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442c:	2202      	movs	r2, #2
 800442e:	4013      	ands	r3, r2
 8004430:	d0f1      	beq.n	8004416 <HAL_RCC_OscConfig+0x3ea>
 8004432:	e018      	b.n	8004466 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004434:	4b9d      	ldr	r3, [pc, #628]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004436:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004438:	4b9c      	ldr	r3, [pc, #624]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800443a:	2101      	movs	r1, #1
 800443c:	438a      	bics	r2, r1
 800443e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004440:	f7fe fac2 	bl	80029c8 <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444a:	f7fe fabd 	bl	80029c8 <HAL_GetTick>
 800444e:	0002      	movs	r2, r0
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e15d      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800445c:	4b93      	ldr	r3, [pc, #588]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d1f1      	bne.n	800444a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2204      	movs	r2, #4
 800446c:	4013      	ands	r3, r2
 800446e:	d100      	bne.n	8004472 <HAL_RCC_OscConfig+0x446>
 8004470:	e0ae      	b.n	80045d0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2023      	movs	r0, #35	@ 0x23
 8004474:	183b      	adds	r3, r7, r0
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b8c      	ldr	r3, [pc, #560]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800447c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	055b      	lsls	r3, r3, #21
 8004482:	4013      	ands	r3, r2
 8004484:	d109      	bne.n	800449a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b89      	ldr	r3, [pc, #548]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800448a:	4b88      	ldr	r3, [pc, #544]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800448c:	2180      	movs	r1, #128	@ 0x80
 800448e:	0549      	lsls	r1, r1, #21
 8004490:	430a      	orrs	r2, r1
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004494:	183b      	adds	r3, r7, r0
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449a:	4b87      	ldr	r3, [pc, #540]	@ (80046b8 <HAL_RCC_OscConfig+0x68c>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4013      	ands	r3, r2
 80044a4:	d11a      	bne.n	80044dc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a6:	4b84      	ldr	r3, [pc, #528]	@ (80046b8 <HAL_RCC_OscConfig+0x68c>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <HAL_RCC_OscConfig+0x68c>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	0049      	lsls	r1, r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b4:	f7fe fa88 	bl	80029c8 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe fa83 	bl	80029c8 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e123      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <HAL_RCC_OscConfig+0x68c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	2380      	movs	r3, #128	@ 0x80
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4cc>
 80044e8:	4b70      	ldr	r3, [pc, #448]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80044ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80044ec:	4b6f      	ldr	r3, [pc, #444]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80044ee:	2180      	movs	r1, #128	@ 0x80
 80044f0:	0049      	lsls	r1, r1, #1
 80044f2:	430a      	orrs	r2, r1
 80044f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80044f6:	e031      	b.n	800455c <HAL_RCC_OscConfig+0x530>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10c      	bne.n	800451a <HAL_RCC_OscConfig+0x4ee>
 8004500:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004502:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004504:	4b69      	ldr	r3, [pc, #420]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004506:	496b      	ldr	r1, [pc, #428]	@ (80046b4 <HAL_RCC_OscConfig+0x688>)
 8004508:	400a      	ands	r2, r1
 800450a:	651a      	str	r2, [r3, #80]	@ 0x50
 800450c:	4b67      	ldr	r3, [pc, #412]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800450e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004510:	4b66      	ldr	r3, [pc, #408]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004512:	496a      	ldr	r1, [pc, #424]	@ (80046bc <HAL_RCC_OscConfig+0x690>)
 8004514:	400a      	ands	r2, r1
 8004516:	651a      	str	r2, [r3, #80]	@ 0x50
 8004518:	e020      	b.n	800455c <HAL_RCC_OscConfig+0x530>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	23a0      	movs	r3, #160	@ 0xa0
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	429a      	cmp	r2, r3
 8004524:	d10e      	bne.n	8004544 <HAL_RCC_OscConfig+0x518>
 8004526:	4b61      	ldr	r3, [pc, #388]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800452a:	4b60      	ldr	r3, [pc, #384]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	00c9      	lsls	r1, r1, #3
 8004530:	430a      	orrs	r2, r1
 8004532:	651a      	str	r2, [r3, #80]	@ 0x50
 8004534:	4b5d      	ldr	r3, [pc, #372]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004536:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004538:	4b5c      	ldr	r3, [pc, #368]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800453a:	2180      	movs	r1, #128	@ 0x80
 800453c:	0049      	lsls	r1, r1, #1
 800453e:	430a      	orrs	r2, r1
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0x530>
 8004544:	4b59      	ldr	r3, [pc, #356]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004548:	4b58      	ldr	r3, [pc, #352]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800454a:	495a      	ldr	r1, [pc, #360]	@ (80046b4 <HAL_RCC_OscConfig+0x688>)
 800454c:	400a      	ands	r2, r1
 800454e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004550:	4b56      	ldr	r3, [pc, #344]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004554:	4b55      	ldr	r3, [pc, #340]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004556:	4959      	ldr	r1, [pc, #356]	@ (80046bc <HAL_RCC_OscConfig+0x690>)
 8004558:	400a      	ands	r2, r1
 800455a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d015      	beq.n	8004590 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fe fa30 	bl	80029c8 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800456c:	e009      	b.n	8004582 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fe fa2b 	bl	80029c8 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	4a51      	ldr	r2, [pc, #324]	@ (80046c0 <HAL_RCC_OscConfig+0x694>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0ca      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4013      	ands	r3, r2
 800458c:	d0ef      	beq.n	800456e <HAL_RCC_OscConfig+0x542>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004590:	f7fe fa1a 	bl	80029c8 <HAL_GetTick>
 8004594:	0003      	movs	r3, r0
 8004596:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004598:	e009      	b.n	80045ae <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe fa15 	bl	80029c8 <HAL_GetTick>
 800459e:	0002      	movs	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	4a46      	ldr	r2, [pc, #280]	@ (80046c0 <HAL_RCC_OscConfig+0x694>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e0b4      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045ae:	4b3f      	ldr	r3, [pc, #252]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80045b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4013      	ands	r3, r2
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045ba:	2323      	movs	r3, #35	@ 0x23
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b39      	ldr	r3, [pc, #228]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80045c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045c8:	4b38      	ldr	r3, [pc, #224]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80045ca:	493e      	ldr	r1, [pc, #248]	@ (80046c4 <HAL_RCC_OscConfig+0x698>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d100      	bne.n	80045da <HAL_RCC_OscConfig+0x5ae>
 80045d8:	e09d      	b.n	8004716 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b0c      	cmp	r3, #12
 80045de:	d100      	bne.n	80045e2 <HAL_RCC_OscConfig+0x5b6>
 80045e0:	e076      	b.n	80046d0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d145      	bne.n	8004676 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ea:	4b30      	ldr	r3, [pc, #192]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80045f0:	4935      	ldr	r1, [pc, #212]	@ (80046c8 <HAL_RCC_OscConfig+0x69c>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fe f9e7 	bl	80029c8 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004600:	f7fe f9e2 	bl	80029c8 <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e082      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004612:	4b26      	ldr	r3, [pc, #152]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	2380      	movs	r3, #128	@ 0x80
 8004618:	049b      	lsls	r3, r3, #18
 800461a:	4013      	ands	r3, r2
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461e:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a2a      	ldr	r2, [pc, #168]	@ (80046cc <HAL_RCC_OscConfig+0x6a0>)
 8004624:	4013      	ands	r3, r2
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	431a      	orrs	r2, r3
 8004638:	4b1c      	ldr	r3, [pc, #112]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800463a:	430a      	orrs	r2, r1
 800463c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004644:	2180      	movs	r1, #128	@ 0x80
 8004646:	0449      	lsls	r1, r1, #17
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fe f9bc 	bl	80029c8 <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004656:	f7fe f9b7 	bl	80029c8 <HAL_GetTick>
 800465a:	0002      	movs	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e057      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004668:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	049b      	lsls	r3, r3, #18
 8004670:	4013      	ands	r3, r2
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x62a>
 8004674:	e04f      	b.n	8004716 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 800467c:	4912      	ldr	r1, [pc, #72]	@ (80046c8 <HAL_RCC_OscConfig+0x69c>)
 800467e:	400a      	ands	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe f9a1 	bl	80029c8 <HAL_GetTick>
 8004686:	0003      	movs	r3, r0
 8004688:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fe f99c 	bl	80029c8 <HAL_GetTick>
 8004690:	0002      	movs	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e03c      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800469e:	4b03      	ldr	r3, [pc, #12]	@ (80046ac <HAL_RCC_OscConfig+0x680>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	049b      	lsls	r3, r3, #18
 80046a6:	4013      	ands	r3, r2
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x660>
 80046aa:	e034      	b.n	8004716 <HAL_RCC_OscConfig+0x6ea>
 80046ac:	40021000 	.word	0x40021000
 80046b0:	ffff1fff 	.word	0xffff1fff
 80046b4:	fffffeff 	.word	0xfffffeff
 80046b8:	40007000 	.word	0x40007000
 80046bc:	fffffbff 	.word	0xfffffbff
 80046c0:	00001388 	.word	0x00001388
 80046c4:	efffffff 	.word	0xefffffff
 80046c8:	feffffff 	.word	0xfeffffff
 80046cc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e01d      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046dc:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_RCC_OscConfig+0x6f4>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	025b      	lsls	r3, r3, #9
 80046e8:	401a      	ands	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d10f      	bne.n	8004712 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	23f0      	movs	r3, #240	@ 0xf0
 80046f6:	039b      	lsls	r3, r3, #14
 80046f8:	401a      	ands	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d107      	bne.n	8004712 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	23c0      	movs	r3, #192	@ 0xc0
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	401a      	ands	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800470e:	429a      	cmp	r2, r3
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	0018      	movs	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	b00a      	add	sp, #40	@ 0x28
 800471e:	bdb0      	pop	{r4, r5, r7, pc}
 8004720:	40021000 	.word	0x40021000

08004724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004724:	b5b0      	push	{r4, r5, r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e128      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b96      	ldr	r3, [pc, #600]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d91e      	bls.n	8004784 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b93      	ldr	r3, [pc, #588]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	4393      	bics	r3, r2
 800474e:	0019      	movs	r1, r3
 8004750:	4b90      	ldr	r3, [pc, #576]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004758:	f7fe f936 	bl	80029c8 <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004760:	e009      	b.n	8004776 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004762:	f7fe f931 	bl	80029c8 <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	4a8a      	ldr	r2, [pc, #552]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e109      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b87      	ldr	r3, [pc, #540]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d1ee      	bne.n	8004762 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2202      	movs	r2, #2
 800478a:	4013      	ands	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478e:	4b83      	ldr	r3, [pc, #524]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	22f0      	movs	r2, #240	@ 0xf0
 8004794:	4393      	bics	r3, r2
 8004796:	0019      	movs	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	4b7f      	ldr	r3, [pc, #508]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 800479e:	430a      	orrs	r2, r1
 80047a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4013      	ands	r3, r2
 80047aa:	d100      	bne.n	80047ae <HAL_RCC_ClockConfig+0x8a>
 80047ac:	e089      	b.n	80048c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047b6:	4b79      	ldr	r3, [pc, #484]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	029b      	lsls	r3, r3, #10
 80047be:	4013      	ands	r3, r2
 80047c0:	d120      	bne.n	8004804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0e1      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ce:	4b73      	ldr	r3, [pc, #460]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	2380      	movs	r3, #128	@ 0x80
 80047d4:	049b      	lsls	r3, r3, #18
 80047d6:	4013      	ands	r3, r2
 80047d8:	d114      	bne.n	8004804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0d5      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047e6:	4b6d      	ldr	r3, [pc, #436]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2204      	movs	r2, #4
 80047ec:	4013      	ands	r3, r2
 80047ee:	d109      	bne.n	8004804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0ca      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047f4:	4b69      	ldr	r3, [pc, #420]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2380      	movs	r3, #128	@ 0x80
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0c2      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004804:	4b65      	ldr	r3, [pc, #404]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2203      	movs	r2, #3
 800480a:	4393      	bics	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	4b62      	ldr	r3, [pc, #392]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004814:	430a      	orrs	r2, r1
 8004816:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004818:	f7fe f8d6 	bl	80029c8 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d111      	bne.n	800484c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004828:	e009      	b.n	800483e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482a:	f7fe f8cd 	bl	80029c8 <HAL_GetTick>
 800482e:	0002      	movs	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	4a58      	ldr	r2, [pc, #352]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0a5      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800483e:	4b57      	ldr	r3, [pc, #348]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	220c      	movs	r2, #12
 8004844:	4013      	ands	r3, r2
 8004846:	2b08      	cmp	r3, #8
 8004848:	d1ef      	bne.n	800482a <HAL_RCC_ClockConfig+0x106>
 800484a:	e03a      	b.n	80048c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d111      	bne.n	8004878 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	e009      	b.n	800486a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004856:	f7fe f8b7 	bl	80029c8 <HAL_GetTick>
 800485a:	0002      	movs	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	4a4d      	ldr	r2, [pc, #308]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e08f      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800486a:	4b4c      	ldr	r3, [pc, #304]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	220c      	movs	r2, #12
 8004870:	4013      	ands	r3, r2
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d1ef      	bne.n	8004856 <HAL_RCC_ClockConfig+0x132>
 8004876:	e024      	b.n	80048c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11b      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004880:	e009      	b.n	8004896 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004882:	f7fe f8a1 	bl	80029c8 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a42      	ldr	r2, [pc, #264]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e079      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	4b41      	ldr	r3, [pc, #260]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	220c      	movs	r2, #12
 800489c:	4013      	ands	r3, r2
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d1ef      	bne.n	8004882 <HAL_RCC_ClockConfig+0x15e>
 80048a2:	e00e      	b.n	80048c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fe f890 	bl	80029c8 <HAL_GetTick>
 80048a8:	0002      	movs	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e068      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048b8:	4b38      	ldr	r3, [pc, #224]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	220c      	movs	r2, #12
 80048be:	4013      	ands	r3, r2
 80048c0:	d1f0      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c2:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2201      	movs	r2, #1
 80048c8:	4013      	ands	r3, r2
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d21e      	bcs.n	800490e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d0:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2201      	movs	r2, #1
 80048d6:	4393      	bics	r3, r2
 80048d8:	0019      	movs	r1, r3
 80048da:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048e2:	f7fe f871 	bl	80029c8 <HAL_GetTick>
 80048e6:	0003      	movs	r3, r0
 80048e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	e009      	b.n	8004900 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fe f86c 	bl	80029c8 <HAL_GetTick>
 80048f0:	0002      	movs	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <HAL_RCC_ClockConfig+0x274>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e044      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004900:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCC_ClockConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2201      	movs	r2, #1
 8004906:	4013      	ands	r3, r2
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d1ee      	bne.n	80048ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2204      	movs	r2, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b20      	ldr	r3, [pc, #128]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a20      	ldr	r2, [pc, #128]	@ (80049a0 <HAL_RCC_ClockConfig+0x27c>)
 800491e:	4013      	ands	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004928:	430a      	orrs	r2, r1
 800492a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	4013      	ands	r3, r2
 8004934:	d00a      	beq.n	800494c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004936:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	4a1a      	ldr	r2, [pc, #104]	@ (80049a4 <HAL_RCC_ClockConfig+0x280>)
 800493c:	4013      	ands	r3, r2
 800493e:	0019      	movs	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00da      	lsls	r2, r3, #3
 8004946:	4b15      	ldr	r3, [pc, #84]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004948:	430a      	orrs	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800494c:	f000 f832 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004950:	0001      	movs	r1, r0
 8004952:	4b12      	ldr	r3, [pc, #72]	@ (800499c <HAL_RCC_ClockConfig+0x278>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	220f      	movs	r2, #15
 800495a:	4013      	ands	r3, r2
 800495c:	4a12      	ldr	r2, [pc, #72]	@ (80049a8 <HAL_RCC_ClockConfig+0x284>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	000a      	movs	r2, r1
 8004962:	40da      	lsrs	r2, r3
 8004964:	4b11      	ldr	r3, [pc, #68]	@ (80049ac <HAL_RCC_ClockConfig+0x288>)
 8004966:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004968:	4b11      	ldr	r3, [pc, #68]	@ (80049b0 <HAL_RCC_ClockConfig+0x28c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	250b      	movs	r5, #11
 800496e:	197c      	adds	r4, r7, r5
 8004970:	0018      	movs	r0, r3
 8004972:	f7fd ffe3 	bl	800293c <HAL_InitTick>
 8004976:	0003      	movs	r3, r0
 8004978:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800497a:	197b      	adds	r3, r7, r5
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004982:	197b      	adds	r3, r7, r5
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	e000      	b.n	800498a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bdb0      	pop	{r4, r5, r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	40022000 	.word	0x40022000
 8004998:	00001388 	.word	0x00001388
 800499c:	40021000 	.word	0x40021000
 80049a0:	fffff8ff 	.word	0xfffff8ff
 80049a4:	ffffc7ff 	.word	0xffffc7ff
 80049a8:	08005918 	.word	0x08005918
 80049ac:	200007e8 	.word	0x200007e8
 80049b0:	200007fc 	.word	0x200007fc

080049b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	b08e      	sub	sp, #56	@ 0x38
 80049b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80049ba:	4b4c      	ldr	r3, [pc, #304]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c2:	230c      	movs	r3, #12
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d014      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ca:	d900      	bls.n	80049ce <HAL_RCC_GetSysClockFreq+0x1a>
 80049cc:	e07b      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x112>
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d002      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x24>
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d00b      	beq.n	80049ee <HAL_RCC_GetSysClockFreq+0x3a>
 80049d6:	e076      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049d8:	4b44      	ldr	r3, [pc, #272]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2210      	movs	r2, #16
 80049de:	4013      	ands	r3, r2
 80049e0:	d002      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80049e2:	4b43      	ldr	r3, [pc, #268]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80049e6:	e07c      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80049e8:	4b42      	ldr	r3, [pc, #264]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x140>)
 80049ea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80049ec:	e079      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049ee:	4b42      	ldr	r3, [pc, #264]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x144>)
 80049f0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80049f2:	e076      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80049f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f6:	0c9a      	lsrs	r2, r3, #18
 80049f8:	230f      	movs	r3, #15
 80049fa:	401a      	ands	r2, r3
 80049fc:	4b3f      	ldr	r3, [pc, #252]	@ (8004afc <HAL_RCC_GetSysClockFreq+0x148>)
 80049fe:	5c9b      	ldrb	r3, [r3, r2]
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a04:	0d9a      	lsrs	r2, r3, #22
 8004a06:	2303      	movs	r3, #3
 8004a08:	4013      	ands	r3, r2
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b37      	ldr	r3, [pc, #220]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	025b      	lsls	r3, r3, #9
 8004a16:	4013      	ands	r3, r2
 8004a18:	d01a      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	4a35      	ldr	r2, [pc, #212]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x144>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	69b8      	ldr	r0, [r7, #24]
 8004a28:	69f9      	ldr	r1, [r7, #28]
 8004a2a:	f7fb fc19 	bl	8000260 <__aeabi_lmul>
 8004a2e:	0002      	movs	r2, r0
 8004a30:	000b      	movs	r3, r1
 8004a32:	0010      	movs	r0, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f7fb fbed 	bl	8000220 <__aeabi_uldivmod>
 8004a46:	0002      	movs	r2, r0
 8004a48:	000b      	movs	r3, r1
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a4e:	e037      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a50:	4b26      	ldr	r3, [pc, #152]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	4013      	ands	r3, r2
 8004a58:	d01a      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	4a23      	ldr	r2, [pc, #140]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a64:	2300      	movs	r3, #0
 8004a66:	68b8      	ldr	r0, [r7, #8]
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	f7fb fbf9 	bl	8000260 <__aeabi_lmul>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	000b      	movs	r3, r1
 8004a72:	0010      	movs	r0, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f7fb fbcd 	bl	8000220 <__aeabi_uldivmod>
 8004a86:	0002      	movs	r2, r0
 8004a88:	000b      	movs	r3, r1
 8004a8a:	0013      	movs	r3, r2
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8e:	e017      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a92:	0018      	movs	r0, r3
 8004a94:	2300      	movs	r3, #0
 8004a96:	0019      	movs	r1, r3
 8004a98:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x140>)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fb fbe0 	bl	8000260 <__aeabi_lmul>
 8004aa0:	0002      	movs	r2, r0
 8004aa2:	000b      	movs	r3, r1
 8004aa4:	0010      	movs	r0, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	001c      	movs	r4, r3
 8004aac:	2300      	movs	r3, #0
 8004aae:	001d      	movs	r5, r3
 8004ab0:	0022      	movs	r2, r4
 8004ab2:	002b      	movs	r3, r5
 8004ab4:	f7fb fbb4 	bl	8000220 <__aeabi_uldivmod>
 8004ab8:	0002      	movs	r2, r0
 8004aba:	000b      	movs	r3, r1
 8004abc:	0013      	movs	r3, r2
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004ac4:	e00d      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x138>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0b5b      	lsrs	r3, r3, #13
 8004acc:	2207      	movs	r2, #7
 8004ace:	4013      	ands	r3, r2
 8004ad0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	0212      	lsls	r2, r2, #8
 8004ada:	409a      	lsls	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b00e      	add	sp, #56	@ 0x38
 8004aea:	bdb0      	pop	{r4, r5, r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	003d0900 	.word	0x003d0900
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	007a1200 	.word	0x007a1200
 8004afc:	08005928 	.word	0x08005928

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004b08:	2017      	movs	r0, #23
 8004b0a:	183b      	adds	r3, r7, r0
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2220      	movs	r2, #32
 8004b16:	4013      	ands	r3, r2
 8004b18:	d100      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004b1a:	e0c7      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1c:	4b84      	ldr	r3, [pc, #528]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	055b      	lsls	r3, r3, #21
 8004b24:	4013      	ands	r3, r2
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	4b81      	ldr	r3, [pc, #516]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2c:	4b80      	ldr	r3, [pc, #512]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	0549      	lsls	r1, r1, #21
 8004b32:	430a      	orrs	r2, r1
 8004b34:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004b36:	183b      	adds	r3, r7, r0
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d11a      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b48:	4b7a      	ldr	r3, [pc, #488]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b79      	ldr	r3, [pc, #484]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	0049      	lsls	r1, r1, #1
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fd ff37 	bl	80029c8 <HAL_GetTick>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	e008      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fd ff32 	bl	80029c8 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e0d9      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b70      	ldr	r3, [pc, #448]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	23c0      	movs	r3, #192	@ 0xc0
 8004b84:	039b      	lsls	r3, r3, #14
 8004b86:	4013      	ands	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	23c0      	movs	r3, #192	@ 0xc0
 8004b90:	039b      	lsls	r3, r3, #14
 8004b92:	4013      	ands	r3, r2
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d013      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	23c0      	movs	r3, #192	@ 0xc0
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	23c0      	movs	r3, #192	@ 0xc0
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d10a      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bac:	4b60      	ldr	r3, [pc, #384]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	029b      	lsls	r3, r3, #10
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	2380      	movs	r3, #128	@ 0x80
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0b1      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bc6:	23c0      	movs	r3, #192	@ 0xc0
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	4013      	ands	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03b      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	23c0      	movs	r3, #192	@ 0xc0
 8004bda:	029b      	lsls	r3, r3, #10
 8004bdc:	4013      	ands	r3, r2
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d033      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2220      	movs	r2, #32
 8004bea:	4013      	ands	r3, r2
 8004bec:	d02e      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004bee:	4b50      	ldr	r3, [pc, #320]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf2:	4a51      	ldr	r2, [pc, #324]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bfe:	2180      	movs	r1, #128	@ 0x80
 8004c00:	0309      	lsls	r1, r1, #12
 8004c02:	430a      	orrs	r2, r1
 8004c04:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c06:	4b4a      	ldr	r3, [pc, #296]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c0a:	4b49      	ldr	r3, [pc, #292]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c0c:	494b      	ldr	r1, [pc, #300]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004c0e:	400a      	ands	r2, r1
 8004c10:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004c12:	4b47      	ldr	r3, [pc, #284]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d014      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd fed1 	bl	80029c8 <HAL_GetTick>
 8004c26:	0003      	movs	r3, r0
 8004c28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c2a:	e009      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fd fecc 	bl	80029c8 <HAL_GetTick>
 8004c30:	0002      	movs	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a42      	ldr	r2, [pc, #264]	@ (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e072      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c40:	4b3b      	ldr	r3, [pc, #236]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d0ef      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2220      	movs	r2, #32
 8004c52:	4013      	ands	r3, r2
 8004c54:	d01f      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	23c0      	movs	r3, #192	@ 0xc0
 8004c5c:	029b      	lsls	r3, r3, #10
 8004c5e:	401a      	ands	r2, r3
 8004c60:	23c0      	movs	r3, #192	@ 0xc0
 8004c62:	029b      	lsls	r3, r3, #10
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d10c      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8004c68:	4b31      	ldr	r3, [pc, #196]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a35      	ldr	r2, [pc, #212]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	0019      	movs	r1, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	23c0      	movs	r3, #192	@ 0xc0
 8004c78:	039b      	lsls	r3, r3, #14
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c84:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	23c0      	movs	r3, #192	@ 0xc0
 8004c8c:	029b      	lsls	r3, r3, #10
 8004c8e:	401a      	ands	r2, r3
 8004c90:	4b27      	ldr	r3, [pc, #156]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c92:	430a      	orrs	r2, r1
 8004c94:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c96:	2317      	movs	r3, #23
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4b23      	ldr	r3, [pc, #140]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ca4:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ca6:	4928      	ldr	r1, [pc, #160]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ca8:	400a      	ands	r2, r1
 8004caa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cba:	220c      	movs	r2, #12
 8004cbc:	4393      	bics	r3, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd4:	4b16      	ldr	r3, [pc, #88]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2208      	movs	r2, #8
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf6:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2280      	movs	r2, #128	@ 0x80
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004d10:	4b07      	ldr	r3, [pc, #28]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d14:	4a0f      	ldr	r2, [pc, #60]	@ (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b006      	add	sp, #24
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
 8004d38:	fffcffff 	.word	0xfffcffff
 8004d3c:	fff7ffff 	.word	0xfff7ffff
 8004d40:	00001388 	.word	0x00001388
 8004d44:	ffcfffff 	.word	0xffcfffff
 8004d48:	efffffff 	.word	0xefffffff
 8004d4c:	fffff3ff 	.word	0xfffff3ff
 8004d50:	ffffcfff 	.word	0xffffcfff
 8004d54:	fff3ffff 	.word	0xfff3ffff

08004d58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d58:	b5b0      	push	{r4, r5, r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d60:	230f      	movs	r3, #15
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e088      	b.n	8004e84 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2221      	movs	r2, #33	@ 0x21
 8004d76:	5c9b      	ldrb	r3, [r3, r2]
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	2100      	movs	r1, #0
 8004d84:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f7fd fcfd 	bl	8002788 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2221      	movs	r2, #33	@ 0x21
 8004d92:	2102      	movs	r1, #2
 8004d94:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d05f      	beq.n	8004e64 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	22ca      	movs	r2, #202	@ 0xca
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2253      	movs	r2, #83	@ 0x53
 8004db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004db4:	250f      	movs	r5, #15
 8004db6:	197c      	adds	r4, r7, r5
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f890 	bl	8004ee0 <RTC_EnterInitMode>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004dc4:	0028      	movs	r0, r5
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d12c      	bne.n	8004e28 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	492c      	ldr	r1, [pc, #176]	@ (8004e8c <HAL_RTC_Init+0x134>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	68d2      	ldr	r2, [r2, #12]
 8004e04:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6919      	ldr	r1, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	041a      	lsls	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e1a:	183c      	adds	r4, r7, r0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f000 f8a2 	bl	8004f68 <RTC_ExitInitMode>
 8004e24:	0003      	movs	r3, r0
 8004e26:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004e28:	230f      	movs	r3, #15
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d113      	bne.n	8004e5a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	438a      	bics	r2, r1
 8004e40:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	22ff      	movs	r2, #255	@ 0xff
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e62:	e003      	b.n	8004e6c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004e64:	230f      	movs	r3, #15
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004e6c:	230f      	movs	r3, #15
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2221      	movs	r2, #33	@ 0x21
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e7e:	230f      	movs	r3, #15
 8004e80:	18fb      	adds	r3, r7, r3
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b004      	add	sp, #16
 8004e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e8c:	ff8fffbf 	.word	0xff8fffbf

08004e90 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8004edc <HAL_RTC_WaitForSynchro+0x4c>)
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea4:	f7fd fd90 	bl	80029c8 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004eae:	f7fd fd8b 	bl	80029c8 <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	23fa      	movs	r3, #250	@ 0xfa
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e006      	b.n	8004ed2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d0ee      	beq.n	8004eae <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	0001ff5f 	.word	0x0001ff5f

08004ee0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004eec:	230f      	movs	r3, #15
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2240      	movs	r2, #64	@ 0x40
 8004efc:	4013      	ands	r3, r2
 8004efe:	d12c      	bne.n	8004f5a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2180      	movs	r1, #128	@ 0x80
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f10:	f7fd fd5a 	bl	80029c8 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f18:	e014      	b.n	8004f44 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f1a:	f7fd fd55 	bl	80029c8 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	200f      	movs	r0, #15
 8004f26:	183b      	adds	r3, r7, r0
 8004f28:	1839      	adds	r1, r7, r0
 8004f2a:	7809      	ldrb	r1, [r1, #0]
 8004f2c:	7019      	strb	r1, [r3, #0]
 8004f2e:	23fa      	movs	r3, #250	@ 0xfa
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d906      	bls.n	8004f44 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2221      	movs	r2, #33	@ 0x21
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004f3e:	183b      	adds	r3, r7, r0
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2240      	movs	r2, #64	@ 0x40
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d104      	bne.n	8004f5a <RTC_EnterInitMode+0x7a>
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d1df      	bne.n	8004f1a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	781b      	ldrb	r3, [r3, #0]
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b004      	add	sp, #16
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	240f      	movs	r4, #15
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2180      	movs	r1, #128	@ 0x80
 8004f84:	438a      	bics	r2, r1
 8004f86:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	4013      	ands	r3, r2
 8004f92:	d10c      	bne.n	8004fae <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff ff7a 	bl	8004e90 <HAL_RTC_WaitForSynchro>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d006      	beq.n	8004fae <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2221      	movs	r2, #33	@ 0x21
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004fa8:	193b      	adds	r3, r7, r4
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004fae:	230f      	movs	r3, #15
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	781b      	ldrb	r3, [r3, #0]
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b005      	add	sp, #20
 8004fba:	bd90      	pop	{r4, r7, pc}

08004fbc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004fc8:	4b64      	ldr	r3, [pc, #400]	@ (800515c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	22fa      	movs	r2, #250	@ 0xfa
 8004fce:	01d1      	lsls	r1, r2, #7
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7fb f899 	bl	8000108 <__udivsi3>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	001a      	movs	r2, r3
 8004fda:	0013      	movs	r3, r2
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	5c9b      	ldrb	r3, [r3, r2]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e0ad      	b.n	8005152 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2221      	movs	r2, #33	@ 0x21
 8005002:	2102      	movs	r1, #2
 8005004:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	22ca      	movs	r2, #202	@ 0xca
 800500c:	625a      	str	r2, [r3, #36]	@ 0x24
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2253      	movs	r2, #83	@ 0x53
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4013      	ands	r3, r2
 8005022:	d019      	beq.n	8005058 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3b01      	subs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	22ff      	movs	r2, #255	@ 0xff
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2221      	movs	r2, #33	@ 0x21
 800503c:	2103      	movs	r1, #3
 800503e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	2100      	movs	r1, #0
 8005046:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e082      	b.n	8005152 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2204      	movs	r2, #4
 8005054:	4013      	ands	r3, r2
 8005056:	d1e5      	bne.n	8005024 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	493f      	ldr	r1, [pc, #252]	@ (8005160 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8005064:	400a      	ands	r2, r1
 8005066:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	22ff      	movs	r2, #255	@ 0xff
 8005070:	401a      	ands	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	493b      	ldr	r1, [pc, #236]	@ (8005164 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8005078:	430a      	orrs	r2, r1
 800507a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800507c:	4b37      	ldr	r3, [pc, #220]	@ (800515c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	22fa      	movs	r2, #250	@ 0xfa
 8005082:	01d1      	lsls	r1, r2, #7
 8005084:	0018      	movs	r0, r3
 8005086:	f7fb f83f 	bl	8000108 <__udivsi3>
 800508a:	0003      	movs	r3, r0
 800508c:	001a      	movs	r2, r3
 800508e:	0013      	movs	r3, r2
 8005090:	015b      	lsls	r3, r3, #5
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	189b      	adds	r3, r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3b01      	subs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	22ff      	movs	r2, #255	@ 0xff
 80050ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	@ 0x21
 80050b4:	2103      	movs	r1, #3
 80050b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e046      	b.n	8005152 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	d0e5      	beq.n	800509c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2107      	movs	r1, #7
 80050dc:	438a      	bics	r2, r1
 80050de:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80050f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80050fe:	2180      	movs	r1, #128	@ 0x80
 8005100:	0349      	lsls	r1, r1, #13
 8005102:	430a      	orrs	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005106:	4b18      	ldr	r3, [pc, #96]	@ (8005168 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	4b17      	ldr	r3, [pc, #92]	@ (8005168 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800510c:	2180      	movs	r1, #128	@ 0x80
 800510e:	0349      	lsls	r1, r1, #13
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2180      	movs	r1, #128	@ 0x80
 8005120:	01c9      	lsls	r1, r1, #7
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2180      	movs	r1, #128	@ 0x80
 8005132:	00c9      	lsls	r1, r1, #3
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2221      	movs	r2, #33	@ 0x21
 8005144:	2101      	movs	r1, #1
 8005146:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	2100      	movs	r1, #0
 800514e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b006      	add	sp, #24
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	200007e8 	.word	0x200007e8
 8005160:	fffffbff 	.word	0xfffffbff
 8005164:	fffffb7f 	.word	0xfffffb7f
 8005168:	40010400 	.word	0x40010400

0800516c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	5c9b      	ldrb	r3, [r3, r2]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8005182:	2302      	movs	r3, #2
 8005184:	e04e      	b.n	8005224 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2221      	movs	r2, #33	@ 0x21
 8005192:	2102      	movs	r1, #2
 8005194:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	22ca      	movs	r2, #202	@ 0xca
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2253      	movs	r2, #83	@ 0x53
 80051a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	491e      	ldr	r1, [pc, #120]	@ (800522c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	491b      	ldr	r1, [pc, #108]	@ (8005230 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80051c2:	400a      	ands	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c6:	f7fd fbff 	bl	80029c8 <HAL_GetTick>
 80051ca:	0003      	movs	r3, r0
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051ce:	e016      	b.n	80051fe <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051d0:	f7fd fbfa 	bl	80029c8 <HAL_GetTick>
 80051d4:	0002      	movs	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	23fa      	movs	r3, #250	@ 0xfa
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	429a      	cmp	r2, r3
 80051e0:	d90d      	bls.n	80051fe <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	22ff      	movs	r2, #255	@ 0xff
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2221      	movs	r2, #33	@ 0x21
 80051ee:	2103      	movs	r1, #3
 80051f0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e012      	b.n	8005224 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2204      	movs	r2, #4
 8005206:	4013      	ands	r3, r2
 8005208:	d0e2      	beq.n	80051d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	22ff      	movs	r2, #255	@ 0xff
 8005210:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2221      	movs	r2, #33	@ 0x21
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fffffbff 	.word	0xfffffbff
 8005230:	ffffbfff 	.word	0xffffbfff

08005234 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800523c:	4b13      	ldr	r3, [pc, #76]	@ (800528c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800523e:	2280      	movs	r2, #128	@ 0x80
 8005240:	0352      	lsls	r2, r2, #13
 8005242:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	01db      	lsls	r3, r3, #7
 800524e:	4013      	ands	r3, r2
 8005250:	d014      	beq.n	800527c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4013      	ands	r3, r2
 800525e:	d00d      	beq.n	800527c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	22ff      	movs	r2, #255	@ 0xff
 8005268:	401a      	ands	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4908      	ldr	r1, [pc, #32]	@ (8005290 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8005270:	430a      	orrs	r2, r1
 8005272:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 f80c 	bl	8005294 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2221      	movs	r2, #33	@ 0x21
 8005280:	2101      	movs	r1, #1
 8005282:	5499      	strb	r1, [r3, r2]
}
 8005284:	46c0      	nop			@ (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b002      	add	sp, #8
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010400 	.word	0x40010400
 8005290:	fffffb7f 	.word	0xfffffb7f

08005294 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e07b      	b.n	80053ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	2382      	movs	r3, #130	@ 0x82
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d009      	beq.n	80052de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	61da      	str	r2, [r3, #28]
 80052d0:	e005      	b.n	80052de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2251      	movs	r2, #81	@ 0x51
 80052e8:	5c9b      	ldrb	r3, [r3, r2]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d107      	bne.n	8005300 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2250      	movs	r2, #80	@ 0x50
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f7fd fa64 	bl	80027c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2251      	movs	r2, #81	@ 0x51
 8005304:	2102      	movs	r1, #2
 8005306:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2140      	movs	r1, #64	@ 0x40
 8005314:	438a      	bics	r2, r1
 8005316:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	2382      	movs	r3, #130	@ 0x82
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	401a      	ands	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6899      	ldr	r1, [r3, #8]
 8005326:	2384      	movs	r3, #132	@ 0x84
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	400b      	ands	r3, r1
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	2380      	movs	r3, #128	@ 0x80
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	400b      	ands	r3, r1
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2102      	movs	r1, #2
 8005340:	400b      	ands	r3, r1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	2101      	movs	r1, #1
 800534a:	400b      	ands	r3, r1
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6999      	ldr	r1, [r3, #24]
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	400b      	ands	r3, r1
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	2138      	movs	r1, #56	@ 0x38
 8005360:	400b      	ands	r3, r1
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	2180      	movs	r1, #128	@ 0x80
 800536a:	400b      	ands	r3, r1
 800536c:	431a      	orrs	r2, r3
 800536e:	0011      	movs	r1, r2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005374:	2380      	movs	r3, #128	@ 0x80
 8005376:	019b      	lsls	r3, r3, #6
 8005378:	401a      	ands	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	0c1b      	lsrs	r3, r3, #16
 8005388:	2204      	movs	r2, #4
 800538a:	4013      	ands	r3, r2
 800538c:	0019      	movs	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	2210      	movs	r2, #16
 8005394:	401a      	ands	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2251      	movs	r2, #81	@ 0x51
 80053a8:	2101      	movs	r1, #1
 80053aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	0018      	movs	r0, r3
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b002      	add	sp, #8
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b088      	sub	sp, #32
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	1dbb      	adds	r3, r7, #6
 80053c4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053c6:	231f      	movs	r3, #31
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2250      	movs	r2, #80	@ 0x50
 80053d2:	5c9b      	ldrb	r3, [r3, r2]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_SPI_Transmit+0x26>
 80053d8:	2302      	movs	r3, #2
 80053da:	e145      	b.n	8005668 <HAL_SPI_Transmit+0x2b2>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2250      	movs	r2, #80	@ 0x50
 80053e0:	2101      	movs	r1, #1
 80053e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053e4:	f7fd faf0 	bl	80029c8 <HAL_GetTick>
 80053e8:	0003      	movs	r3, r0
 80053ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80053ec:	2316      	movs	r3, #22
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	1dba      	adds	r2, r7, #6
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2251      	movs	r2, #81	@ 0x51
 80053fa:	5c9b      	ldrb	r3, [r3, r2]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d004      	beq.n	800540c <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005402:	231f      	movs	r3, #31
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	2202      	movs	r2, #2
 8005408:	701a      	strb	r2, [r3, #0]
    goto error;
 800540a:	e126      	b.n	800565a <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_SPI_Transmit+0x64>
 8005412:	1dbb      	adds	r3, r7, #6
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800541a:	231f      	movs	r3, #31
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
    goto error;
 8005422:	e11a      	b.n	800565a <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2251      	movs	r2, #81	@ 0x51
 8005428:	2103      	movs	r1, #3
 800542a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1dba      	adds	r2, r7, #6
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1dba      	adds	r2, r7, #6
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	2380      	movs	r3, #128	@ 0x80
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	429a      	cmp	r2, r3
 8005470:	d110      	bne.n	8005494 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2140      	movs	r1, #64	@ 0x40
 800547e:	438a      	bics	r2, r1
 8005480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2180      	movs	r1, #128	@ 0x80
 800548e:	01c9      	lsls	r1, r1, #7
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	4013      	ands	r3, r2
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d007      	beq.n	80054b2 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2140      	movs	r1, #64	@ 0x40
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d152      	bne.n	8005564 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d004      	beq.n	80054d0 <HAL_SPI_Transmit+0x11a>
 80054c6:	2316      	movs	r3, #22
 80054c8:	18fb      	adds	r3, r7, r3
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d143      	bne.n	8005558 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	1c9a      	adds	r2, r3, #2
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054f4:	e030      	b.n	8005558 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2202      	movs	r2, #2
 80054fe:	4013      	ands	r3, r2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d112      	bne.n	800552a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005508:	881a      	ldrh	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	1c9a      	adds	r2, r3, #2
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005528:	e016      	b.n	8005558 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800552a:	f7fd fa4d 	bl	80029c8 <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d802      	bhi.n	8005540 <HAL_SPI_Transmit+0x18a>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	d102      	bne.n	8005546 <HAL_SPI_Transmit+0x190>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005546:	231f      	movs	r3, #31
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	2203      	movs	r2, #3
 800554c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2251      	movs	r2, #81	@ 0x51
 8005552:	2101      	movs	r1, #1
 8005554:	5499      	strb	r1, [r3, r2]
          goto error;
 8005556:	e080      	b.n	800565a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1c9      	bne.n	80054f6 <HAL_SPI_Transmit+0x140>
 8005562:	e053      	b.n	800560c <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <HAL_SPI_Transmit+0x1c0>
 800556c:	2316      	movs	r3, #22
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d145      	bne.n	8005602 <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800559c:	e031      	b.n	8005602 <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d113      	bne.n	80055d4 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	7812      	ldrb	r2, [r2, #0]
 80055b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80055d2:	e016      	b.n	8005602 <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d4:	f7fd f9f8 	bl	80029c8 <HAL_GetTick>
 80055d8:	0002      	movs	r2, r0
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d802      	bhi.n	80055ea <HAL_SPI_Transmit+0x234>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d102      	bne.n	80055f0 <HAL_SPI_Transmit+0x23a>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d108      	bne.n	8005602 <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80055f0:	231f      	movs	r3, #31
 80055f2:	18fb      	adds	r3, r7, r3
 80055f4:	2203      	movs	r2, #3
 80055f6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2251      	movs	r2, #81	@ 0x51
 80055fc:	2101      	movs	r1, #1
 80055fe:	5499      	strb	r1, [r3, r2]
          goto error;
 8005600:	e02b      	b.n	800565a <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1c8      	bne.n	800559e <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	0018      	movs	r0, r3
 8005614:	f000 f8ba 	bl	800578c <SPI_EndRxTxTransaction>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	d002      	beq.n	8005622 <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005648:	231f      	movs	r3, #31
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e003      	b.n	800565a <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2251      	movs	r2, #81	@ 0x51
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2250      	movs	r2, #80	@ 0x50
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005662:	231f      	movs	r3, #31
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	781b      	ldrb	r3, [r3, #0]
}
 8005668:	0018      	movs	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	b008      	add	sp, #32
 800566e:	bd80      	pop	{r7, pc}

08005670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005680:	f7fd f9a2 	bl	80029c8 <HAL_GetTick>
 8005684:	0002      	movs	r2, r0
 8005686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	18d3      	adds	r3, r2, r3
 800568e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005690:	f7fd f99a 	bl	80029c8 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005698:	4b3a      	ldr	r3, [pc, #232]	@ (8005784 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	015b      	lsls	r3, r3, #5
 800569e:	0d1b      	lsrs	r3, r3, #20
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	4353      	muls	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	e058      	b.n	800575a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3301      	adds	r3, #1
 80056ac:	d055      	beq.n	800575a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ae:	f7fd f98b 	bl	80029c8 <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d902      	bls.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d142      	bne.n	800574a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	21e0      	movs	r1, #224	@ 0xe0
 80056d0:	438a      	bics	r2, r1
 80056d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	2382      	movs	r3, #130	@ 0x82
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	429a      	cmp	r2, r3
 80056de:	d113      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x98>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d005      	beq.n	80056f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d107      	bne.n	8005708 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2140      	movs	r1, #64	@ 0x40
 8005704:	438a      	bics	r2, r1
 8005706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800570c:	2380      	movs	r3, #128	@ 0x80
 800570e:	019b      	lsls	r3, r3, #6
 8005710:	429a      	cmp	r2, r3
 8005712:	d110      	bne.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	491a      	ldr	r1, [pc, #104]	@ (8005788 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2180      	movs	r1, #128	@ 0x80
 8005730:	0189      	lsls	r1, r1, #6
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2251      	movs	r2, #81	@ 0x51
 800573a:	2101      	movs	r1, #1
 800573c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2250      	movs	r2, #80	@ 0x50
 8005742:	2100      	movs	r1, #0
 8005744:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e017      	b.n	800577a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	3b01      	subs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	4013      	ands	r3, r2
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	425a      	negs	r2, r3
 800576a:	4153      	adcs	r3, r2
 800576c:	b2db      	uxtb	r3, r3
 800576e:	001a      	movs	r2, r3
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d197      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b008      	add	sp, #32
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	200007e8 	.word	0x200007e8
 8005788:	ffffdfff 	.word	0xffffdfff

0800578c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005798:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <SPI_EndRxTxTransaction+0x84>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	491d      	ldr	r1, [pc, #116]	@ (8005814 <SPI_EndRxTxTransaction+0x88>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f7fa fcb2 	bl	8000108 <__udivsi3>
 80057a4:	0003      	movs	r3, r0
 80057a6:	001a      	movs	r2, r3
 80057a8:	0013      	movs	r3, r2
 80057aa:	015b      	lsls	r3, r3, #5
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	2382      	movs	r3, #130	@ 0x82
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	429a      	cmp	r2, r3
 80057c0:	d112      	bne.n	80057e8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	0013      	movs	r3, r2
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	@ 0x80
 80057d0:	f7ff ff4e 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d016      	beq.n	8005806 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057dc:	2220      	movs	r2, #32
 80057de:	431a      	orrs	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e00f      	b.n	8005808 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2280      	movs	r2, #128	@ 0x80
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b80      	cmp	r3, #128	@ 0x80
 8005800:	d0f2      	beq.n	80057e8 <SPI_EndRxTxTransaction+0x5c>
 8005802:	e000      	b.n	8005806 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005804:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b006      	add	sp, #24
 800580e:	bd80      	pop	{r7, pc}
 8005810:	200007e8 	.word	0x200007e8
 8005814:	016e3600 	.word	0x016e3600

08005818 <memset>:
 8005818:	0003      	movs	r3, r0
 800581a:	1882      	adds	r2, r0, r2
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	7019      	strb	r1, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2600      	movs	r6, #0
 800582c:	4c0c      	ldr	r4, [pc, #48]	@ (8005860 <__libc_init_array+0x38>)
 800582e:	4d0d      	ldr	r5, [pc, #52]	@ (8005864 <__libc_init_array+0x3c>)
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	2600      	movs	r6, #0
 800583a:	f000 f823 	bl	8005884 <_init>
 800583e:	4c0a      	ldr	r4, [pc, #40]	@ (8005868 <__libc_init_array+0x40>)
 8005840:	4d0a      	ldr	r5, [pc, #40]	@ (800586c <__libc_init_array+0x44>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	00b3      	lsls	r3, r6, #2
 800584e:	58eb      	ldr	r3, [r5, r3]
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	00b3      	lsls	r3, r6, #2
 8005858:	58eb      	ldr	r3, [r5, r3]
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	08005be4 	.word	0x08005be4
 8005864:	08005be4 	.word	0x08005be4
 8005868:	08005be8 	.word	0x08005be8
 800586c:	08005be4 	.word	0x08005be4

08005870 <memcpy>:
 8005870:	2300      	movs	r3, #0
 8005872:	b510      	push	{r4, lr}
 8005874:	429a      	cmp	r2, r3
 8005876:	d100      	bne.n	800587a <memcpy+0xa>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	5ccc      	ldrb	r4, [r1, r3]
 800587c:	54c4      	strb	r4, [r0, r3]
 800587e:	3301      	adds	r3, #1
 8005880:	e7f8      	b.n	8005874 <memcpy+0x4>
	...

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
